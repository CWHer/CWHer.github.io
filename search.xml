<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[AHOI2009]中国象棋]]></title>
    <url>%2F2018%2F07%2F19%2FAHOI2009-%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%2F</url>
    <content type="text"><![CDATA[每行每列最多放两个dp 数组记录第i 行，有j 列放了1个，k 列放了2个的方案数不放 dp\left [i \right ]\left [ j \right ]\left [k \right ]+=dp\left [i-1 \right ]\left [ j \right ]\left [k \right ]放一个 dp\left [i\right ]\left [ j+1 \right ]\left [k \right ]+=dp\left [i-1 \right ]\left [ j \right ]\left [k \right ]*(m-j-k)(m-j-k>0) dp\left [i \right ]\left [ j \right ]\left [k +1 \right ]+=dp\left [i -1\right ]\left [ j \right ]\left [k \right ]*j(j>0)放两个 dp\left [i \right ]\left [ j -2\right ]\left [k +2 \right ]+=dp\left [i-1 \right ]\left [ j \right ]\left [k \right ]*C_{j}^{2}(j\geq 2) dp\left [i \right ]\left [ j +2\right ]\left [k \right ]+=dp\left [i-1 \right ]\left [ j \right ]\left [k \right ]*C_{m-j-k}^{2}(m-j-k\geq 2) dp\left [i \right ]\left [ j \right ]\left [k +1\right ]+=dp\left [i-1 \right ]\left [ j \right ]\left [k \right ]*(m-j-k)*j(j>0,m-j-k>0) 123456789101112131415161718192021222324252627#include&lt;cstdio&gt;#define LL long longconst int N=105,mod=9999973;int n,m;LL dp[N][N][N]; //row,1,2int main()&#123; scanf("%d%d",&amp;n,&amp;m); dp[0][0][0]=1; for(int i=1;i&lt;=n;i++) for(int j=0;j&lt;=m;j++) for(int k=0;j+k&lt;=m;k++) &#123; dp[i][j][k]=(dp[i][j][k]+dp[i-1][j][k])%mod; if (m-j-k&gt;0) dp[i][j+1][k]=(dp[i][j+1][k]+dp[i-1][j][k]*(m-j-k))%mod; if (j&gt;0) dp[i][j-1][k+1]=(dp[i][j-1][k+1]+dp[i-1][j][k]*j)%mod; if (j&gt;=2) dp[i][j-2][k+2]=(dp[i][j-2][k+2]+dp[i-1][j][k]*j*(j-1)/2)%mod; if (m-j-k&gt;=2) dp[i][j+2][k]=(dp[i][j+2][k]+dp[i-1][j][k]*(m-j-k)*(m-j-k-1)/2)%mod; if (j&gt;0&amp;&amp;m-j-k&gt;0) dp[i][j][k+1]=(dp[i][j][k+1]+dp[i-1][j][k]*(m-j-k)*j)%mod; &#125; int ans=0; for(int i=0;i&lt;=m;i++) for(int j=0;i+j&lt;=m;j++) ans=(ans+dp[n][i][j])%mod; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1262 间谍网络]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B4%9B%E8%B0%B7P1262-%E9%97%B4%E8%B0%8D%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[缩点时在新节点中保存最小花费和最小编号即可1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;stack&gt;using namespace std;const int N=3050,INF=1&lt;&lt;25;int n,m,w[N];int sz[N],val[N],idx[N],cnt=0,d[N];int dfn[N],low[N],num=0,inq[N];int ans=0,id=INF;vector&lt;int&gt; e[N];stack&lt;int&gt; S;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!=&apos;-&apos;&amp;&amp;(ch&lt;&apos;0&apos;||ch&gt;&apos;9&apos;)) ch=getchar(); if (ch==&apos;-&apos;) t=-1,ch=getchar(); while (ch&gt;=&apos;0&apos;&amp;&amp;ch&lt;=&apos;9&apos;) x=x*10+ch-48,ch=getchar(); return x*t;&#125;void tarjan(int o)&#123; dfn[o]=low[o]=++num; inq[o]=1,S.push(o); for(int i=0;i&lt;e[o].size();i++) &#123; int to=e[o][i]; if (!dfn[to]) &#123; tarjan(to); low[o]=min(low[o],low[to]); &#125; else if (inq[to]) low[o]=min(low[o],dfn[to]); &#125; if (dfn[o]==low[o]) &#123; int x;++cnt; do&#123; x=S.top(); inq[x]=0,S.pop(); idx[x]=cnt; val[cnt]=min(val[cnt],w[x]); sz[cnt]=min(sz[cnt],x); &#125; while (x!=o); &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) w[i]=sz[i]=val[i]=INF; int T=read(); while (T--) &#123; int x=read(); w[x]=read(); &#125; m=read(); for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); e[u].push_back(v); &#125; for(int i=1;i&lt;=n;i++) if (!dfn[i]) tarjan(i); for(int i=1;i&lt;=n;i++) for(int j=0;j&lt;e[i].size();j++) &#123; int u=i,v=e[i][j]; if (idx[u]!=idx[v]) d[idx[v]]++; &#125; for(int i=1;i&lt;=cnt;i++) if (!d[i]) &#123; if (val[i]==INF) id=min(id,sz[i]); else ans+=val[i]; &#125; if (id==INF) printf(&quot;YES\n%d&quot;,ans); else printf(&quot;NO\n%d&quot;,id); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>强联通分量</tag>
        <tag>缩点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[USACO06NOV]路障Roadblocks]]></title>
    <url>%2F2018%2F07%2F19%2FUSACO06NOV-%E8%B7%AF%E9%9A%9CRoadblocks%2F</url>
    <content type="text"><![CDATA[和次小生成树相似的套路记f 为S 到所有点的最短路，g 为T 到所有点的最短路枚举所有边edge\left \{ u,v,val \right \} ans=min\left \{ f\left [ u \right ]+val+ g\left [ v \right ]\right \}\left ( f\left [ u \right ]+val+ g\left [ v \right ]>f\left [ T \right ] \right ) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N=5050,INF=1&lt;&lt;30;int n,m,d[2][N],inq[N],mins=INF,ans=INF;vector&lt;int&gt; e[N],g[N];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int val)&#123; e[u].push_back(v); g[u].push_back(val);&#125;void SPFA(int s,int k)&#123; for(int i=1;i&lt;=n;i++) d[k][i]=INF; d[k][s]=0,inq[s]=1,Q.push(s); while (!Q.empty()) &#123; int x=Q.front(); inq[x]=0,Q.pop(); for(int i=0;i&lt;e[x].size();i++) &#123; int to=e[x][i]; if (d[k][x]+g[x][i]&lt;d[k][to]) &#123; d[k][to]=d[k][x]+g[x][i]; if (!inq[to]) inq[to]=1,Q.push(to); &#125; &#125; &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); int val=read(); add(u,v,val); add(v,u,val); &#125; SPFA(1,0),SPFA(n,1); mins=d[0][n]; for(int i=1;i&lt;=n;i++) for(int j=0;j&lt;e[i].size();j++) &#123; int u=i,v=e[i][j]; if (d[0][u]+g[i][j]+d[1][v]&gt;mins) ans=min(ans,d[0][u]+g[i][j]+d[1][v]); &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P2002 消息扩散]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B4%9B%E8%B0%B7P2002-%E6%B6%88%E6%81%AF%E6%89%A9%E6%95%A3%2F</url>
    <content type="text"><![CDATA[缩完点之后求有多少入度为0的点即可1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;stack&gt;using namespace std;const int N=100050;int n,m,d[N],idx[N],cnt=0,ans=0;int inq[N],dfn[N],low[N],num=0;vector&lt;int&gt; e[N],g[N];stack&lt;int&gt; S;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void tarjan(int o)&#123; dfn[o]=low[o]=++num; inq[o]=1,S.push(o); for(int i=0;i&lt;e[o].size();i++) &#123; int to=e[o][i]; if (!dfn[to]) &#123; tarjan(to); low[o]=min(low[o],low[to]); &#125; else if (inq[to]) low[o]=min(low[o],dfn[to]); &#125; if (low[o]==dfn[o]) &#123; int x;cnt++; do&#123; x=S.top(); inq[x]=0,S.pop(); idx[x]=cnt; &#125; while(x!=o); &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); if (u==v) continue; e[u].push_back(v); &#125; for(int i=1;i&lt;=n;i++) if (!dfn[i]) tarjan(i); for(int i=1;i&lt;=n;i++) for(int j=0;j&lt;e[i].size();j++) &#123; int u=i,v=e[i][j]; if (idx[u]!=idx[v]) &#123; g[idx[u]].push_back(idx[v]); d[idx[v]]++; &#125; &#125; for(int i=1;i&lt;=cnt;i++) if (!d[i]) ans++; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>强联通分量</tag>
        <tag>缩点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[TJOI2009]猜数字]]></title>
    <url>%2F2018%2F07%2F19%2FTJOI2009-%E7%8C%9C%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[\left\{\begin{matrix} x\equiv a_{1}\left ( mod \ b_{1} \right ) \\ x\equiv a_{2}\left ( mod \ b_{2} \right )\\ \cdots \\ x\equiv a_{n}\left ( mod \ b_{n} \right )\\ \end{matrix}\right.其中gcd\left ( b_{i} ,b_{j}\right )=1\left ( i\neq j,i\in n,j\in n \right )设 M=\prod_{i=1}^{n}b_{i} M_{i}=\frac{M}{b_{i}} r_{i}\equiv M_{i}^{-1}\left ( mod \ b_{i} \right )则 x=\sum_{i=1}^{n}M_{i}a_{i}r_{i}且在M 以内有唯一解123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstdio&gt;#define LL long longconst int N=15;LL a[N],b[N],M[N]=&#123;1&#125;,r[N],n,x,ans=0;void exgcd(LL a,LL b,LL &amp;x,LL &amp;y)&#123; if (!b) &#123; x=1,y=0; return; &#125; exgcd(b,a%b,y,x); y-=a/b*x;&#125;LL mul(LL a,LL b,LL mod)&#123; LL ret=0; for(;b;b&gt;&gt;=1) &#123; if (b&amp;1) ret=(ret+a)%mod; a=(a&lt;&lt;1)%mod; &#125; return ret;&#125;int main()&#123; scanf("%lld",&amp;n); for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;a[i]); for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;b[i]); for(int i=1;i&lt;=n;i++) a[i]=(a[i]%b[i]+b[i])%b[i]; for(int i=1;i&lt;=n;i++) M[0]*=b[i]; for(int i=1;i&lt;=n;i++) M[i]=M[0]/b[i]; for(int i=1;i&lt;=n;i++) exgcd(M[i],b[i],r[i],x); for(int i=1;i&lt;=n;i++) r[i]=(r[i]%b[i]+b[i])%b[i]; for(int i=1;i&lt;=n;i++) ans=(ans+mul(mul(a[i],M[i],M[0]),r[i],M[0]))%M[0]; printf("%lld\n",(ans%M[0]+M[0])%M[0]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1273 有线电视网]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B4%9B%E8%B0%B7P1273-%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%2F</url>
    <content type="text"><![CDATA[记dp\left [ i\right ]\left [ j \right ]为i 节点，取j 个能获得的最大收入叶节点dp\left [ i\right ]\left [ 1 \right ]=w\left [ i \right ]转移方程 dp\left [ x\right ]\left [ i \right ]=max\left \{ dp\left [ to \right ]\left [ j \right ]+dp\left [ x \right ]\left [ i-j \right ]-cost\left [ x \right ]\left [ to \right ] \right \}\left ( to\in x_{son} \right ) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;cstdio&gt;#include&lt;vector&gt;using namespace std;const int N=3050,rt=1,INF=1&lt;&lt;20;int dp[N][N],n,m,sz[N];vector&lt;int&gt; e[N],g[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int val)&#123; e[u].push_back(v); g[u].push_back(val);&#125;void dfs(int o)&#123; if (o&gt;n-m) sz[o]=1; for(int k=0;k&lt;e[o].size();k++) &#123; int to=e[o][k]; dfs(to); for(int i=m;i&gt;=0;i--) for(int j=0;j&lt;=min(i,sz[to]);j++) dp[o][i]=max(dp[o][i],dp[o][i-j]+dp[to][j]-g[o][k]); sz[o]+=sz[to]; &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n-m;i++) &#123; int T=read(); while (T--) &#123; int u=i,v=read(); add(u,v,read()); &#125; &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) dp[i][j]=-INF; for(int i=n-m+1;i&lt;=n;i++) dp[i][1]=read(); dfs(rt); for(int i=m;i&gt;=0;i--) if (dp[rt][i]&gt;=0) &#123; printf("%d\n",i); return 0; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>树形结构</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[TJOI2010]中位数]]></title>
    <url>%2F2018%2F07%2F19%2FTJOI2010-%E4%B8%AD%E4%BD%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[对顶堆的模板题对顶堆为一个大根堆A ,和一个小根堆B ,分别维护一个序列的前一段和后一段要求中位数，只需要将序列均分入两个堆中即可1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;struct cmp&#123;bool operator ()(int a,int b)&#123;return a&gt;b;&#125;&#125;;priority_queue&lt;int&gt; A;priority_queue&lt;int,vector&lt;int&gt;,cmp&gt; B;int n,m;int main()&#123; scanf("%d",&amp;n); for(int i=1,x;i&lt;=n;i++) &#123; scanf("%d",&amp;x); B.push(x); &#125; while (B.size()&gt;A.size()) &#123; A.push(B.top()); B.pop(); &#125; scanf("%d",&amp;m); for(int i=1,x;i&lt;=m;i++) &#123; char str[10]; scanf("%s",str); if (str[0]=='a') &#123; scanf("%d",&amp;x),n++; x&gt;A.top()?B.push(x):A.push(x); while (A.size()&gt;n/2) &#123; B.push(A.top()); A.pop(); &#125; while (B.size()&gt;A.size()) &#123; A.push(B.top()); B.pop(); &#125; &#125; else printf("%d\n",A.top()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[严格次小生成树[BJWC2010]]]></title>
    <url>%2F2018%2F07%2F19%2F%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-BJWC2010%2F</url>
    <content type="text"><![CDATA[首先要知道怎么求非严格次小生成树记max\left \{ u,v \right \}为u，v 路径上的最大边权先求一遍最小生成树，记权值为mins然后枚举所有不在树中的边edge\left \{ u,v,val \right \}非严格次小生成树的权值为min\left \{ mins-max\left \{ u,v \right \} +val\right \}用倍增或树剖都可以求 现在要求严格次小的于是记录\left \{ u,v \right \}的次大边权，保证其严格小于最大值，记为nxt\left \{ u,v \right \}然后依旧是枚举所有不在树中的边edge\left \{ u,v,val \right \}若val>max\left \{ u,v \right \}，则为mins-max\left \{ u,v \right \} +val，否则为mins-nxt\left \{ u,v \right \} +val123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=100050,rt=1;const LL INF=1LL&lt;&lt;60;LL mins=0,ans=INF;int fa[N][25],w[N][25],c[N][25],log[N];int dep[N],n,m,f[N],used[N&lt;&lt;2];struct edge&#123;int u,v,val;&#125;t[N&lt;&lt;2];vector&lt;int&gt; e[N],g[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;bool cmp(edge a,edge b)&#123;return a.val&lt;b.val;&#125;int find(int x)&#123;return f[x]==x?x:f[x]=find(f[x]);&#125;void unite(int u,int v)&#123;f[find(u)]=find(v);&#125;void add(int u,int v,int val)&#123; e[u].push_back(v); g[u].push_back(val);&#125;void dfs(int o)&#123; for(int i=1;i&lt;=log[dep[o]];i++) &#123; fa[o][i]=fa[fa[o][i-1]][i-1]; w[o][i]=max(w[o][i-1],w[fa[o][i-1]][i-1]); c[o][i]=max(c[o][i-1],c[fa[o][i-1]][i-1]); if (w[o][i-1]&lt;w[fa[o][i-1]][i-1]) c[o][i]=max(c[o][i],w[o][i-1]); if (w[o][i-1]&gt;w[fa[o][i-1]][i-1]) c[o][i]=max(c[o][i],w[fa[o][i-1]][i-1]); &#125; for(int i=0;i&lt;e[o].size();i++) &#123; int to=e[o][i]; if (!dep[to]) &#123; dep[to]=dep[o]+1; fa[to][0]=o; w[to][0]=g[o][i]; dfs(to); &#125; &#125;&#125;int calc(int u,int v,int val)&#123; int ret=0; if (dep[u]&lt;dep[v]) swap(u,v); for(int i=0;i&lt;=log[dep[u]];i++) if (((dep[u]-dep[v])&gt;&gt;i)&amp;1) &#123; ret=max(ret,val!=w[u][i]?w[u][i]:c[u][i]); u=fa[u][i]; &#125; if (u==v) return ret; for(int i=log[dep[u]];i&gt;=0;i--) if (fa[u][i]!=fa[v][i]) &#123; ret=max(ret,val!=w[u][i]?w[u][i]:c[u][i]); ret=max(ret,val!=w[v][i]?w[v][i]:c[v][i]); u=fa[u][i],v=fa[v][i]; &#125; ret=max(ret,val!=w[u][0]?w[u][0]:c[u][0]); ret=max(ret,val!=w[v][0]?w[v][0]:c[v][0]); return ret;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) log[i]=log[i-1]+(1&lt;&lt;log[i-1]==i); for(int i=1;i&lt;=m;i++) &#123; t[i].u=read(); t[i].v=read(); t[i].val=read(); &#125; sort(t+1,t+m+1,cmp); for(int i=1;i&lt;=n;i++) f[i]=i; for(int i=1;i&lt;=m;i++) &#123; int u=t[i].u,v=t[i].v; if (find(u)!=find(v)) &#123; used[i]=1; add(u,v,t[i].val); add(v,u,t[i].val); unite(u,v); mins+=t[i].val; &#125; &#125; dep[rt]=1,dfs(rt); for(int i=1;i&lt;=m;i++) if (!used[i]) &#123; int u=t[i].u,v=t[i].v; int val=calc(u,v,t[i].val); ans=min(ans,mins-val+t[i].val); &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[USACO07NOV]奶牛接力Cow Relays]]></title>
    <url>%2F2018%2F07%2F19%2FUSACO07NOV-%E5%A5%B6%E7%89%9B%E6%8E%A5%E5%8A%9BCow-Relays%2F</url>
    <content type="text"><![CDATA[记dp\left [ t \right ]\left [ i \right ]\left [ j\right ]为i 到j 经过t 条边的最短路转移方程为 dp\left [ t+1 \right ]\left [ i \right ]\left [ j\right ]=min\left \{ dp\left [ t \right ]\left [ i \right ]\left [ k \right ]+ d\left [ k \right ]\left [ j \right ]\right \}\left ( 1\leq k\leq n \right )通过观察，发现很像矩阵乘法，然后还满足交换律因此 dp\left [ t \right ]=dp\left [ 0 \right ]*D^{t}dp\left [ 0 \right ]矩阵中除dp\left [ 0 \right ]\left [ st \right ]\left [ st \right ]= 0，其它为INF123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=205;const LL INF=1LL&lt;&lt;60;int pos[N&lt;&lt;10],cnt=0,n,m,st,ed;;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;namespace Matrix&#123; struct mtrx&#123;LL w[N][N];&#125; d; void fill(mtrx &amp;M,LL x) &#123; for(int i=1;i&lt;=cnt;i++) for(int j=1;j&lt;=cnt;j++) M.w[i][j]=x; &#125; void cpy(mtrx &amp;M,mtrx &amp;C) &#123; for(int i=1;i&lt;=cnt;i++) for(int j=1;j&lt;=cnt;j++) M.w[i][j]=C.w[i][j]; &#125; void mul(mtrx &amp;M,mtrx C) &#123; mtrx ret; fill(ret,INF); for(int i=1;i&lt;=cnt;i++) for(int j=1;j&lt;=cnt;j++) for(int k=1;k&lt;=cnt;k++) ret.w[i][j]=min(ret.w[i][j],M.w[i][k]+C.w[k][j]); cpy(M,ret); &#125; void pow(mtrx &amp;M,int x) &#123; mtrx ret; fill(ret,INF); ret.w[pos[st]][pos[st]]=0; for(;x;x&gt;&gt;=1) &#123; if (x&amp;1) mul(ret,M); mul(M,M); &#125; cpy(M,ret); &#125;&#125;;using namespace Matrix;int main()&#123; n=read(),m=read(),st=read(),ed=read(); for(int i=1;i&lt;N;i++) for(int j=1;j&lt;N;j++) d.w[i][j]=INF; for(int i=1;i&lt;=m;i++) &#123; LL val=read(); int u=read(),v=read(); if (!pos[u]) pos[u]=++cnt; if (!pos[v]) pos[v]=++cnt; u=pos[u],v=pos[v]; d.w[u][v]=d.w[v][u]=min(d.w[u][v],val); &#125; pow(d,n); printf("%lld\n",d.w[pos[st]][pos[ed]]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>图论</tag>
        <tag>矩阵加速</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1891 疯狂LCM]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B4%9B%E8%B0%B7P1891-%E7%96%AF%E7%8B%82LCM%2F</url>
    <content type="text"><![CDATA[lcm 过大无法枚举，考虑枚举gcd对于一组gcd\left ( x,n \right )=k，有gcd\left ( \frac{x}{k},\frac{n}{k} \right )=1，且lcm\left(x,n\right)=\frac{xn}{k}记 f\left [ k \right ]=\sum_{i=1}^{k}i\left [ gcd\left ( i,k \right )=1 \right ]根据定义，若gcd\left ( x,n \right )=1，则gcd\left ( n-x,n \right )=1因此 f\left [ k \right ]= \frac{k*\varphi\left [ k \right ]}{2}枚举所有的k则 \sum lcm\left ( x,n \right )=k*\frac{n}{k}*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )复杂度O\left ( T\sqrt{N} \right )12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;cstdio&gt;#define LL long longconst int N=1000050;int phi[N],prime[N],cnt=0;LL f[N],w[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;void init()&#123; phi[1]=f[1]=1; for(int i=2;i&lt;N;i++) &#123; if (!phi[i]) prime[++cnt]=i,phi[i]=i-1; for(int j=1;j&lt;=cnt;j++) &#123; if (i*prime[j]&gt;N) break; if (i%prime[j]==0) &#123; phi[i*prime[j]]=phi[i]*prime[j]; break; &#125; else phi[i*prime[j]]=phi[i]*(prime[j]-1); &#125; &#125; for(LL i=2;i&lt;N;i++) f[i]=i*phi[i]/2*i;&#125;int main()&#123; init(); int T=read(); while (T--) &#123; int n=read(),num=0; LL ans=0; for(int i=1;i*i&lt;=n;i++) if (n%i==0) &#123; w[++num]=i; if (i*i!=n) w[++num]=n/i; &#125; for(int i=1;i&lt;=num;i++) ans+=f[n/w[i]]*w[i]; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P2398 GCD SUM]]></title>
    <url>%2F2018%2F07%2F15%2F%E6%B4%9B%E8%B0%B7P2398-GCD-SUM%2F</url>
    <content type="text"><![CDATA[直接计算复杂度过高无法接受考虑枚举所有gcd值计算若gcd=k对于所有gcd\left ( x,y \right )=1，有gcd\left ( xk,yk \right )=k\left ( xk\leq n,yk\leq n \right )所以gcd=k的个数为 2\sum_{i=1}^{\left \lfloor \frac{n}{k} \right \rfloor}\varphi \left ( i \right )-1复杂度O\left (N \right ) 还有一种更妙的做法设f\left [ k \right ]为gcd=k的个数设g\left [ k \right ]为k|gcd的个数 g\left [ k \right ]=\sum_{i=1}^{\left \lfloor \frac{n}{k} \right \rfloor}f\left [ ik \right ]=\left [ \frac{n}{k} \right ]^{2} f\left [ k \right ]=g\left [ k \right ]-\sum_{i=2}^{\left \lfloor \frac{n}{k} \right \rfloor}f\left [ ik \right ]倒序计算即可复杂度O\left ( NlogN \right )123456789101112131415161718192021222324252627282930313233#include&lt;cstdio&gt;#define LL long longconst int N=100050;int prime[N],cnt=0,phi[N];LL n,sum[N],ans=0;void init()&#123; phi[1]=1; for(int i=2;i&lt;=n;i++) &#123; if (!phi[i]) prime[++cnt]=i,phi[i]=i-1; for(int j=1;j&lt;=cnt;j++) &#123; if (prime[j]*i&gt;n) break; if (i%prime[j]==0) &#123; phi[i*prime[j]]=phi[i]*prime[j]; break; &#125; else phi[i*prime[j]]=phi[i]*(prime[j]-1); &#125; &#125; for(int i=1;i&lt;=n;i++) sum[i]=sum[i-1]+phi[i];&#125;int main()&#123; scanf("%lld",&amp;n); init(); for(LL i=1;i&lt;=n;i++) ans+=(sum[n/i]*2-1)*i; printf("%lld",ans); return 0;&#125; 1234567891011121314151617#include&lt;cstdio&gt;#define LL long longconst int N=100050;LL n,f[N],g[N],ans=0;int main()&#123; scanf("%lld",&amp;n); for(LL i=1;i&lt;=n;i++) g[i]=(n/i)*(n/i); for(LL i=n;i&gt;0;i--) &#123; f[i]=g[i]; for(LL j=2;i*j&lt;=n;j++) f[i]-=f[i*j]; ans+=f[i]*i; &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P2801 教主的魔法]]></title>
    <url>%2F2018%2F07%2F15%2F%E6%B4%9B%E8%B0%B7P2801-%E6%95%99%E4%B8%BB%E7%9A%84%E9%AD%94%E6%B3%95%2F</url>
    <content type="text"><![CDATA[想了好久发现套不了数据结构。然后看了看数据范围用了分块。分成\sqrt{n }个块，块内保持有序对于M 操作，覆盖整块就打标记，否则暴力更新并重新排序对于A 操作，覆盖整块就二分查找，否则暴力查找复杂度O\left ( QlogN \sqrt{N} \right )12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;const int N=1050;int n,m,num,c[N][N],id[N][N],w[N],st[N],ed[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;inline char get()&#123; register char ch=getchar(); while (!(('a'&lt;=ch&amp;&amp;ch&lt;='z')||('A'&lt;=ch&amp;&amp;ch&lt;='Z'))) ch=getchar(); return ch;&#125;void qsort(int k,int l,int r)&#123; int i=l,j=r,mid=c[k][id[k][(l+r)&gt;&gt;1]]; do &#123; while (c[k][id[k][i]]&lt;mid) i++; while (c[k][id[k][j]]&gt;mid) j--; if (i&lt;=j) swap(id[k][i],id[k][j]),i++,j--; &#125; while (i&lt;=j); if (i&lt;r) qsort(k,i,r); if (l&lt;j) qsort(k,l,j); &#125;int find(int k,int x)&#123; int L=1,R=ed[k]-st[k]+1; while (L&lt;R) &#123; int mid=(L+R)&gt;&gt;1; if (c[k][id[k][mid]]+w[k]&lt;x) L=mid+1; else R=mid; &#125; return (L+R)&gt;&gt;1;&#125;int main()&#123; n=read(),m=read(); num=sqrt(n)+1; for(int i=0;i&lt;=num;i++) st[i]=n; for(int i=1,cnt=0;i&lt;=n;i++) &#123; st[i/num]=min(st[i/num],i); ed[i/num]=max(ed[i/num],i); &#125; for(int i=1;i&lt;=n;i++) &#123; c[i/num][i-st[i/num]+1]=read(); id[i/num][i-st[i/num]+1]=i-st[i/num]+1; &#125; for(int i=1;i&lt;=num;i++) qsort(i,1,ed[i]-st[i]+1); for(int i=1;i&lt;=m;i++) &#123; char opt=get(); int ql=read(),qr=read(),x=read(); if (opt=='M') &#123; for(int i=ql;i&lt;=min(qr,ed[ql/num]);i++) c[i/num][i-st[i/num]+1]+=x; for(int i=ql/num+1;i&lt;qr/num;i++) w[i]+=x; if (ql/num!=qr/num) for(int i=st[qr/num];i&lt;=qr;i++) c[i/num][i-st[i/num]+1]+=x; qsort(ql/num,1,ed[ql/num]-st[ql/num]+1); if (ql/num!=qr/num) qsort(qr/num,1,ed[qr/num]-st[qr/num]+1); &#125; else &#123; int ans=0; for(int i=ql;i&lt;=min(qr,ed[ql/num]);i++) if (c[i/num][i-st[i/num]+1]+w[i/num]&gt;=x) ans++; for(int i=ql/num+1;i&lt;qr/num;i++) &#123; if (c[i][id[i][ed[i]-st[i]+1]]+w[i]&lt;x) continue; ans+=(ed[i]-st[i]+1)-find(i,x)+1; &#125; if (ql/num!=qr/num) for(int i=st[qr/num];i&lt;=qr;i++) if (c[i/num][i-st[i/num]+1]+w[i/num]&gt;=x) ans++; printf("%d\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[CQOI2007]余数求和]]></title>
    <url>%2F2018%2F07%2F15%2FCQOI2007-%E4%BD%99%E6%95%B0%E6%B1%82%E5%92%8C%2F</url>
    <content type="text"><![CDATA[k\ mod \ i=k-\left \lfloor \frac{k}{i} \right \rfloor*i \sum_{i=1}^{n}k \ mod \ i=\sum_{i=1}^{n}\left ( k-\left \lfloor \frac{k}{i} \right \rfloor*i \right )=nk-\sum_{i=1}^{n}\left ( \left \lfloor \frac{k}{i} \right \rfloor*i \right )分块求解即可12345678910111213141516171819#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;LL n,k,ans=0;int main()&#123; scanf("%lld%lld",&amp;n,&amp;k); LL sz=sqrt(k); for(LL i=1;k/i&gt;sz;i++) ans-=i*(k/i); for(LL i=sz;i&gt;=1;i--) &#123; LL L=k/(i+1)+1,R=min(n,k/i); ans-=(L+R)*(R-L+1)/2*i; &#125; printf("%lld",ans+n*k); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1108 低价购买]]></title>
    <url>%2F2018%2F07%2F13%2F%E6%B4%9B%E8%B0%B7P1108-%E4%BD%8E%E4%BB%B7%E8%B4%AD%E4%B9%B0%2F</url>
    <content type="text"><![CDATA[dp 数组记录方案数，f 数组记录购买次数 dp\left [ i \right ]=\sum_{j=1}^{i-1}dp\left [ j \right ] \ \ \ \left ( f\left [ j \right ]+1=f\left [ i \right ] ,w\left [ j \right ]]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[TJOI2015]线性代数]]></title>
    <url>%2F2018%2F07%2F13%2FTJOI2015-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%2F</url>
    <content type="text"><![CDATA[首先要看得懂题目同时取A 中的i,j 两点可获得b\left [ i \right ]\left [j \right ]+b\left [ j \right ]\left [i \right ]，但要减去c\left [ i \right ]+c\left [ j \right ]记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧转化成最小割对于B 中每个二元组\left ( i,j \right )，连边edge\left \{ S,\left ( i,j \right ), b\left [ i \right ]\left [j \right ]+b\left [ j \right ]\left [i \right ]\right \}，edge\left \{ \left ( i,j \right ),i, INF\right \}和edge\left \{ \left ( i,j \right ),j, INF\right \}i= j 的情况需要特殊处理对于C 中的第k 个元素，连边edge\left \{ k,T, c\left [ k \right ]\right \} 关于网络流，应该在这里就要暂告一段落了123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=500050,N=1005,INF=1&lt;&lt;25;int n,sum=0,st,ed,w[N][N],c[N];int head[N*N],cnt=0,d[N*N],cur[N*N];struct edge&#123;int to,next,flow,cap;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;int F(int x,int y)&#123;return (x-1)*n+y;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n*n+n+2;i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (e[i].flow&lt;e[i].cap&amp;&amp;!d[to]) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int &amp;i=cur[x];~i&amp;&amp;flow;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret;&#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) &#123; for(int i=1;i&lt;=n*n+n+2;i++) cur[i]=head[i]; ret+=dfs(s,t,INF); &#125; return ret;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) sum+=w[i][j]=read(); for(int i=1;i&lt;=n;i++) c[i]=read(); st=n*n+n+1,ed=st+1; for(int i=1;i&lt;=n*n+n+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) for(int j=i+1;j&lt;=n;j++) &#123; add(st,F(i,j),w[i][j]+w[j][i]); add(F(i,j),st,0); add(F(i,j),n*n+i,INF); add(n*n+i,F(i,j),0); add(F(i,j),n*n+j,INF); add(n*n+j,F(i,j),0); &#125; for(int i=1;i&lt;=n;i++) &#123; add(st,F(i,i),w[i][i]); add(F(i,i),st,0); add(F(i,i),n*n+i,INF); add(n*n+i,F(i,i),0); &#125; for(int i=1;i&lt;=n;i++) &#123; add(n*n+i,ed,c[i]); add(ed,n*n+i,0); &#125; printf("%d\n",sum-Dinic(st,ed)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P3355 骑士共存问题]]></title>
    <url>%2F2018%2F07%2F13%2F%E6%B4%9B%E8%B0%B7P3355-%E9%AA%91%E5%A3%AB%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[和上一题一样的套路最多骑士数=总骑士数-最少拿走的骑士数二染色之后构图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N=205,M=800000,INF=1&lt;&lt;25;const int dx[]=&#123;-2,-2,-1,-1,1,1,2,2&#125;;const int dy[]=&#123;1,-1,2,-2,2,-2,1,-1&#125;;int n,m,st,ed,used[N][N],head[N*N],cnt=0,cur[N*N],d[N*N];struct edge&#123;int to,next,cap,flow;&#125; e[M];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;int F(int x,int y) &#123;return n*(x-1)+y;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap;&#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n*n+2;i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (e[i].flow&lt;e[i].cap&amp;&amp;!d[to]) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int&amp; i=cur[x];~i&amp;&amp;flow;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret;&#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) &#123; for(int i=1;i&lt;=n*n+2;i++) cur[i]=head[i]; ret+=dfs(s,t,INF); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;i++) &#123; int x=read(),y=read(); used[x][y]=1; &#125; st=n*n+1,ed=n*n+2; for(int i=1;i&lt;=n*n+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if (!used[i][j]) &#123; int idx=F(i,j); if ((i+j)&amp;1) &#123; add(st,idx,1),add(idx,st,0); for(int k=0;k&lt;8;k++) &#123; int x=i+dx[k],y=j+dy[k]; if (0&lt;x&amp;&amp;x&lt;=n&amp;&amp;0&lt;y&amp;&amp;y&lt;=n) if (!used[x][y]) &#123; add(idx,F(x,y),INF); add(F(x,y),idx,0); &#125; &#125; &#125; else add(idx,ed,1),add(ed,idx,0); &#125; printf("%d",n*n-m-Dinic(st,ed)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P2774 方格取数问题]]></title>
    <url>%2F2018%2F07%2F13%2F%E6%B4%9B%E8%B0%B7P2774-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最大和=全局和-舍弃和，而舍弃和=最小割=最大流记edge\left \{ u,v,capacity,cost \right \}​为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧将图二染色对于每个黑点u ，连边 edge\left \{ S,u,w\left [ u \right ] \right \}对于每个白点v ，连边edge\left \{ v,T,w\left [ v \right ] \right \}对于每个黑点u ，像周围白点v 连边edge\left \{ u,v,INF \right \}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N=105,M=100000,INF=1&lt;&lt;30;const int dx[]=&#123;0,0,1,-1&#125;;const int dy[]=&#123;1,-1,0,0&#125;;int n,m,st,ed,sum=0,w[N][N];int cnt=0,head[N*N],d[N*N],cur[N*N];struct edge&#123;int to,next,flow,cap;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;int F(int x,int y)&#123;return m*(x-1)+y;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n*m+2;i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (e[i].flow&lt;e[i].cap&amp;&amp;!d[to]) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int &amp;i=cur[x];~i&amp;&amp;flow;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret;&#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) &#123; for(int i=1;i&lt;=n*m+2;i++) cur[i]=head[i]; ret+=dfs(s,t,INF); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) sum+=w[i][j]=read(); st=n*m+1,ed=st+1; for(int i=1;i&lt;=n*m+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) if ((i+j)&amp;1) &#123; add(st,F(i,j),w[i][j]); add(F(i,j),st,0); for(int k=0;k&lt;4;k++) &#123; int x=i+dx[k],y=j+dy[k]; if (0&lt;x&amp;&amp;x&lt;=n&amp;&amp;0&lt;y&amp;&amp;y&lt;=m) &#123; add(F(i,j),F(x,y),INF); add(F(x,y),F(i,j),0); &#125; &#125; &#125; else &#123; add(F(i,j),ed,w[i][j]); add(ed,F(i,j),0); &#125; printf("%d\n",sum-Dinic(st,ed)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P4014 分配问题]]></title>
    <url>%2F2018%2F07%2F13%2F%E6%B4%9B%E8%B0%B7P4014-%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧源点向每件工作连边edge\left \{ S,x,1,0 \right \}按惯例人当做两个用，第k 个人连边edge\left \{ k,k+n,1,0 \right \}，edge\left \{ k+n,T,INF,0 \right \}每件工作x 向第k 个人连边edge\left \{ x,k,1,c\left [ x \right ]\left [ k \right ] \right \}跑一遍MCMF，边权取反再跑一遍123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N=505,M=100000,INF=1&lt;&lt;30;int n,st,ed,w[N][N],cost;int head[N],pre[N],c[N],cnt=0,d[N],inq[N];struct edge&#123;int to,next,cap,flow,cost;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap,int cost)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt].cost=cost; e[cnt++].cap=cap; &#125;int SPFA(int s,int t)&#123; for(int i=1;i&lt;=n*3+2;i++) d[i]=INF,c[i]=0; d[s]=0,c[s]=INF,Q.push(s); while (!Q.empty()) &#123; int x=Q.front(); Q.pop(),inq[x]=0; for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to,cost=e[i].cost; if (e[i].flow&lt;e[i].cap&amp;&amp;d[x]+cost&lt;d[to]) &#123; d[to]=d[x]+cost; c[to]=min(c[x],e[i].cap-e[i].flow); pre[to]=i; if (!inq[to]) Q.push(to),inq[to]=1; &#125; &#125; &#125; return c[t];&#125;void update(int x,int to,int flow)&#123; for(int i=x;i!=to;i=e[pre[i]^1].to) &#123; e[pre[i]].flow+=flow; e[pre[i]^1].flow-=flow; &#125;&#125;int MCMF(int s,int t)&#123; cost=0; int ret=0,new_flow; while (new_flow=SPFA(s,t)) &#123; ret+=new_flow; cost+=new_flow*d[t]; update(t,s,new_flow); &#125; return ret;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) w[i][j]=read(); st=n*3+1,ed=st+1; for(int i=1;i&lt;=n*3+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) add(st,i,1,0),add(i,st,0,0); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) &#123; add(j,i+n,1,w[i][j]); add(i+n,j,0,-w[i][j]); &#125; for(int i=n+1;i&lt;=n*2;i++) add(i,i+n,1,0),add(i+n,i,0,0); for(int i=n*2+1;i&lt;=n*3;i++) add(i,ed,INF,0),add(ed,i,0,0); MCMF(st,ed); printf("%d\n",cost); for(int i=1;i&lt;=n*3+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) add(st,i,1,0),add(i,st,0,0); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) &#123; add(j,i+n,1,-w[i][j]); add(i+n,j,0,w[i][j]); &#125; for(int i=n+1;i&lt;=n*2;i++) add(i,i+n,1,0),add(i+n,i,0,0); for(int i=n*2+1;i&lt;=n*3;i++) add(i,ed,INF,0),add(ed,i,0,0); MCMF(st,ed); printf("%d\n",-cost); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1175 表达式的转换]]></title>
    <url>%2F2018%2F07%2F13%2F%E6%B4%9B%E8%B0%B7P1175-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[优化了一下之前的代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int N=200;char str[N],expr[N];int n,len,idx[N],cnt=0;stack&lt;char&gt; opt;deque&lt;int&gt; num;deque&lt;int&gt;::iterator it;void init()&#123; idx['+']=idx['-']=1; idx['*']=idx['/']=2; idx['^']=3;&#125;void trans()&#123; for(int i=1;i&lt;=len;i++) &#123; if ('0'&lt;=str[i]&amp;&amp;str[i]&lt;='9') expr[++cnt]=str[i]; else &#123; if (!idx[str[i]]) &#123; if (str[i]=='(') opt.push(str[i]); if (str[i]==')') &#123; while (opt.top()!='(') expr[++cnt]=opt.top(),opt.pop(); opt.pop(); &#125; &#125; else &#123; while (!opt.empty()&amp;&amp;idx[opt.top()]&gt;=idx[str[i]]) expr[++cnt]=opt.top(),opt.pop(); opt.push(str[i]); &#125; &#125; &#125; while (!opt.empty()) expr[++cnt]=opt.top(),opt.pop();&#125;void print(int k)&#123; for(it=num.begin();it!=num.end();it++) printf("%d%c",*it,k&gt;cnt?'\n':' '); for(int i=k;i&lt;=cnt;i++) printf("%c%c",expr[i],i==cnt?'\n':' ');&#125;int pow(int a,int b)&#123; int ret=1; while (b) &#123; if (b&amp;1) ret*=a; a*=a,b&gt;&gt;=1; &#125; return ret;&#125;int main()&#123; init(); scanf("%s",str+1); len=strlen(str+1); trans(); print(1); for(int i=1;i&lt;=cnt;i++) &#123; if ('0'&lt;=expr[i]&amp;&amp;expr[i]&lt;='9') num.push_back(expr[i]-'0'); else &#123; int b=num.back();num.pop_back(); int a=num.back();num.pop_back(); switch (expr[i]) &#123; case '+':num.push_back(a+b);break; case '-':num.push_back(a-b);break; case '*':num.push_back(a*b);break; case '/':num.push_back(a/b);break; default:num.push_back(pow(a,b)); &#125; print(i+1); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P4015 运输问题]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%B4%9B%E8%B0%B7P4015-%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧对于每个仓库连边edge\left \{ S,x,u\left [ x \right ],0 \right \}对于每个零售店连边edge\left \{ x+n,T,v\left [ x \right ],0 \right \}仓库i 向零售店j 连边edge\left \{ i,j+n,INF,c\left [ i \right ]\left [ j \right ] \right \}跑一边S 到T 的MCMF，cost为最小运输费用边权取负，再跑一边S 到T 的MCMF，-cost为最大运输费用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=10000,N=205,INF=1&lt;&lt;30;int n,m,st,ed,u[N],v[N],val[N][N];int head[N],cnt=0,pre[N],d[N],c[N],cost=0,inq[N];struct edge&#123;int to,next,flow,cap,cost;&#125; e[M&lt;&lt;2];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap,int cost)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt].cost=cost; e[cnt++].cap=cap; &#125;void update(int x,int to,int flow)&#123; for(int i=x;i!=to;i=e[pre[i]^1].to) &#123; e[pre[i]].flow+=flow; e[pre[i]^1].flow-=flow; &#125; &#125;int SPFA(int s,int t)&#123; for(int i=1;i&lt;=n+m+2;i++) d[i]=INF,c[i]=0; d[s]=0,c[s]=INF,Q.push(s); while (!Q.empty()) &#123; int x=Q.front(); Q.pop(),inq[x]=0; for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to,cost=e[i].cost; if (e[i].flow&lt;e[i].cap&amp;&amp;d[x]+cost&lt;d[to]) &#123; d[to]=d[x]+cost; pre[to]=i; c[to]=min(c[x],e[i].cap-e[i].flow); if (!inq[to]) Q.push(to),inq[to]=1; &#125; &#125; &#125; return c[t];&#125;int MCMF(int s,int t)&#123; cost=0; int ret=0,new_flow; while (new_flow=SPFA(s,t)) &#123; ret+=new_flow; cost+=new_flow*d[t]; update(t,s,new_flow); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); st=n+m+1,ed=st+1; for(int i=1;i&lt;=n+m+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) &#123; u[i]=read(); add(st,i,u[i],0); add(i,st,0,0); &#125; for(int i=1;i&lt;=m;i++) &#123; v[i]=read(); add(i+n,ed,v[i],0); add(ed,i+n,0,0); &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) &#123; val[i][j]=read(); add(i,j+n,INF,val[i][j]); add(j+n,i,0,-val[i][j]); &#125; MCMF(st,ed); printf("%d\n",cost); for(int i=1;i&lt;=n+m+2;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) &#123; add(st,i,u[i],0); add(i,st,0,0); &#125; for(int i=1;i&lt;=m;i++) &#123; add(i+n,ed,v[i],0); add(ed,i+n,0,0); &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) &#123; add(i,j+n,INF,-val[i][j]); add(j+n,i,0,val[i][j]); &#125; MCMF(st,ed); printf("%d",-cost); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P4016 负载平衡问题]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%B4%9B%E8%B0%B7P4016-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[这题的另一种做法（传送门）记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧记ave 为平均值对于每个点x若w\left [ x \right ]-ave>0，则连边edge\left \{ S,x,w\left [ x \right ]-ave,0 \right \}若w\left [ x \right ]-ave]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[HAOI2008]糖果传递]]></title>
    <url>%2F2018%2F07%2F10%2FHAOI2008-%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92%2F</url>
    <content type="text"><![CDATA[环形均分纸牌对于非环形均分纸牌，记s\left [ i \right ]为前i项的和，ave 为平均数可得交换数量为 \sum_{i=1}^{n}\left | \left ( i*ave-s\left [ i \right ] \right ) \right |记S\left [ i \right ]为前i项，每项减去ave 的和则交换数量为 \sum_{i=1}^{n}\left | \left ( S\left [ i \right ] \right ) \right |对于环形均分纸牌，设在第k 个人处断开则S\left [ \right ]为 S\left [ k +1\right ]-S\left [ k \right ],S\left [ k +2\right ]-S\left [ k+1 \right ]...S\left [ n\right ]-S\left [ k \right ],S\left [ 1 \right ]+S\left [ n\right ]-S\left [ k \right ]...S\left [ k \right ]+S\left [ n\right ]-S\left [ k \right ]根据定义可得S\left [ n \right ]=0总交换数量为 \sum_{i=1}^{n}\left | S\left [ i \right ] -S\left [ k \right ]\right |取中位数即可12345678910111213141516171819202122232425262728#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=1000050;int n,w[N];LL sum=0,s[N],ans=0;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) w[i]=read(),sum+=w[i]; int ave=sum/n; for(int i=1;i&lt;=n;i++) w[i]-=ave; for(int i=1;i&lt;=n;i++) s[i]=s[i-1]+w[i]; sort(s+1,s+n+1); for(int i=1;i&lt;=n;i++) ans+=abs(s[i]-s[(n+1)/2]); printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1402 酒店之王]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%B4%9B%E8%B0%B7P1402-%E9%85%92%E5%BA%97%E4%B9%8B%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧源点向每个房间连边edge\left \{ S,x,1 \right \}每道菜向汇点连边edge\left \{ x+n*2+p,T,1 \right \}每个人拆成两个用，x+p 与房间连边，x+p+n 与菜连边当第k 个人喜欢第x 个房间，连边edge\left \{ x,k+p,1 \right \}当第k 个人喜欢第x 道菜，连边edge\left \{ k+n+p,x+n*2+p,1 \right \}跑一边S 到T 的最大流1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int N=405,M=50050,INF=1&lt;&lt;25;int n,p,q,st,ed,head[N],d[N],cnt=0;struct edge&#123;int to,next,flow,cap;&#125; e[M];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n*2+p+q+2;i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (e[i].flow&lt;e[i].cap&amp;&amp;!d[to]) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret;&#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) ret+=dfs(s,t,INF); return ret;&#125;int main()&#123; n=read(),p=read(),q=read(); st=n*2+p+q+1,ed=st+1; for(int i=1;i&lt;=2*n+p+q+2;i++) head[i]=-1; for(int i=1;i&lt;=p;i++) add(st,i,1),add(i,st,0); for(int i=n*2+p+1;i&lt;=n*2+p+q;i++) add(i,ed,1),add(ed,i,0); for(int i=p+1;i&lt;=p+n;i++) add(i,i+n,1),add(i+n,i,0); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=p;j++) &#123; int x=read(); if (!x) continue; add(j,p+i,1); add(p+i,j,0); &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=q;j++) &#123; int x=read(); if (!x) continue; add(p+n+i,n*2+p+j,1); add(n*2+p+j,p+n+i,0); &#125; printf("%d",Dinic(st,ed)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[USACO5.4]奶牛的电信Telecowmunication]]></title>
    <url>%2F2018%2F07%2F10%2FUSACO5-4-%E5%A5%B6%E7%89%9B%E7%9A%84%E7%94%B5%E4%BF%A1Telecowmunication%2F</url>
    <content type="text"><![CDATA[记edge\left \{ u,v,capacity,cost \right \}为一条从u 到v 的，流量为cap 的，费用为cost 的弧与反弧拆点，对于点x，分为x 和x+n 两点，x 负责流入，x+n 负责流出对于每个点连边edge\left \{ x,x+n,1 \right \}对于原图每条连接u,v 的边，连边edge\left \{ u+n,v,INF \right \}，edge\left \{ v+n,u,INF \right \}跑一边s+n 到t 的最大流最大流最小割1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=10000,N=500,INF=1&lt;&lt;25;int n,m,st,ed,head[N],cnt=0,d[N];struct edge&#123;int to,next,flow,cap;&#125; e[M];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=(n&lt;&lt;1);i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (!d[to]&amp;&amp;e[i].flow&lt;e[i].cap) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int i=head[x];~i&amp;&amp;flow;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret; &#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) ret+=dfs(s,t,INF); return ret;&#125;int main()&#123; n=read(),m=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;i++) head[i]=-1; for(int i=1;i&lt;=n;i++) &#123; add(i,i+n,1); add(i+n,i,0); &#125; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); add(u+n,v,INF); add(v,u+n,0); add(v+n,u,INF); add(u,v+n,0); &#125; printf("%d",Dinic(st+n,ed)); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小费用最大流]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81%2F</url>
    <content type="text"><![CDATA[Min_Cost_Max_Flow123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=50050,N=5050,INF=1&lt;&lt;25;int n,m,st,ed,head[N],cnt=0,pre[N],d[N],c[N],cost=0,inq[N];struct edge&#123;int to,next,flow,cap,cost;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap,int cost)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt].cost=cost; e[cnt++].cap=cap; &#125;void update(int x,int to,int flow)&#123; for(int i=x;i!=to;i=e[pre[i]^1].to) &#123; e[pre[i]].flow+=flow; e[pre[i]^1].flow-=flow; &#125; &#125;int SPFA(int s,int t)&#123; for(int i=1;i&lt;=n;i++) d[i]=INF,c[i]=0; d[s]=0,c[s]=INF,Q.push(s); while (!Q.empty()) &#123; int x=Q.front(); Q.pop(),inq[x]=0; for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to,cost=e[i].cost; if (e[i].flow&lt;e[i].cap&amp;&amp;d[x]+cost&lt;d[to]) &#123; d[to]=d[x]+cost; pre[to]=i; c[to]=min(c[x],e[i].cap-e[i].flow); if (!inq[to]) Q.push(to),inq[to]=1; &#125; &#125; &#125; return c[t];&#125;int MCMF(int s,int t)&#123; int ret=0,new_flow; while (new_flow=SPFA(s,t)) &#123; ret+=new_flow; cost+=new_flow*d[t]; update(t,s,new_flow); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;i++) head[i]=-1; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); int cap=read(),cost=read(); add(u,v,cap,cost); add(v,u,0,-cost); &#125; int max_flow=MCMF(st,ed); printf("%d %d",max_flow,cost); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>模板</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ISAP]]></title>
    <url>%2F2018%2F07%2F10%2FISAP%2F</url>
    <content type="text"><![CDATA[ISAP+GAP优化+当前弧优化123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=100050,N=10050,INF=1&lt;&lt;25;int n,m,st,ed,head[N],cnt=0,d[N],num[N],pre[N],cur[N];struct edge&#123;int to,next,flow,cap;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;void bfs(int s)&#123; for(int i=1;i&lt;=n;i++) d[i]=n; d[s]=0,Q.push(s); while (!Q.empty()) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1&lt;d[to]&amp;&amp;e[i^1].cap) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125;&#125;int update(int x,int to)&#123; int ret=INF; for(int i=x;i!=to;i=e[pre[i]^1].to) ret=min(ret,e[pre[i]].cap-e[pre[i]].flow); for(int i=x;i!=to;i=e[pre[i]^1].to) &#123; e[pre[i]].flow+=ret; e[pre[i]^1].flow-=ret; &#125; return ret;&#125;int ISAP(int s,int t)&#123; bfs(t); for(int i=1;i&lt;=n;i++) num[d[i]]++; for(int i=1;i&lt;=n;i++) cur[i]=head[i]; int ret=0,x=s; while (d[s]&lt;=n) &#123; if (x==t) ret+=update(t,s),x=s; int flag=0; for(int i=cur[x];~i;i=e[i].next) &#123; int to=e[i].to; if (d[x]==d[to]+1&amp;&amp;e[i].flow&lt;e[i].cap) &#123; flag=1,cur[x]=i; pre[x=to]=i; break; &#125; &#125; if (!flag) &#123; int idx=n-1; for(int i=head[x];~i;i=e[i].next) if (e[i].flow&lt;e[i].cap) idx=min(idx,d[e[i].to]); if (--num[d[x]]==0) break; num[d[x]=idx+1]++; cur[x]=head[x]; if (x!=s) x=e[pre[x]^1].to; &#125; &#125; return ret;&#125;int main()&#123; n=read(),m=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;i++) head[i]=-1; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); add(u,v,read()); add(v,u,0); &#125; printf("%d",ISAP(st,ed)); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dinic]]></title>
    <url>%2F2018%2F07%2F10%2FDinic%2F</url>
    <content type="text"><![CDATA[比EK快很多的Dinic12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=120050,N=10050,INF=1&lt;&lt;25;int n,m,st,ed,head[N],cnt=0,d[N],cur[N];struct edge&#123;int to,next,flow,cap;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n;i++) d[i]=0; d[s]=1,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (e[i].flow&lt;e[i].cap&amp;&amp;!d[to]) &#123; d[to]=d[x]+1; Q.push(to); &#125; &#125; &#125; return d[t];&#125;int dfs(int x,int t,int flow)&#123; if (!flow||x==t) return flow; int ret=0,new_flow; for(int &amp;i=cur[x];~i&amp;&amp;flow;i=e[i].next) &#123; int to=e[i].to; if (d[x]+1==d[to]) &#123; new_flow=dfs(to,t,min(flow,e[i].cap-e[i].flow)); e[i].flow+=new_flow; e[i^1].flow-=new_flow; ret+=new_flow; flow-=new_flow; &#125; &#125; return ret; &#125;int Dinic(int s,int t)&#123; int ret=0; while (bfs(s,t)) &#123; for(int i=1;i&lt;=n;i++) cur[i]=head[i]; ret+=dfs(s,t,INF); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;i++) head[i]=-1; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); add(u,v,read()); add(v,u,0); &#125; printf("%d",Dinic(st,ed)); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EK]]></title>
    <url>%2F2018%2F07%2F10%2FEK%2F</url>
    <content type="text"><![CDATA[动能算法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;const int M=100050,N=10050,INF=1&lt;&lt;25;int n,m,st,ed,head[N],cnt=0,pre[N],d[N];struct edge&#123;int to,next,flow,cap;&#125; e[M&lt;&lt;1];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void add(int u,int v,int cap)&#123; e[cnt].next=head[u]; head[u]=cnt; e[cnt].to=v; e[cnt++].cap=cap; &#125;void update(int x,int to,int flow)&#123; for(int i=x;i!=to;i=e[pre[i]^1].to) &#123; e[pre[i]].flow+=flow; e[pre[i]^1].flow-=flow; &#125; &#125;int bfs(int s,int t)&#123; while (!Q.empty()) Q.pop(); for(int i=1;i&lt;=n;i++) d[i]=0; d[s]=INF,Q.push(s); while (!Q.empty()&amp;&amp;!d[t]) &#123; int x=Q.front();Q.pop(); for(int i=head[x];~i;i=e[i].next) &#123; int to=e[i].to; if (!d[to]&amp;&amp;e[i].flow&lt;e[i].cap) &#123; pre[to]=i; d[to]=min(d[x],e[i].cap-e[i].flow); Q.push(to); &#125; &#125; &#125; return d[t];&#125;int EK(int s,int t)&#123; int ret=0,new_flow; while (new_flow=bfs(s,t)) &#123; ret+=new_flow; update(t,s,new_flow); &#125; return ret;&#125;int main()&#123; n=read(),m=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;i++) head[i]=-1; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); add(u,v,read()); add(v,u,0); &#125; printf("%d",EK(st,ed)); return 0; &#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[SDOI2009]Elaxia的路线]]></title>
    <url>%2F2018%2F07%2F10%2FSDOI2009-Elaxia%E7%9A%84%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[记E 为Elaxia 的最短路DAG，W 为w 的最短路DAG根据W 重构E 每条边的权值对于连接u，v，权值为val的边当且仅当在W 中d\left [ u \right ]+val= d\left [ v \right ]或d\left [ v \right ]+val= d\left [ u\right ]时，边权为val，否则为0在E 上跑一边最长路得出答案123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;const int N=2000,INF=1&lt;&lt;25;int n,m,st[2],ed[2],d[2][N],inq[N],used[N],dp[N];vector&lt;int&gt; f[N],g[N],w[2][N],e[2][N],c[N];queue&lt;int&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;void SPFA(int s,int k)&#123; for(int i=1;i&lt;=n;i++) d[k][i]=INF,inq[i]=0; d[k][s]=0,inq[s]=1,Q.push(s); while (!Q.empty()) &#123; int x=Q.front(); Q.pop(),inq[x]=0; for(int i=0;i&lt;f[x].size();i++) &#123; int to=f[x][i],val=g[x][i]; if (d[k][x]+val==d[k][to]) e[k][to].push_back(x),w[k][to].push_back(val); if (d[k][x]+val&lt;d[k][to]) &#123; e[k][to].clear(); e[k][to].push_back(x); w[k][to].clear(); w[k][to].push_back(val); d[k][to]=d[k][x]+val; if (!inq[to]) Q.push(to),inq[to]=1; &#125; &#125; &#125;&#125;void add(int u,int v,int val)&#123; g[u].push_back(val); f[u].push_back(v);&#125;void dfs(int o,int x)&#123; if (used[o]) return; used[o]=1; if (o==x) return; for(int i=0;i&lt;e[1][o].size();i++) dfs(e[1][o][i],x); &#125;int calc(int o,int x)&#123; if (dp[o]!=-1) return dp[o]; if (o==x) return dp[o]=0; for(int i=0;i&lt;e[0][o].size();i++) dp[o]=max(dp[o],calc(e[0][o][i],x)+c[o][i]); return dp[o]; &#125;int main()&#123; n=read(),m=read(); for(int i=0;i&lt;2;i++) st[i]=read(),ed[i]=read(); for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(),val=read(); add(u,v,val),add(v,u,val); &#125; for(int i=0;i&lt;2;i++) SPFA(st[i],i); dfs(ed[1],st[1]); for(int i=1;i&lt;=n;i++) if (!used[i]) d[1][i]=INF; for(int u=1;u&lt;=n;u++) for(int i=0;i&lt;e[0][u].size();i++) &#123; int v=e[0][u][i],f=0; if (d[1][u]+w[0][u][i]==d[1][v]) f++; if (d[1][v]+w[0][u][i]==d[1][u]) f++; c[u].push_back(f*w[0][u][i]); &#125; for(int i=1;i&lt;=n;i++) dp[i]=-1; printf("%d",calc(ed[0],st[0])); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1384 幸运数与排列]]></title>
    <url>%2F2018%2F07%2F10%2F%E6%B4%9B%E8%B0%B7P1384-%E5%B9%B8%E8%BF%90%E6%95%B0%E4%B8%8E%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[观察到k\leq 10^{9}< 13!对于过大的n，至多只有最后13位会变对于会变得位置求Cantor展开，然后直接计算123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#define LL long longusing namespace std;const int N=15;int n,m,w[N],used[N],ans=0,tot;LL fact[N]=&#123;1&#125;;int get(int k)&#123; for(int i=1,num=0;i&lt;=tot;i++) &#123; if (!used[i]) num++; if (num==k) return i; &#125; &#125;int work(int x)&#123; if (!x) return 0; for(;x;x/=10) if (x%10!=7&amp;&amp;x%10!=4) return 0; return 1;&#125;void check()&#123; LL num=1; for(int i=1;i&lt;=n;i++) &#123; num*=i; if (num&gt;=m) return; &#125; puts("-1"),exit(0);&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); check(); for(int i=1;i&lt;N;i++) fact[i]=fact[i-1]*i; for(int i=0;i&lt;N;i++) if (fact[i]&gt;=m) &#123;tot=i;break;&#125; m--; for(int i=tot;i&gt;0;i--) &#123; w[tot-i+1]=get(m/fact[i-1]+1)+n-tot; used[w[tot-i+1]-n+tot]=1,m%=fact[i-1]; &#125; for(int len=1;len&lt;N;len++) for(int i=0;i&lt;(1&lt;&lt;len);i++) &#123; LL num=0; for(int j=1;j&lt;=len;j++) num=num*10+((i&gt;&gt;(j-1))&amp;1?7:4); if (num&gt;n) continue; ans+=work(num+tot&lt;=n?num:w[num-n+tot]); &#125; printf("%d",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乘法逆元]]></title>
    <url>%2F2018%2F07%2F10%2F%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%2F</url>
    <content type="text"><![CDATA[若ax\equiv 1\left ( mod \ p \right )，则称x，a 互为mod p 意义下的逆元 扩展欧几里得算法 ax\equiv 1\left ( mod \ p \right )\Leftrightarrow ax+py=1若gcd\left ( a,p \right )\neq 1则无解 123456void exgcd(LL a,LL b,LL &amp;x,LL &amp;y)&#123; if (!b) &#123;x=1,y=0;return;&#125; exgcd(b,a%b,y,x); y-=a/b*x; &#125; 费马小定理若p 为质数，则a^{p}\equiv a\left ( mod \ p \right ) x\equiv a^{p-2}\left ( mod \ p \right ) 欧拉定理若gcd\left ( a,p \right )=1，则a^{\varphi\left ( p \right )}\equiv 1\left ( mod \ p \right ) x\equiv a^{\varphi\left ( p \right )-1}\left ( mod \ p \right ) 线性递推设p=k*i+r，其中\left ( r]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP模拟]沙僧]]></title>
    <url>%2F2018%2F07%2F06%2FNOIP%E6%A8%A1%E6%8B%9F-%E6%B2%99%E5%83%A7%2F</url>
    <content type="text"><![CDATA[题目描述给出一个n个点的树，其中1为根节点有m次操作，每次给以a为节点的子树中深度为d的节点+v 用一个桶cnt\left [ d \right ]记录深度为d 的节点要加的值，一遍dfs即可12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;cstdio&gt;#include&lt;vector&gt;#define LL long longusing namespace std;const int N=100050,rt=1;int n,m,dep[N];vector&lt;int&gt; e[N],f[N],g[N];LL w[N],cnt[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void dfs(int o)&#123; w[o]+=cnt[dep[o]]; for(int i=0;i&lt;f[o].size();i++) if (f[o][i]==0) w[o]+=g[o][i]; for(int i=0;i&lt;f[o].size();i++) cnt[f[o][i]+dep[o]]+=g[o][i]; for(int i=0;i&lt;e[o].size();i++) if (!dep[e[o][i]]) dep[e[o][i]]=dep[o]+1,dfs(e[o][i]); for(int i=0;i&lt;f[o].size();i++) cnt[f[o][i]+dep[o]]-=g[o][i];&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;i++) &#123; int u=read(),v=read(); e[u].push_back(v); e[v].push_back(u); &#125; for(int i=1;i&lt;=m;i++) &#123; int x=read(),d=read(),val=read(); f[x].push_back(d); g[x].push_back(val); &#125; dep[rt]=1,dfs(rt); for(int i=1;i&lt;=n;i++) printf("%lld ",w[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>桶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP模拟]八戒]]></title>
    <url>%2F2018%2F07%2F06%2FNOIP%E6%A8%A1%E6%8B%9F-%E5%85%AB%E6%88%92%2F</url>
    <content type="text"><![CDATA[题目描述给出n个点，m条边每个点有一个权值w，和衰减速度v，每走1单位的路衰减v保证最优取法所有点权值均大于0 用dp\left [i \right ]\left [ s \right ]记录最小衰减值，其中i 为当前点位置，s 为当前状态 dp\left [ j\right ]\left [{s}' \right ] =min\left \{ dp\left [ i\right ]\left [ s\right ] +d\left [ i,j \right ]*\omega \left [ \sim s \right ]\right \}\left ( i\in s,j\notin s \right )其中d\left [ i \right ]\left [ j\right ]为i 到j 的距离，可以用Floyd 处理12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=22,INF=1&lt;&lt;20;int d[N][N],dp[N][1&lt;&lt;N],w[N],rec[1&lt;&lt;N],c[N],n,m,sum;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void floyd()&#123; for(int k=1;k&lt;=n;k++) for(int i=1;i&lt;=n;i++) if (i!=k) for(int j=1;j&lt;=n;j++) if (k!=j&amp;&amp;i!=j) d[i][j]=min(d[i][j],d[i][k]+d[k][j]); &#125;int main()&#123; int T=read(); while (T--) &#123; n=read(),m=read(),sum=0; for(int i=1;i&lt;=n;i++) w[i]=read(),c[i]=read(); for(int i=1;i&lt;=n;i++) sum+=w[i]; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if (i!=j) d[i][j]=INF; for(int i=1;i&lt;=m;i++) &#123; int u=read(),v=read(); d[u][v]=d[v][u]=min(d[u][v],read()); &#125; for(int i=1;i&lt;=n;i++) for(int s=0;s&lt;(1&lt;&lt;n);s++) dp[i][s]=INF; for(int s=0;s&lt;(1&lt;&lt;n);s++) rec[s]=0; for(int s=0;s&lt;(1&lt;&lt;n);s++) for(int i=1;i&lt;=n;i++) if ((s&gt;&gt;(i-1))&amp;1) rec[s]+=c[i]; floyd(),dp[1][1]=0; for(int s=0;s&lt;(1&lt;&lt;n);s++) for(int i=1;i&lt;=n;i++) if ((s&gt;&gt;(i-1))&amp;1&amp;&amp;dp[i][s]&lt;sum) for(int j=1;j&lt;=n;j++) if (!((s&gt;&gt;(j-1))&amp;1)) dp[j][s|(1&lt;&lt;(j-1))]=min(dp[j][s|(1&lt;&lt;(j-1))],dp[i][s]+rec[(1&lt;&lt;n)-1-s]*d[i][j]); int ans=-INF; for(int i=1;i&lt;=n;i++) ans=max(ans,sum-dp[i][(1&lt;&lt;n)-1]); printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP模拟]悟空]]></title>
    <url>%2F2018%2F07%2F06%2FNOIP%E6%A8%A1%E6%8B%9F-%E6%82%9F%E7%A9%BA%2F</url>
    <content type="text"><![CDATA[题目描述给出一个n*m的矩阵，矩阵中有A和Q两种字符求有多少个子矩阵，矩阵的四个角选出三个能构成QAQ 记A为1，Q为0，当且仅当矩阵四个角和为1或2满足条件剩下的做法和之前的洛谷P3941 入阵曲（传送门）差不多1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;cstdio&gt;#define LL long longconst int N=505;int w[N][N],c[N],cnt[N],n,m;LL ans=0;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;inline char get()&#123; register char ch=getchar(); while (!(('a'&lt;=ch&amp;&amp;ch&lt;='z')||('A'&lt;=ch&amp;&amp;ch&lt;='Z'))) ch=getchar(); return ch;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) &#123; char opt=get(); w[i][j]=opt=='A'?1:0; &#125; for(int i=1;i&lt;=m;++i) for(int j=i+1;j&lt;=m;++j) &#123; for(int k=0;k&lt;=4;k++) cnt[k]=0; for(int k=1;k&lt;=n;++k) &#123; c[k]=w[k][i]+w[k][j]; ans+=cnt[2-c[k]]; if (c[k]&lt;=1) ans+=cnt[1-c[k]]; cnt[c[k]]++; &#125; &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP模拟]奇怪的队列]]></title>
    <url>%2F2018%2F07%2F06%2FNOIP%E6%A8%A1%E6%8B%9F-%E5%A5%87%E6%80%AA%E7%9A%84%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[题目描述nodgd的粉丝太多了，每天都会有很多人排队要签名。今天有n个人排队，每个人的身高都是一个整数，且互不相同。很不巧，nodgd今天去忙别的事情去了，就只好让这些粉丝们明天再来。同时nodgd提出了一个要求，每个人都要记住自己前面与多少个比自己高的人，以便于明天恢复到今天的顺序。但是，粉丝们或多或少都是有些失望的，失望使她们晕头转向、神魂颠倒，已经分不清楚哪一边是“前面”了，于是她们可能是记住了前面比自己高的人的个数，也可能是记住了后面比自己高的人的个数，而且他们不知道自己记住的是哪一个方向。nodgd觉得，即使这样明天也能恢复出一个排队顺序，使得任意一个人的两个方向中至少有一个方向上的比他高的人数和他记住的数字相同。可惜n比较大，显然需要写个程序来解决，nodgd很忙，写程序这种事情就交给你了。 从小到大考虑每个人，对于每个人贪心地考虑位置用线段树维护，支持求排名和单点修改12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int N=100050,INF=N&lt;&lt;2;struct node &#123;int val,w;&#125; t[N];int n,c[N],sz[N&lt;&lt;2];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void build (int o,int l,int r)&#123; if (l==r) &#123;sz[o]=1;return;&#125; int mid=(l+r)&gt;&gt;1; build(o&lt;&lt;1,l,mid); build(o&lt;&lt;1|1,mid+1,r); sz[o]=sz[o&lt;&lt;1]+sz[o&lt;&lt;1|1];&#125;void add(int o,int l,int r,int k,int x)&#123; if (l==r) &#123;sz[o]+=x;return;&#125; int mid=(l+r)&gt;&gt;1; if (k&lt;=mid) add(o&lt;&lt;1,l,mid,k,x); else add(o&lt;&lt;1|1,mid+1,r,k,x); sz[o]=sz[o&lt;&lt;1]+sz[o&lt;&lt;1|1];&#125;int ask_pre(int o,int l,int r,int k)&#123; if (l==r) return r; int mid=(l+r)&gt;&gt;1; if (sz[o&lt;&lt;1]&gt;=k) return ask_pre(o&lt;&lt;1,l,mid,k); else return ask_pre(o&lt;&lt;1|1,mid+1,r,k-sz[o&lt;&lt;1]);&#125;int ask_nxt(int o,int l,int r,int k)&#123; if (l==r) return r; int mid=(l+r)&gt;&gt;1; if (sz[o&lt;&lt;1|1]&gt;=k) return ask_nxt(o&lt;&lt;1|1,mid+1,r,k); else return ask_nxt(o&lt;&lt;1,l,mid,k-sz[o&lt;&lt;1|1]);&#125;bool cmp(node a,node b) &#123;return a.val&lt;b.val;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;i++) t[i].val=read(),t[i].w=read(); sort(t+1,t+n+1,cmp); build(1,1,n); for(int i=1;i&lt;=n;i++) &#123; int pos=INF; if (sz[1]&lt;=t[i].w) &#123;puts("impossible");return 0;&#125; pos=min(pos,ask_pre(1,1,n,t[i].w+1)); pos=min(pos,ask_nxt(1,1,n,t[i].w+1)); c[pos]=t[i].val; add(1,1,n,pos,-1); &#125; for(int i=1;i&lt;=n;i++) printf("%d ",c[i]); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP模拟]拆网线]]></title>
    <url>%2F2018%2F07%2F06%2FNOIP2017%E6%A8%A1%E6%8B%9F-%E6%8B%86%E7%BD%91%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[题目描述企鹅国的网吧们之间由网线互相连接，形成一棵树的结构。现在由于冬天到了，供暖部门缺少燃料，于是他们决定去拆一些网线来做燃料。但是现在有 K 只企鹅要上网和别人联机游戏，所以他们需要把这 K 只企鹅安排到不同的机房（两只企鹅在同一个机房会吵架），然后拆掉一些网线，但是需要保证每只企鹅至少还能通过留下来的网线和至少另一只企鹅联机游戏。所以他们想知道，最少需要保留多少根网线？ 从叶子节点往上贪心1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;vector&gt;using namespace std;const int N=100050;vector&lt;int&gt; e[N];queue&lt;int&gt; Q;int used[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void dfs(int o,int fa)&#123; for(int i=0;i&lt;e[o].size();i++) &#123; int to=e[o][i]; if (to==fa) continue; dfs(to,o); &#125; Q.push(o);&#125;int main()&#123; int T=read(); while (T--) &#123; int n=read(),k=read(),ans=0; for(int i=1;i&lt;=n;i++) e[i].clear(),used[i]=0; for(int i=1;i&lt;n;i++) &#123; int u=read(),v=i+1; e[u].push_back(v); e[v].push_back(u); &#125; while (!Q.empty()) Q.pop(); dfs(1,0); while (!Q.empty()&amp;&amp;k&gt;1) &#123; int x=Q.front();Q.pop(); if (used[x]) continue; for(int i=0;i&lt;e[x].size();i++) &#123; int to=e[x][i]; if (used[to]) continue; used[x]=used[to]=1; ans++,k-=2; break; &#125; &#125; printf("%d\n",ans+k); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P3941 入阵曲]]></title>
    <url>%2F2018%2F07%2F06%2F%E6%B4%9B%E8%B0%B7P3941-%E5%85%A5%E9%98%B5%E6%9B%B2%2F</url>
    <content type="text"><![CDATA[用sum\left [ i \right ]\left [ j \right ]，记录第i 行，前j 个的和枚举i ,j 两列\left ( i]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P2568 GCD]]></title>
    <url>%2F2018%2F07%2F06%2F%E6%B4%9B%E8%B0%B7P2568-GCD%2F</url>
    <content type="text"><![CDATA[对于一组gcd(x,y)=1，若有一个质数p，则gcd(xp,yp)=p枚举所有的p，求所有xp]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[ZJOI2005]九数码游戏]]></title>
    <url>%2F2018%2F07%2F06%2FZJOI2005-%E4%B9%9D%E6%95%B0%E7%A0%81%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[直接搜索加剪枝剪枝可以考虑Cantor展开，也可以直接用map12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;cstdio&gt;#include&lt;map&gt;#include&lt;queue&gt;#define LL long longusing namespace std;const int N=5,ed=12345678;struct node &#123;LL s;int k;&#125;;map&lt;LL,LL&gt; M;int ans=-1,w[N&lt;&lt;2];queue&lt;node&gt; Q;LL modify(LL s,int f)&#123; for(int i=9;i&gt;0;i--) w[i]=s%10,s/=10; if (f) &#123; int num=w[6];LL ret=0; w[6]=w[5],w[5]=w[4],w[4]=num; for(int i=1;i&lt;=9;i++) ret=ret*10+w[i]; return ret; &#125; else &#123; int num=w[1];LL ret=0; w[1]=w[4],w[4]=w[7],w[7]=w[8]; w[8]=w[9],w[9]=w[6],w[6]=w[3]; w[3]=w[2],w[2]=num; for(int i=1;i&lt;=9;i++) ret=ret*10+w[i]; return ret; &#125; &#125;void bfs(LL st)&#123; M[st]=0,Q.push((node)&#123;st,0&#125;); while (!Q.empty()) &#123; node x=Q.front();Q.pop(); if (x.s==ed) &#123;ans=x.k;return;&#125; LL nxt=modify(x.s,0); if (M.find(nxt)==M.end()) &#123; M[nxt]=x.s; Q.push((node)&#123;nxt,x.k+1&#125;); &#125; nxt=modify(x.s,1); if (M.find(nxt)==M.end()) &#123; M[nxt]=x.s; Q.push((node)&#123;nxt,x.k+1&#125;); &#125; &#125;&#125;void dfs(LL s)&#123; if (!s) return; dfs(M[s]); for(int i=9;i&gt;0;i--) w[i]=s%10,s/=10; for(int i=1;i&lt;=9;i++) printf("%d%c",w[i],i%3?' ':'\n'); printf("\n");&#125;int main()&#123; LL num=0; for(int i=1;i&lt;=9;i++) &#123; int x; scanf("%d",&amp;x); num=num*10+x; &#125; bfs(num); if (ans==-1) &#123;puts("UNSOLVABLE");return 0;&#125; printf("%d\n",ans),dfs(ed); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1484 种树]]></title>
    <url>%2F2018%2F07%2F06%2F%E6%B4%9B%E8%B0%B7P1484-%E7%A7%8D%E6%A0%91%2F</url>
    <content type="text"><![CDATA[神奇的贪心 对于a_{i}，若最终答案不包含a_{i}，则一定包含a_{i-1}+a_{i+1}因此每次取a_{i}时，加入a_{i-1}+a_{i+1}-a_{i}，允许撤销操作123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=500050;int n,m,w[N],L[N],R[N],used[N];struct node &#123;LL val;int id;&#125;;struct cmp &#123;bool operator ()(node a,node b) &#123;return a.val&lt;b.val;&#125;&#125;;priority_queue&lt;node,vector&lt;node&gt;,cmp&gt; Q;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;i++) w[i]=read(),Q.push((node)&#123;w[i],i&#125;); for(int i=1;i&lt;=n;i++) L[i]=i-1,R[i]=i+1; R[0]=1,L[n+1]=n;LL ans=0; while (m--) &#123; while (used[Q.top().id]) Q.pop(); int k=Q.top().id; used[L[k]]=used[R[k]]=1; if (Q.top().val&lt;=0) break; ans=ans+Q.top().val,Q.pop(); Q.push((node)&#123;w[k]=w[L[k]]+w[R[k]]-w[k],k&#125;); L[k]=L[L[k]],R[L[k]]=k; R[k]=R[R[k]],L[R[k]]=k; &#125; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nim游戏]]></title>
    <url>%2F2018%2F07%2F06%2FNIM%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[当且仅当\left ( a_{1} \right ) xor\left ( a_{2}\right ) ...\left ( a_{n} \right )=0为一个P 最终状态为0 对于一个\left ( a_{1} \right ) xor\left ( a_{2}\right ) ...\left ( a_{n} \right )=k\left ( k>0 \right ) 的状态，必存在一个a_{i}>k，使得下一步\left ( a_{1} \right ) xor\left ( a_{2}\right ) ...\left ( a_{n} \right )=0 对于一个\left ( a_{1} \right ) xor\left ( a_{2}\right ) ...\left ( a_{n} \right )=0，不存在一种方案使得下一步\left ( a_{1} \right ) xor\left ( a_{2}\right ) ...\left ( a_{n} \right )=k\left ( k>0 \right )]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[BZOJ2719]银河之星]]></title>
    <url>%2F2018%2F07%2F05%2FBZOJ2719-%E9%93%B6%E6%B2%B3%E4%B9%8B%E6%98%9F%2F</url>
    <content type="text"><![CDATA[通过观察可以发现点在%3意义下相同直接暴力搜索加剪枝但是要注意棋盘大小，棋盘小有些点跳不过去。代码没有考虑棋盘大小，有部分点会WA1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;cstdio&gt;#include&lt;set&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=15;int K,n,m,xx,yy,x[N],y[N],used[N],f,w[N],cnt=0;set&lt;LL&gt; S;int F(int x,int y) &#123;return x*3+y+1;&#125;void dfs(int k)&#123; if (f) return; if (k==1) &#123; for(int i=1;i&lt;=K;i++) if (!used[i]) f=xx==x[i]&amp;&amp;yy==y[i]; return; &#125; cnt=0;LL num=0; for(int i=1;i&lt;=K;i++) if (!used[i]) w[++cnt]=F(x[i],y[i]); sort(w+1,w+cnt+1); for(int i=1;i&lt;=cnt;i++) num=num*10+w[i]; if (!S.empty()&amp;&amp;S.find(num)!=S.end()) return; S.insert(num); for(int i=1;i&lt;=K;i++) if (!used[i]) for(int j=1;j&lt;=K;j++) if (!used[j]&amp;&amp;i!=j) if (!(xx==x[i]&amp;&amp;yy==y[i])) &#123; int u=x[i],v=y[i]; used[j]=1; x[i]=x[i]==x[j]?x[i]:3-x[i]-x[j]; y[i]=y[i]==y[j]?y[i]:3-y[i]-y[j]; dfs(k-1); used[j]=0; x[i]=u,y[i]=v; &#125;&#125;int main()&#123; while (scanf("%d%d%d%d%d",&amp;K,&amp;n,&amp;m,&amp;xx,&amp;yy)!=EOF) &#123; xx%=3,yy%=3;S.clear(); for(int i=1;i&lt;=K;i++) scanf("%d%d",&amp;x[i],&amp;y[i]); for(int i=1;i&lt;=K;i++) x[i]%=3,y[i]%=3; for(int i=1;i&lt;=K;i++) used[i]=0; f=0,dfs(K); printf("%s\n",f?"Yes":"No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[藏妹子之处]]></title>
    <url>%2F2018%2F07%2F05%2F%E8%97%8F%E5%A6%B9%E5%AD%90%E4%B9%8B%E5%A4%84%2F</url>
    <content type="text"><![CDATA[首先要有个妹子 问题描述：今天CZY又找到了三个妹子，有着收藏爱好的他想要找三个地方将妹子们藏起来，将一片空地抽象成一个R行C列的表格，CZY要选出3个单元格。但要满足如下的两个条件：（1）任意两个单元格都不在同一行。（2）任意两个单元格都不在同一列。选取格子存在一个花费，而这个花费是三个格子两两之间曼哈顿距离的和（如(x1,y1)和(x,y2)的曼哈顿距离为|x1-x2|+|y1-y2|）。狗狗想知道的是，花费在minT到maxT之间的方案数有多少。答案模1000000007。所谓的两种不同方案是指：只要它选中的单元格有一个不同，就认为是不同的方案。 通过观察，不难发现在一个R*C的矩阵中，所有最大的三个单元格曼哈顿距离相等，均为2(R+C)-4通过简单地分析可以得出，在R*C的矩阵中，共有6（R-2)(C-2)组最大的三个单元格代码就很简单了123456789101112131415#include&lt;cstdio&gt;#define LL long longconst int mod=1000000007;int r,c,mins,maxs;LL ans=0;int main()&#123; scanf("%d%d%d%d",&amp;r,&amp;c,&amp;mins,&amp;maxs); for(int i=2;i&lt;r;i++) for(int j=2;j&lt;c;j++) if (i*2+j*2&lt;=maxs&amp;&amp;i*2+j*2&gt;=mins) ans=(ans+6LL*(r-i)*(c-j)*(i-1)*(j-1))%mod; printf("%d",ans); return 0;&#125; 临山依水 景看旧 而你美胜 山水万筹]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[SCOI2005]互不侵犯]]></title>
    <url>%2F2018%2F07%2F05%2FSCOI2005-%E4%BA%92%E4%B8%8D%E4%BE%B5%E7%8A%AF%2F</url>
    <content type="text"><![CDATA[预处理一行所有可能的情况用dp\left [d \right ]\left [ i\right ]\left [ k \right ]数组记录第d行，当前状态为s\left [ i \right ]，总共放置k个的方案数复杂度O\left ( nk4^{n} \right )1234567891011121314151617181920212223242526#include&lt;cstdio&gt;#define LL long longconst int N=10;int n,m,s[1&lt;&lt;N],w[1&lt;&lt;N],c[1&lt;&lt;N][1&lt;&lt;N],cnt=0;LL dp[N][N&lt;&lt;2][1&lt;&lt;N],ans=0;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;(1&lt;&lt;n);i++) if (!(i&amp;(i&lt;&lt;1))&amp;&amp;!(i&amp;(i&gt;&gt;1))) s[++cnt]=i; for(int i=1;i&lt;=cnt;i++) for(int k=1;k&lt;=n;k++) if (s[i]&amp;(1&lt;&lt;(k-1))) w[i]++; for(int i=1;i&lt;=cnt;i++) for(int j=1;j&lt;=cnt;j++) if (!(s[i]&amp;s[j])) if (!(s[i]&amp;(s[j]&lt;&lt;1))&amp;&amp;!(s[i]&amp;(s[j]&gt;&gt;1))) c[i][j]=1; for(int i=1;i&lt;=cnt;i++) dp[1][w[i]][i]=1; for(int d=2;d&lt;=n;d++) for(int i=1;i&lt;=cnt;i++) for(int j=1;j&lt;=cnt;j++) if (c[i][j]) for(int k=w[i];k&lt;=m-w[j];k++) dp[d][k+w[j]][j]+=dp[d-1][k][i]; for(int i=1;i&lt;=cnt;i++) ans+=dp[n][m][i]; printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1429 平面最近点对]]></title>
    <url>%2F2018%2F07%2F05%2F%E6%B4%9B%E8%B0%B7P1429-%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9%2F</url>
    <content type="text"><![CDATA[裸的二分，复杂度O\left ( nlog^{2}n \right )1234567891011121314151617181920212223242526272829303132333435#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;const int N=200050,INF=1&lt;&lt;30;struct dot &#123;double x,y;&#125; t[N];vector&lt;int&gt; w;bool cmp(dot a,dot b) &#123;return a.x==b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;bool check(int a,int b) &#123;return t[a].y&lt;t[b].y;&#125;double sqr(double x) &#123;return x*x;&#125;double dist(dot a,dot b) &#123;return sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));&#125;double calc(int l,int r)&#123; double ret=INF; if (l==r) return ret; int mid=(l+r)&gt;&gt;1; ret=min(ret,min(calc(l,mid),calc(mid+1,r))); w.clear(); for(int i=l;i&lt;=r;i++) if (fabs(t[i].x-t[mid].x)&lt;ret) w.push_back(i); sort(w.begin(),w.end(),check); for(int i=0;i&lt;w.size();i++) for(int j=i+1;j&lt;w.size()&amp;&amp;fabs(t[w[i]].y-t[w[j]].y)&lt;ret;j++) ret=min(ret,dist(t[w[i]],t[w[j]])); return ret; &#125;int main()&#123; int n;scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++) scanf("%lf%lf",&amp;t[i].x,&amp;t[i].y); sort(t+1,t+n+1,cmp); printf("%.4lf",calc(1,n)); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P3933 Chtholly Nota Seniorious]]></title>
    <url>%2F2018%2F07%2F05%2F%E6%B4%9B%E8%B0%B7P3933-Chtholly-Nota-Seniorious%2F</url>
    <content type="text"><![CDATA[神奇的二分答案题 根据题目奇奇怪怪的限制，不难发现选择的行和列要连续为了方便计算，将矩阵转置四次，每次只需考虑行要连续二分一下ans进行检验对于矩阵中的mins和maxs，显然二者不能分在一起根据mins，maxs和二分出来的ans，贪心地确定每个值所在的分组，若不连续则不合法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N=2050,INF=1&lt;&lt;30;int n,m,now,w[2][N][N],ans,mins=INF,maxs=-INF;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void rotate()&#123; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) w[now^1][j][n-i+1]=w[now][i][j]; swap(n,m),now^=1;&#125;bool check(int k)&#123; int num=0; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=m;j++) if (maxs-w[now][i][j]&gt;k) num=max(num,j); for(int j=1;j&lt;=num;j++) if (w[now][i][j]-mins&gt;k) return 0; &#125; return 1;&#125;void solve()&#123; int L=0,R=ans; while (L&lt;R) &#123; int mid=(L+R)&gt;&gt;1; if (check(mid)) R=mid; else L=mid+1; &#125; ans=R;&#125;int main()&#123; n=read(),m=read(),now=0; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) &#123; w[0][i][j]=read(); maxs=max(maxs,w[0][i][j]); mins=min(mins,w[0][i][j]); &#125; ans=maxs-mins; rotate(),solve(); rotate(),solve(); rotate(),solve(); rotate(),solve(); printf("%d",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最大化平均值]]></title>
    <url>%2F2018%2F07%2F05%2Fmax-ave%2F</url>
    <content type="text"><![CDATA[问题描述：有n个物品的重量和价值分别是 wi 和 vi。从中选出k个物品使得单位重量的价值最大。 根据定义 \sum_{i=1}^{k}v_{i}=x\sum_{i=1}^{k}w_{i}即 \sum_{i=1}^{k}\left (v _{i}-xw_{i} \right )=0二分一下x，每次在\left (v _{i}-xw_{i} \right )贪心地找前k大的复杂度O\left ( nlog^{2}n \right )123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int N=10050;const double eps=1e-5;int n,m,w[N],v[N];double c[N];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;bool check(double k)&#123; for(int i=1;i&lt;=n;i++) c[i]=v[i]-k*w[i]; sort(c+1,c+n+1); double ret=0; for(int i=n;i&gt;n-m;i--) ret+=c[i]; return ret&gt;-eps;&#125;int main()&#123; n=read(),m=read(); double L=0,R; for(int i=1;i&lt;=n;i++) w[i]=read(); for(int i=1;i&lt;=n;i++) v[i]=read(),R=max((double)v[i],R); while (R-L&gt;eps) &#123; double mid=(L+R)/2; if (check(mid)) L=mid; else R=mid; &#125; printf("%.2lf",R); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP2017]列队]]></title>
    <url>%2F2018%2F06%2F28%2FNOIP2017-%E5%88%97%E9%98%9F%2F</url>
    <content type="text"><![CDATA[感觉是至今为止做到的最难的数据结构题什么分块，嵌套，可持久化都没有这题给人的第一感觉难这题每个数据开一个点都开不下。考场上见到这题基本上一脸懵逼，想了很久写了个O\left ( q^{2}\right )但是不能优化的算法，结果没开LL只有30分用线段树维护每一行和最后一列，支持单点rank和insert两种操作最大长度为max\left ( n,m \right )+q动态开点减少内存，空间复杂度O\left ( 4qlog\left ( max\left ( n,m \right )+q\right ) \right )12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=300050;struct node &#123;int l,r,sz,id;bool f;&#125; t[N*60];int n,m,T,cnt=0,idx=0,rt[N],sz[N],pos,u,v;LL w[N&lt;&lt;2];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while (ch!='-'&amp;&amp;(ch&lt;'0'||ch&gt;'9')) ch=getchar(); if (ch=='-') t=-1,ch=getchar(); while (ch&gt;='0'&amp;&amp;ch&lt;='9') x=x*10+ch-48,ch=getchar(); return x*t;&#125;void build(int &amp;o,int l,int r,int f)&#123; o=++cnt; if (l==r) &#123; t[o].sz=(!f&amp;&amp;r&lt;m)||(f&amp;&amp;r&lt;=n); return; &#125; int mid=(l+r)&gt;&gt;1; build(t[o].l,l,mid,f); build(t[o].r,mid+1,r,f); t[o].sz=t[t[o].l].sz+t[t[o].r].sz;&#125;LL ask(int &amp;o,int pre,int l,int r,int f)&#123; if (!t[o].f) o=++cnt,t[o]=t[pre],t[o].f=1; if (l==r) &#123; t[o].sz=0; if (!f&amp;&amp;r&lt;m) return (LL)(u-1)*m+l; if (f&amp;&amp;r&lt;=n) return (LL)r*m; return w[t[o].id]; &#125; int num=t[t[o].l].sz,mid=(l+r)&gt;&gt;1;LL ret; if (pos&lt;=num) ret=ask(t[o].l,t[pre].l,l,mid,f); else pos-=num,ret=ask(t[o].r,t[pre].r,mid+1,r,f); t[o].sz=t[t[o].l].sz+t[t[o].r].sz; return ret;&#125;void insert(int &amp;o,int pre,int l,int r,LL x)&#123; if (!t[o].f) o=++cnt,t[o]=t[pre],t[o].f=1; if (l==r) &#123; w[++idx]=x; t[o].id=idx,t[o].sz=1; return; &#125; int mid=(l+r)&gt;&gt;1; if (pos&lt;=mid) insert(t[o].l,t[pre].l,l,mid,x); else insert(t[o].r,t[pre].r,mid+1,r,x); t[o].sz=t[t[o].l].sz+t[t[o].r].sz;&#125;int main()&#123; n=read(),m=read(),T=read(); int maxs=max(n,m)+T; build(rt[0],1,maxs,0); for(int i=1;i&lt;=n;i++) rt[i]=++cnt,t[cnt]=t[rt[0]],t[cnt].f=1; for(int i=1;i&lt;=n;i++) sz[i]=m-1;sz[n+1]=n; build(rt[n+1],1,maxs,1); while (T--) &#123; u=read(),v=read(); if (v==m) &#123; LL x; pos=u,x=ask(rt[n+1],rt[n+1],1,maxs,1); printf("%lld\n",x); pos=++sz[n+1],insert(rt[n+1],rt[n+1],1,maxs,x); &#125; else &#123; LL x,w; pos=v,x=ask(rt[u],rt[u],1,maxs,0); printf("%lld\n",x); pos=u,w=ask(rt[n+1],rt[n+1],1,maxs,1); pos=++sz[u],insert(rt[u],rt[u],1,maxs,w); pos=++sz[n+1],insert(rt[n+1],rt[n+1],1,maxs,x); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[NOIP2017]宝藏]]></title>
    <url>%2F2018%2F06%2F22%2FNOIP2017-%E5%AE%9D%E8%97%8F%2F</url>
    <content type="text"><![CDATA[一道状压dp的题当初考场上没有想到如何保存状态，写了个O\left ( 2^{n} n!\right )的，拿了70分dp数组记录最大深度d，和已选点状态s对于每个s，枚举补集进行更新枚举补集复杂度为O\left ( 3^{n}\right )，总复杂度O\left ( n3^{n} \right )12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;const int N=14,INF=1&lt;&lt;30;int n,m,dp[N][1&lt;&lt;N],w[1&lt;&lt;N],idx[1&lt;&lt;N],pos[1&lt;&lt;N],c[N],f[N][N],val[N];vector&lt;int&gt; e[N];int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) f[i][j]=INF; for(int d=0;d&lt;=n;d++) for(int i=0;i&lt;(1&lt;&lt;n);i++) dp[d][i]=INF; for(int i=1;i&lt;=m;i++) &#123; int u,v,val; scanf("%d%d%d",&amp;u,&amp;v,&amp;val); f[u][v]=f[v][u]=min(val,f[u][v]); &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if (f[i][j]!=INF) e[i].push_back(j); for(int i=1;i&lt;=n;i++) dp[0][1&lt;&lt;(i-1)]=0; for(int d=0;d&lt;=n;d++) for(int s=0,cnt=0;s&lt;(1&lt;&lt;n);s++,cnt=0) if (dp[d][s]!=INF) &#123; for(int i=1;i&lt;=n;i++) if (!(s&gt;&gt;(i-1)&amp;1)) pos[1&lt;&lt;cnt]=i,val[i]=INF,c[cnt++]=i; for(int k=1;k&lt;(1&lt;&lt;cnt);k++) &#123; int x=0; for(int i=0;i&lt;cnt;i++) if ((k&gt;&gt;i)&amp;1) x|=1&lt;&lt;(c[i]-1); idx[k]=x,w[x]=INF; &#125; for(int i=1;i&lt;=n;i++) if ((s&gt;&gt;(i-1))&amp;1) for(int j=0;j&lt;e[i].size();j++) &#123; int to=e[i][j]; if (!((s&gt;&gt;(to-1))&amp;1)) val[to]=min(f[i][to],val[to]); &#125; for(int k=1;k&lt;(1&lt;&lt;cnt);k++) if (w[idx[k-(k&amp;-k)]]!=INF&amp;&amp;val[pos[k&amp;-k]]!=INF) w[idx[k]]=w[idx[k-(k&amp;-k)]]+(d+1)*val[pos[k&amp;-k]]; for(int k=0;k&lt;(1&lt;&lt;cnt);k++) if (!(s&amp;idx[k])&amp;&amp;w[idx[k]]!=INF) dp[d+1][s|idx[k]]=min(dp[d+1][s|idx[k]],dp[d][s]+w[idx[k]]); &#125; int ans=INF; for(int i=1;i&lt;=n;i++) ans=min(ans,dp[i][(1&lt;&lt;n)-1]); printf("%d",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[HNOI2009]梦幻布丁]]></title>
    <url>%2F2018%2F06%2F20%2FHNOI2009-%E6%A2%A6%E5%B9%BB%E5%B8%83%E4%B8%81%2F</url>
    <content type="text"><![CDATA[用并查集维护在代表元素中保存当前段的颜色（w[]），和左右端点（s[]，t[]）再用一个桶维护每种颜色的所有段当且仅当要合并两段颜色相同时进行合并，并更新左右端点对于每个桶用list维护，再进行启发式合并，这里偷懒直接用了vector123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cstdio&gt;#include&lt;vector&gt;using namespace std;const int N=100050;int fa[N],w[N],cnt,s[N],t[N],n,m;vector&lt;int&gt; f[N*10];inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;int find(int x) &#123;return fa[x]==x?x:fa[x]=find(fa[x]);&#125;void unite(int u,int v)&#123; if (!u||!v) return; u=find(u),v=find(v); if (w[u]!=w[v]) return;else cnt--; fa[v]=u,s[u]=min(s[u],s[v]),t[u]=max(t[u],t[v]);&#125;void update()&#123; int u=read(),v=read(); if (u==v) return; while (!f[u].empty()) &#123; int x=f[u].back();f[u].pop_back(); if (find(x)!=x) continue;else w[x]=v; int st=s[x],ed=t[x]; if (st&gt;1) unite(st-1,st); if (ed&lt;n) unite(ed,ed+1); if (find(x)==x) f[v].push_back(x); &#125; &#125;int main()&#123; n=cnt=read(),m=read(); for(int i=1;i&lt;=n;i++) w[i]=read(),fa[i]=i; for(int i=1;i&lt;=n;i++) s[i]=t[i]=i; for(int i=1;i&lt;n;i++) unite(i,i+1); for(int i=1;i&lt;=n;i++) if (i==find(i)) f[w[i]].push_back(i); for(int i=1;i&lt;=m;i++) &#123; int opt=read(); if (opt==1) update(); if (opt==2) printf("%d\n",cnt); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷P1471 方差]]></title>
    <url>%2F2018%2F06%2F15%2F%E6%B4%9B%E8%B0%B7P1471-%E6%96%B9%E5%B7%AE%2F</url>
    <content type="text"><![CDATA[区间修改，区间查询，基本可以用线段树维护，主要是方差比较难维护将方差的计算展开 \frac{\sum_{i=1}^{n} \left ( a_{i}-\bar{a} \right )^{2}}{n}= \frac{\sum_{i=1}^{n} a_{i}^{2}-2\bar{a}\sum_{i=1}^{n}a_{i}+n\bar{a}^{2}}{n}= -\bar{a}^{2}+\frac{\sum_{i=1}^{n}a_{i}^{2}}{n}对于区间加法 \sum_{i=l}^{r}\left ( a_{i}+x \right )^{2}= \sum_{i=l}^{r}a_{i}^{2}+2x\sum_{i=l}^{r}a_{i}+\left ( r-l+1 \right )*x^{2} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;using namespace std;const int N=100050;const double eps=1e-8;int n,m,ql,qr;struct node &#123;double val,sum,c;&#125; t[N&lt;&lt;2]; double sqr(double x) &#123;return x*x;&#125;void build(int o,int l,int r)&#123; if (l==r) &#123; scanf("%lf",&amp;t[o].val); t[o].sum=sqr(t[o].val); return; &#125; int mid=(l+r)&gt;&gt;1; build(o&lt;&lt;1,l,mid); build(o&lt;&lt;1|1,mid+1,r); t[o].val=t[o&lt;&lt;1].val+t[o&lt;&lt;1|1].val; t[o].sum=t[o&lt;&lt;1].sum+t[o&lt;&lt;1|1].sum;&#125;void pushdown(int o,int l,int r)&#123; double x=t[o].c;t[o].c=0; int mid=(l+r)&gt;&gt;1; t[o&lt;&lt;1].sum+=(mid-l+1)*sqr(x)+2*x*t[o&lt;&lt;1].val; t[o&lt;&lt;1|1].sum+=(r-mid)*sqr(x)+2*x*t[o&lt;&lt;1|1].val; t[o&lt;&lt;1].val+=(mid-l+1)*x; t[o&lt;&lt;1|1].val+=(r-mid)*x; t[o&lt;&lt;1].c+=x,t[o&lt;&lt;1|1].c+=x; &#125;void update(int o,int l,int r,double x)&#123; if (ql&lt;=l&amp;&amp;r&lt;=qr) &#123; t[o].sum+=sqr(x)*(r-l+1)+2*x*t[o].val; t[o].val+=(r-l+1)*x;t[o].c+=x; return; &#125; int mid=(l+r)&gt;&gt;1; if (fabs(t[o].c)&gt;eps) pushdown(o,l,r); if (ql&lt;=mid) update(o&lt;&lt;1,l,mid,x); if (qr&gt;mid) update(o&lt;&lt;1|1,mid+1,r,x); t[o].val=t[o&lt;&lt;1].val+t[o&lt;&lt;1|1].val; t[o].sum=t[o&lt;&lt;1].sum+t[o&lt;&lt;1|1].sum;&#125;double ask(int o,int l,int r)&#123; if (ql&lt;=l&amp;&amp;r&lt;=qr) return t[o].val; int mid=(l+r)&gt;&gt;1;double ret=0; if (fabs(t[o].c)&gt;eps) pushdown(o,l,r); if (ql&lt;=mid) ret+=ask(o&lt;&lt;1,l,mid); if (qr&gt;mid) ret+=ask(o&lt;&lt;1|1,mid+1,r); return ret;&#125;double query(int o,int l,int r)&#123; if (ql&lt;=l&amp;&amp;r&lt;=qr) return t[o].sum; int mid=(l+r)&gt;&gt;1;double ret=0; if (fabs(t[o].c)&gt;eps) pushdown(o,l,r); if (ql&lt;=mid) ret+=query(o&lt;&lt;1,l,mid); if (qr&gt;mid) ret+=query(o&lt;&lt;1|1,mid+1,r); return ret;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); build(1,1,n); for(int i=1;i&lt;=m;i++) &#123; int opt; scanf("%d%d%d",&amp;opt,&amp;ql,&amp;qr); if (opt==1) &#123; double x;scanf("%lf",&amp;x); update(1,1,n,x); &#125; if (opt==2) printf("%.4lf\n",ask(1,1,n)/(qr-ql+1)); if (opt==3) &#123; double x=ask(1,1,n)/(qr-ql+1); printf("%.4lf\n",-sqr(x)+query(1,1,n)/(qr-ql+1)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[ZJOI2006]书架]]></title>
    <url>%2F2018%2F06%2F13%2FZJOI2006-%E4%B9%A6%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[一看题目就有一种平衡树的气息。给每本书一个val来维护相对位置再用一个pos[]数组记录下编号为x的位置pos[x]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;const int INF=1&lt;&lt;30,N=200050;int rt=0,cnt=0,n,m,pos[N],w[N],L,R;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;struct node &#123;int ch[2],fa,rec,val,sz;&#125;t[N];namespace Splay&#123; void calc(int o) &#123;t[o].sz=t[t[o].ch[0]].sz+t[t[o].ch[1]].sz+1;&#125; void maintain(int o) &#123;pos[t[o].rec]=o;&#125; void rotate(int x) &#123; int y=t[x].fa,z=t[y].fa,k=t[y].ch[1]==x; t[z].ch[t[z].ch[1]==y]=x,t[x].fa=z; t[y].ch[k]=t[x].ch[k^1],t[t[x].ch[k^1]].fa=y; t[x].ch[k^1]=y,t[y].fa=x; calc(y),calc(x); &#125; void splay(int x,int to) &#123; while (t[x].fa!=to) &#123; int y=t[x].fa,z=t[y].fa; if (z!=to) (t[y].ch[0]==x)^(t[z].ch[0]==y)?rotate(x):rotate(y); rotate(x); &#125; if (!to) rt=x; &#125; void ins(int &amp;o,int fa,int x,int idx) &#123; if (!o) &#123; o=++cnt; t[o].val=x,t[o].fa=fa; t[o].sz=1; t[o].rec=idx; pos[idx]=o; splay(o,0); return; &#125; t[o].sz++; ins(t[o].ch[x&gt;t[o].val],o,x,idx); &#125; void find(int x) &#123; int o=rt; while (t[o].ch[x&gt;t[o].val]&amp;&amp;x!=t[o].val) o=t[o].ch[x&gt;t[o].val]; splay(o,0); &#125; int next(int x,int opt) &#123; find(x); if ((t[rt].val&gt;x&amp;&amp;opt)||(t[rt].val&lt;x&amp;&amp;!opt)) return rt; int o=t[rt].ch[opt]; while (t[o].ch[opt^1]) o=t[o].ch[opt^1]; return o; &#125; void del(int x) &#123; int pre=next(x,0),nxt=next(x,1); splay(pre,0),splay(nxt,pre); int o=t[nxt].ch[0]; t[nxt].ch[0]=0; calc(nxt);calc(pre); &#125; int K_th(int o,int k) &#123; if (!o) return 0; if (k&lt;=t[t[o].ch[0]].sz) return K_th(t[o].ch[0],k); else if (k&gt;t[t[o].ch[0]].sz+1) return K_th(t[o].ch[1],k-t[t[o].ch[0]].sz-1); splay(o,0); return t[o].rec; &#125;&#125;;using namespace Splay;void insert(int x,int f)&#123; if (!f) return; if (f&lt;0) f++; int nxt=next(t[pos[x]].val,f); swap(t[nxt].rec,t[pos[x]].rec); maintain(pos[x]),maintain(nxt);&#125;int main()&#123; L=1,R=n=read(),m=read(); ins(rt,0,INF,0),ins(rt,0,-INF,0); for(int i=1;i&lt;=n;i++) ins(rt,0,i,read()); for(int i=1;i&lt;=m;i++) &#123; char str[20]; scanf("%s",str); int x=read(); if (str[0]=='T') del(t[pos[x]].val),ins(rt,0,--L,x); if (str[0]=='B') del(t[pos[x]].val),ins(rt,0,++R,x); if (str[0]=='I') insert(x,read()); if (str[0]=='A') find(t[pos[x]].val),printf("%d\n",t[t[rt].ch[0]].sz-1); if (str[0]=='Q') printf("%d\n",K_th(rt,x+1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[POI2011]ROT-Tree Rotations]]></title>
    <url>%2F2018%2F06%2F13%2FPOI2011-ROT-Tree-Rotations%2F</url>
    <content type="text"><![CDATA[对于每个节点分别求左-右，右-左的逆序对，将较小的加入答案原来思路：枚举个数较少的节点的每个数，二分求答案看完题解发现可以用线段树合并。新技能get123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cstdio&gt;#include&lt;algorithm&gt;#define LL long longusing namespace std;const int N=400050;int cnt,st,ch[N][2],w[N],rt[N],n;int idx,ls[N*20],rs[N*20],sum[N*20];LL ans,f,g;void dfs(int &amp;o)&#123; o=++cnt; scanf("%d",&amp;w[o]); if (!w[o]) dfs(ch[o][0]),dfs(ch[o][1]);&#125;void build(int &amp;o,int l,int r,int k)&#123; o=++idx; if (l==r) &#123;sum[o]=1;return;&#125; int mid=(l+r)&gt;&gt;1; k&lt;=mid?build(ls[o],l,mid,k):build(rs[o],mid+1,r,k); sum[o]=sum[ls[o]]+sum[rs[o]];&#125;int merge(int u,int v)&#123; if (!u||!v) return v+u; f+=(LL)sum[rs[u]]*sum[ls[v]]; g+=(LL)sum[ls[u]]*sum[rs[v]]; int o=++idx; ls[o]=merge(ls[u],ls[v]); rs[o]=merge(rs[u],rs[v]); sum[o]=sum[ls[o]]+sum[rs[o]]; return o;&#125;void calc(int o)&#123; if (!o) return; calc(ch[o][0]),calc(ch[o][1]); if (!w[o]) &#123; f=g=0; rt[o]=merge(rt[ch[o][0]],rt[ch[o][1]]); ans+=min(f,g); &#125;&#125;int main()&#123; scanf("%d",&amp;n); dfs(st); for(int i=1;i&lt;=cnt;i++) if (w[i]) build(rt[i],1,n,w[i]); calc(st); printf("%lld",ans); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[ZJOI2006]皇帝的烦恼]]></title>
    <url>%2F2018%2F06%2F13%2FZJOI2006-%E7%9A%87%E5%B8%9D%E7%9A%84%E7%83%A6%E6%81%BC%2F</url>
    <content type="text"><![CDATA[二分+dpdp不是很好想f记录与第一个位置相同个数的最大值g记录与第一个位置相同个数的最小值12345678910111213141516171819202122232425262728293031323334#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int N=20050;int n,maxs,sum=0,w[N],f[N],g[N];//f&gt;&gt;max g&gt;&gt;minbool check(int k)&#123; f[1]=g[1]=w[1]; for(int i=2;i&lt;=n;i++) &#123; f[i]=min(w[1]-g[i-1],w[i]); g[i]=max(0,w[i]-(k-w[i-1]-w[1]+f[i-1])); &#125; return !g[n];&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++) scanf("%d",&amp;w[i]),sum+=w[i]; maxs=w[1]+w[n]; for(int i=1;i&lt;n;i++) maxs=max(maxs,w[i]+w[i+1]); if (!(n&amp;1)) &#123;printf("%d",maxs);return 0;&#125; int L=maxs,R=sum; while (L&lt;R) &#123; int mid=(L+R)&gt;&gt;1; if (check(mid)) R=mid; else L=mid+1; &#125; printf("%d",L); return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Splay]]></title>
    <url>%2F2018%2F06%2F12%2FSplay%2F</url>
    <content type="text"><![CDATA[优化了一下之前Splay123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;cstdio&gt;const int INF=1&lt;&lt;30,N=100050;int rt=0,cnt=0,n;inline int read()&#123; register int x=0,t=1; register char ch=getchar(); while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!='-') ch=getchar(); if (ch=='-') &#123;t=-1;ch=getchar();&#125; while (ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=x*10+ch-48;ch=getchar();&#125; return x*t;&#125;struct node &#123;int ch[2],fa,rec,val,sz;&#125;t[N];namespace Splay&#123; void calc(int o) &#123;t[o].sz=t[t[o].ch[0]].sz+t[t[o].ch[1]].sz+t[o].rec;&#125; void rotate(int x) &#123; int y=t[x].fa,z=t[y].fa,k=t[y].ch[1]==x; t[z].ch[t[z].ch[1]==y]=x,t[x].fa=z; t[y].ch[k]=t[x].ch[k^1],t[t[x].ch[k^1]].fa=y; t[x].ch[k^1]=y,t[y].fa=x; calc(y),calc(x); &#125; void splay(int x,int to) &#123; while (t[x].fa!=to) &#123; int y=t[x].fa,z=t[y].fa; if (z!=to) (t[y].ch[0]==x)^(t[z].ch[0]==y)?rotate(x):rotate(y); rotate(x); &#125; if (!to) rt=x; &#125; void ins(int &amp;o,int fa,int x) &#123; if (!o) &#123; o=++cnt; t[o].val=x,t[o].fa=fa; t[o].sz=t[o].rec=1; splay(o,0); return; &#125; t[o].sz++; if (x==t[o].val) &#123;t[o].rec++;return;&#125; ins(t[o].ch[x&gt;t[o].val],o,x); &#125; void find(int x) &#123; int o=rt; while (t[o].ch[x&gt;t[o].val]&amp;&amp;x!=t[o].val) o=t[o].ch[x&gt;t[o].val]; splay(o,0); &#125; int next(int x,int opt) &#123; find(x); if ((t[rt].val&gt;x&amp;&amp;opt)||(t[rt].val&lt;x&amp;&amp;!opt)) return rt; int o=t[rt].ch[opt]; while (t[o].ch[opt^1]) o=t[o].ch[opt^1]; return o; &#125; void del(int x) &#123; int pre=next(x,0),nxt=next(x,1); splay(pre,0),splay(nxt,pre); int o=t[nxt].ch[0]; if (t[o].rec&gt;1) &#123; t[o].rec--; splay(o,0); &#125; else t[nxt].ch[0]=0; &#125; int K_th(int o,int k) &#123; if (!o) return 0; if (k&lt;=t[t[o].ch[0]].sz) return K_th(t[o].ch[0],k); else if (k&gt;t[t[o].ch[0]].sz+t[o].rec) return K_th(t[o].ch[1],k-t[t[o].ch[0]].sz-t[o].rec); splay(o,0); return t[o].val; &#125;&#125;;using namespace Splay;int main()&#123; n=read(); ins(rt,0,INF),ins(rt,0,-INF); for(int i=1;i&lt;=n;i++) &#123; int opt=read(),x=read(); if (opt==1) ins(rt,0,x); if (opt==2) del(x); if (opt==3) find(x),printf("%d\n",t[t[rt].ch[0]].sz); if (opt==4) printf("%d\n",K_th(rt,x+1)); if (opt==5) printf("%d\n",t[next(x,0)].val); if (opt==6) printf("%d\n",t[next(x,1)].val); &#125; return 0;&#125;]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
</search>
