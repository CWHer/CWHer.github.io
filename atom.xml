<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魍魉的小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-11T11:07:37.268Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CWHer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[NOI2001]炮兵阵地</title>
    <link href="http://yoursite.com/2018/08/11/NOI2001-%E7%82%AE%E5%85%B5%E9%98%B5%E5%9C%B0/"/>
    <id>http://yoursite.com/2018/08/11/NOI2001-炮兵阵地/</id>
    <published>2018-08-11T10:59:23.000Z</published>
    <updated>2018-08-11T11:07:37.268Z</updated>
    
    <content type="html"><![CDATA[<p>先预处理出一行内所有可行方案，记为<script type="math/tex">s</script>，可以发现可行解并不多<br>再预处理出所有可行方案的炮兵数目，记为<script type="math/tex">w</script><br>用<script type="math/tex">dp\left [  d\right ]\left [  i\right ]\left [ j \right ]</script>记录前<script type="math/tex">d</script>行，且上一行状态为<script type="math/tex">s_{j}</script>，上两行状态为<script type="math/tex">s_{i}</script>的最大炮兵数目</p><script type="math/tex; mode=display">dp\left [ d \right ]\left [ j \right ]\left [ k \right ]=max\left \{ dp\left [ d-1 \right ]\left [ i \right ]\left [ j \right ]\right \}</script><p>转移时需要判断状态之间是否合法，炮兵是否均在平原<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>,M=<span class="number">65</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,dp[N][M][M],f[N];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,c[M],w[M],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'P'</span>&amp;&amp;ch!=<span class="string">'H'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);s++)</span><br><span class="line">        <span class="keyword">if</span> (!((s&gt;&gt;<span class="number">1</span>)&amp;s)&amp;&amp;!((s&lt;&lt;<span class="number">1</span>)&amp;s))</span><br><span class="line">            <span class="keyword">if</span> (!((s&gt;&gt;<span class="number">2</span>)&amp;s)&amp;&amp;!((s&lt;&lt;<span class="number">2</span>)&amp;s)) c[++cnt]=s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            f[i]+=(get()==<span class="string">'H'</span>)&lt;&lt;(m-j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">            w[i]+=(c[i]&gt;&gt;(k<span class="number">-1</span>))&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=n;d++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++) <span class="keyword">if</span> (!(f[d]&amp;c[k]))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++) <span class="keyword">if</span> (!(c[i]&amp;c[j]))</span><br><span class="line">                    <span class="keyword">if</span> (!(c[i]&amp;c[k])&amp;&amp;!(c[j]&amp;c[k]))</span><br><span class="line">                        dp[d][j][k]=max(dp[d][j][k],dp[d<span class="number">-1</span>][i][j]+w[k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            ans=max(ans,dp[n][i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先预处理出一行内所有可行方案，记为&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;，可以发现可行解并不多&lt;br&gt;再预处理出所有可行方案的炮兵数目，记为&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;dp\left [  d\right ]\left [  i\right ]\left [ j \right ]&lt;/script&gt;记录前&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;行，且上一行状态为&lt;script type=&quot;math/tex&quot;&gt;s_{j}&lt;/script&gt;，上两行状态为&lt;script type=&quot;math/tex&quot;&gt;s_{i}&lt;/script&gt;的最大炮兵数目&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp\left [ d \right ]\left [ j \right ]\left [ k \right ]=max\left \{ dp\left [ d-1 \right ]\left [ i \right ]\left [ j \right ]\right \}&lt;/script&gt;&lt;p&gt;转移时需要判断状态之间是否合法，炮兵是否均在平原&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>[SDOI2013]直径</title>
    <link href="http://yoursite.com/2018/08/11/SDOI2013-%E7%9B%B4%E5%BE%84/"/>
    <id>http://yoursite.com/2018/08/11/SDOI2013-直径/</id>
    <published>2018-08-11T10:46:22.000Z</published>
    <updated>2018-08-11T10:58:11.265Z</updated>
    
    <content type="html"><![CDATA[<p>首先求一遍直径，记起点为<script type="math/tex">S</script>，终点为<script type="math/tex">T</script><br>所有可行边均在直径上<del>（废话）</del><br>考虑直径上某个点<script type="math/tex">x</script>，求出它不经过直径的能访问的最远距离，记为<script type="math/tex">d_{x}</script><br>复杂度<del>显然</del>是<script type="math/tex">O\left(N\right)​</script>的</p><p>从<script type="math/tex">S</script>到<script type="math/tex">T</script>，依次遍历直径上所有点</p><ul><li>若<script type="math/tex">d_{x}=D\left ( S,x \right )</script>，则<script type="math/tex">S</script>到<script type="math/tex">x</script>之间所有的边均不是必须经过的</li><li>若<script type="math/tex">d_{x}=D\left ( x,T \right )</script>，则<script type="math/tex">x</script>到<script type="math/tex">T</script>之间所有的边均不是必须经过的</li></ul><p>需要注意的是，有些算法在遇到第二种情况时需要及时退出<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>;</span><br><span class="line"><span class="keyword">int</span> n,st,ed,fa[N],col[N],ans=<span class="number">0</span>;</span><br><span class="line">LL d[N],len;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o==pre) d[o]=<span class="number">0</span>,fa[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!x||d[o]&gt;d[x]) x=o;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to]=o;</span><br><span class="line">            d[to]=d[o]+g[o][i];</span><br><span class="line">            find(to,o,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    col[o]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!col[to]) ret=max(ret,dfs(to)+g[o][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">int</span> val=read();</span><br><span class="line">        add(u,v,val);</span><br><span class="line">        add(v,u,val);</span><br><span class="line">    &#125;</span><br><span class="line">    find(n,n,ed);</span><br><span class="line">    find(ed,ed,st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,len=d[st]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st;i;i=fa[i]) col[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>,i=st;i&amp;&amp;!f;i=fa[i])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;!f&amp;&amp;j&lt;e[i].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[i][j];</span><br><span class="line">            <span class="keyword">if</span> (!col[to]) </span><br><span class="line">            &#123;</span><br><span class="line">                LL x=dfs(to)+g[i][j];</span><br><span class="line">                <span class="keyword">if</span> (x==len-d[i]) st=i;</span><br><span class="line">                <span class="keyword">if</span> (x==d[i]) ed=i,f=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st;i!=ed;i=fa[i]) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先求一遍直径，记起点为&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;，终点为&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;&lt;br&gt;所有可行边均在直径上&lt;del&gt;（废话）&lt;/del&gt;&lt;br&gt;考虑直径上某个点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，求出它不经过直径的能访问的最远距离，记为&lt;script type=&quot;math/tex&quot;&gt;d_{x}&lt;/script&gt;&lt;br&gt;复杂度&lt;del&gt;显然&lt;/del&gt;是&lt;script type=&quot;math/tex&quot;&gt;O\left(N\right)​&lt;/script&gt;的&lt;/p&gt;
&lt;p&gt;从&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;，依次遍历直径上所有点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;d_{x}=D\left ( S,x \right )&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;之间所有的边均不是必须经过的&lt;/li&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;d_{x}=D\left ( x,T \right )&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;之间所有的边均不是必须经过的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，有些算法在遇到第二种情况时需要及时退出&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="树的直径" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>扩展中国剩余定理</title>
    <link href="http://yoursite.com/2018/08/11/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/11/扩展中国剩余定理/</id>
    <published>2018-08-11T10:32:36.000Z</published>
    <updated>2018-08-11T10:45:31.610Z</updated>
    
    <content type="html"><![CDATA[<script type="math/tex; mode=display">\left\{\begin{matrix} x\equiv a_{1}\left ( mod \ m_{1} \right )  \\ x\equiv a_{2}\left ( mod \ m_{2} \right )\\\cdots \\x\equiv a_{n}\left ( mod \ m_{n} \right )\\\end{matrix}\right.</script><p>不保证<script type="math/tex">m</script>两两互质</p><p>设已求出前<script type="math/tex">k</script>个方程的解，记为<script type="math/tex">x_{k}</script><br>记<script type="math/tex">M_{k}=\prod _{i=1}^{k}m_{i}</script><br>则<script type="math/tex">x_{k}+tM_{k}\left ( k \in\mathbb{Z} \right )</script>为前<script type="math/tex">k</script>个方程的通解</p><p>考虑第<script type="math/tex">k+1</script>个方程</p><script type="math/tex; mode=display">x_{k}+tM_{k} \equiv a_{k+1} \left ( mod \ m_{k+1}\right )</script><p>用<script type="math/tex">exgcd</script>解出<script type="math/tex">t</script><br>若无解则方程组无解<br>若有解则<script type="math/tex">x_{k+1}=x_{k}+tM_{k}</script><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line">LL n,x,y,a[N],m[N],M=<span class="number">1</span>;</span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL a,LL b,LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) ret=(ret+a)%mod;</span><br><span class="line">        a=(a&lt;&lt;<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">LL <span class="title">exCRT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL M=m[<span class="number">1</span>],ans=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL w=gcd(M,m[i]);</span><br><span class="line">        LL c=(a[i]-ans)%m[i]+m[i];</span><br><span class="line">        exgcd(M/w,m[i]/w,x,y);</span><br><span class="line">        x=mul(x,c%m[i]/w,m[i]);</span><br><span class="line">        ans+=x*M,M*=m[i]/w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans%M+M)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;m[i],&amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,exCRT());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;math/tex; mode=display&quot;&gt;
\left\{\begin{matrix}
 x\equiv a_{1}\left ( mod \ m_{1} \right )  \\ 
x\equiv a_{2}\left ( mod \ m_{2} \right )\\
\cdots \\
x\equiv a_{n}\left ( mod \ m_{n} \right )\\
\end{matrix}\right.&lt;/script&gt;&lt;p&gt;不保证&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;两两互质&lt;/p&gt;
&lt;p&gt;设已求出前&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;个方程的解，记为&lt;script type=&quot;math/tex&quot;&gt;x_{k}&lt;/script&gt;&lt;br&gt;记&lt;script type=&quot;math/tex&quot;&gt;M_{k}=\prod _{i=1}^{k}m_{i}&lt;/script&gt;&lt;br&gt;则&lt;script type=&quot;math/tex&quot;&gt;x_{k}+tM_{k}\left ( k \in\mathbb{Z} \right )&lt;/script&gt;为前&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;个方程的通解&lt;/p&gt;
&lt;p&gt;考虑第&lt;script type=&quot;math/tex&quot;&gt;k+1&lt;/script&gt;个方程&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
x_{k}+tM_{k} \equiv a_{k+1} \left ( mod \ m_{k+1}\right )&lt;/script&gt;&lt;p&gt;用&lt;script type=&quot;math/tex&quot;&gt;exgcd&lt;/script&gt;解出&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;br&gt;若无解则方程组无解&lt;br&gt;若有解则&lt;script type=&quot;math/tex&quot;&gt;x_{k+1}=x_{k}+tM_{k}&lt;/script&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>K短路</title>
    <link href="http://yoursite.com/2018/08/11/k%E7%9F%AD%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/08/11/k短路/</id>
    <published>2018-08-11T10:08:00.000Z</published>
    <updated>2018-08-11T11:10:38.863Z</updated>
    
    <content type="html"><![CDATA[<p>其实<script type="math/tex">K</script>短路是有有理有据的做法的，<del>但我不会啊</del></p><p>建立一个以<script type="math/tex">d</script>为关键字的优先队列<br>放入<script type="math/tex">\left ( S,0 \right )</script>，然后进行扩展<br><del>易证</del>，当<script type="math/tex">\left ( x,d \right )</script>被第<script type="math/tex">K</script>次取出时，<script type="math/tex">d</script>为<script type="math/tex">S</script>到<script type="math/tex">x</script>的<script type="math/tex">K</script>短路</p><p>考虑用启发式优化来提高效率<br>到<script type="math/tex">T</script>的估计距离<script type="math/tex">f_{x}</script>可以为<script type="math/tex">x</script>到<script type="math/tex">T</script>的最短路<br>对于点<script type="math/tex">x</script>，<script type="math/tex">g_{x}=d_{now}+f_{x}</script><br>优先队列以<script type="math/tex">g</script>为关键字</p><p>还可以继续优化</p><ul><li>当取出其中某个点<script type="math/tex">K</script>次后，不需要将其再放入优先队列中</li><li>对于有距离要求的<script type="math/tex">K</script>短路，当取出元素的<script type="math/tex">d</script>大于给定值可直接退出</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5050</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to;<span class="keyword">double</span> val;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> id;<span class="keyword">double</span> d;&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>,inq[N],cnt[N];</span><br><span class="line"><span class="keyword">double</span> E,f[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[N],r[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.d+f[a.id]&gt;b.d+f[b.id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node,<span class="built_in">vector</span>&lt;node&gt;,cmp&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=INF;</span><br><span class="line">    f[s]=<span class="number">0</span>,inq[s]=<span class="number">1</span>,Q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front();</span><br><span class="line">        Q.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r[x].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=r[x][i].to;</span><br><span class="line">            <span class="keyword">double</span> val=r[x][i].val;</span><br><span class="line">            <span class="keyword">if</span> (f[x]+val&lt;f[to])</span><br><span class="line">            &#123;</span><br><span class="line">                f[to]=f[x]+val;</span><br><span class="line">                <span class="keyword">if</span> (!inq[to]) inq[to]=<span class="number">1</span>,Q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.push((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=S.top();</span><br><span class="line">        <span class="keyword">if</span> (cnt[x.id]&gt;sz) <span class="keyword">return</span>;</span><br><span class="line">        S.pop(),cnt[x.id]++;</span><br><span class="line">        <span class="keyword">if</span> (x.d&gt;E) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.id==t) </span><br><span class="line">        &#123;</span><br><span class="line">            ans++,E-=x.d;</span><br><span class="line">            sz=E/x.d;</span><br><span class="line">            <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x.id].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[x.id][i].to;</span><br><span class="line">            <span class="keyword">double</span> val=e[x.id][i].val;</span><br><span class="line">            <span class="keyword">if</span> (x.d+val&lt;=E) S.push((node)&#123;to,x.d+val&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;E);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">double</span> val;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;val);</span><br><span class="line">        e[u].push_back((edge)&#123;v,val&#125;);</span><br><span class="line">        r[v].push_back((edge)&#123;u,val&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    SPFA(n);</span><br><span class="line">    A_star(<span class="number">1</span>,n,E/f[<span class="number">1</span>]); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路是有有理有据的做法的，&lt;del&gt;但我不会啊&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;建立一个以&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;为关键字的优先队列&lt;br&gt;放入&lt;script type=&quot;math/tex&quot;&gt;\left ( S,0 \right )&lt;/script&gt;，然后进行扩展&lt;br&gt;&lt;del&gt;易证&lt;/del&gt;，当&lt;script type=&quot;math/tex&quot;&gt;\left ( x,d \right )&lt;/script&gt;被第&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;次取出时，&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;为&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;的&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路&lt;/p&gt;
&lt;p&gt;考虑用启发式优化来提高效率&lt;br&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的估计距离&lt;script type=&quot;math/tex&quot;&gt;f_{x}&lt;/script&gt;可以为&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的最短路&lt;br&gt;对于点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;g_{x}=d_{now}+f_{x}&lt;/script&gt;&lt;br&gt;优先队列以&lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;为关键字&lt;/p&gt;
&lt;p&gt;还可以继续优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当取出其中某个点&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;次后，不需要将其再放入优先队列中&lt;/li&gt;
&lt;li&gt;对于有距离要求的&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路，当取出元素的&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;大于给定值可直接退出&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="A*" scheme="http://yoursite.com/tags/A/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1382 楼房</title>
    <link href="http://yoursite.com/2018/08/11/%E6%B4%9B%E8%B0%B7P1382-%E6%A5%BC%E6%88%BF/"/>
    <id>http://yoursite.com/2018/08/11/洛谷P1382-楼房/</id>
    <published>2018-08-11T09:53:02.000Z</published>
    <updated>2018-08-11T11:11:55.798Z</updated>
    
    <content type="html"><![CDATA[<p>线段树实现起来细节有点多，用了<em>multiset</em><br>参考了一下大佬的题解</p><p>排序时需要注意顺序问题</p><ul><li>先左后右</li><li>先入后出</li><li>入边从高到低</li><li>出边从低到高</li></ul><p>感性理解一下即可</p><p>加入边时考虑是否会变高<br>删除边时考虑是否会变低<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> x,h,opt;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span><span class="keyword">int</span> x,y;&#125;ans[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x!=b.x) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">if</span> (a.opt!=b.opt) <span class="keyword">return</span> a.opt&gt;b.opt;</span><br><span class="line">    <span class="keyword">if</span> (a.opt==<span class="number">1</span>) <span class="keyword">return</span> a.h&gt;b.h;</span><br><span class="line">    <span class="keyword">if</span> (a.opt==<span class="number">-1</span>) <span class="keyword">return</span> a.h&lt;b.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> h=read(),l=read(),r=read();</span><br><span class="line">        t[i]=(node)&#123;l,h,<span class="number">1</span>&#125;;</span><br><span class="line">        t[i+n]=(node)&#123;r,h,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp);</span><br><span class="line">    S.insert(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> H=*S.rbegin();</span><br><span class="line">        <span class="keyword">if</span> (t[i].opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i].h&gt;H) </span><br><span class="line">            &#123;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,H&#125;;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,t[i].h&#125;;</span><br><span class="line">                S.insert(t[i].h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> S.insert(t[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[i].opt==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i].h==H&amp;&amp;S.count(H)==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                S.erase(H);</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,H&#125;;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,*S.rbegin()&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> S.erase(S.find(t[i].h));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].x,ans[i].y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线段树实现起来细节有点多，用了&lt;em&gt;multiset&lt;/em&gt;&lt;br&gt;参考了一下大佬的题解&lt;/p&gt;
&lt;p&gt;排序时需要注意顺序问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先左后右&lt;/li&gt;
&lt;li&gt;先入后出&lt;/li&gt;
&lt;li&gt;入边从高到低&lt;/li&gt;
&lt;li&gt;出边从低到高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感性理解一下即可&lt;/p&gt;
&lt;p&gt;加入边时考虑是否会变高&lt;br&gt;删除边时考虑是否会变低&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.5]Picture</title>
    <link href="http://yoursite.com/2018/08/11/USACO5-5-Picture/"/>
    <id>http://yoursite.com/2018/08/11/USACO5-5-Picture/</id>
    <published>2018-08-11T08:26:49.000Z</published>
    <updated>2018-08-11T08:44:17.637Z</updated>
    
    <content type="html"><![CDATA[<p>扫描线参考<a href="https://cwher.github.io/2018/08/11/HDU1542-Atlantis" target="_blank" rel="noopener">HDU1542 Atlantis</a><br>可以横竖各做一遍<br>需要注意的是会重复计算，需要与上一次结果作差</p><p>也可以只做一遍<br>用<script type="math/tex">sz</script>数组记录宽度，<script type="math/tex">c</script>数组记录竖线数量<br>还需要<script type="math/tex">L</script>，<script type="math/tex">R</script>记录是否有左右端点竖线<br>需要注意的是端点竖线重合和顺序问题<br>高度相同时先做覆盖再做取消覆盖，否则会重叠线段会多次计算<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,h,val;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>,ans=<span class="number">0</span>,ql,qr;</span><br><span class="line"><span class="keyword">int</span> num[N&lt;&lt;<span class="number">2</span>],sz[N&lt;&lt;<span class="number">2</span>],w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> c[N&lt;&lt;<span class="number">2</span>],L[N&lt;&lt;<span class="number">2</span>],R[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.h==b.h?a.val&gt;b.val:a.h&lt;b.h;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num[o])</span><br><span class="line">    &#123;</span><br><span class="line">        sz[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">        c[o]=(L[o]=<span class="number">1</span>)+(R[o]=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        L[o]=L[o&lt;&lt;<span class="number">1</span>],R[o]=R[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        c[o]=c[o&lt;&lt;<span class="number">1</span>]+c[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        c[o]-=(R[o&lt;&lt;<span class="number">1</span>]&amp;L[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        num[o]+=x;</span><br><span class="line">        calc(o,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=mid) modify(o&lt;&lt;<span class="number">1</span>,l,mid,x);</span><br><span class="line">    <span class="keyword">if</span> (qr&gt;mid) modify(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    calc(o,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x1=read(),y1=read();</span><br><span class="line">        <span class="keyword">int</span> x2=read(),y2=read();</span><br><span class="line">        w[i]=x1,w[i+n]=x2;</span><br><span class="line">        t[++cnt]=(node)&#123;x1,x2,y1,<span class="number">1</span>&#125;;</span><br><span class="line">        t[++cnt]=(node)&#123;x1,x2,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> idx=unique(w+<span class="number">1</span>,w+n+<span class="number">1</span>)-w<span class="number">-1</span>;</span><br><span class="line">    sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ql=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].l)-w;</span><br><span class="line">        qr=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].r)-w<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql&lt;=qr) modify(<span class="number">1</span>,<span class="number">1</span>,idx,t[i].val);</span><br><span class="line">        ans+=c[<span class="number">1</span>]*(t[i+<span class="number">1</span>].h-t[i].h);</span><br><span class="line">        ans+=<span class="built_in">abs</span>(sz[<span class="number">1</span>]-pre),pre=sz[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扫描线参考&lt;a href=&quot;https://cwher.github.io/2018/08/11/HDU1542-Atlantis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU1542 Atlantis&lt;/a&gt;&lt;br&gt;可以横竖各做一遍&lt;br&gt;需要注意的是会重复计算，需要与上一次结果作差&lt;/p&gt;
&lt;p&gt;也可以只做一遍&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;sz&lt;/script&gt;数组记录宽度，&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;数组记录竖线数量&lt;br&gt;还需要&lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;记录是否有左右端点竖线&lt;br&gt;需要注意的是端点竖线重合和顺序问题&lt;br&gt;高度相同时先做覆盖再做取消覆盖，否则会重叠线段会多次计算&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU1255 覆盖的面积</title>
    <link href="http://yoursite.com/2018/08/11/HDU1255-%E8%A6%86%E7%9B%96%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2018/08/11/HDU1255-覆盖的面积/</id>
    <published>2018-08-11T08:19:11.000Z</published>
    <updated>2018-08-11T08:39:01.572Z</updated>
    
    <content type="html"><![CDATA[<p>扫描线参考<a href="https://cwher.github.io/2018/08/11/HDU1542-Atlantis" target="_blank" rel="noopener">HDU1542 Atlantis</a><br>需要修改的只有<script type="math/tex">calc</script>函数<br>用<script type="math/tex">sz</script>数组记录被覆盖到两次或以上的宽度<br>用<script type="math/tex">c</script>数组记录被覆盖到一次的宽度</p><p>具体细节看代码<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">double</span> l,r,h;<span class="keyword">int</span> val;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[N&lt;&lt;<span class="number">4</span>],ql,qr;</span><br><span class="line"><span class="keyword">double</span> sz[N&lt;&lt;<span class="number">4</span>],c[N&lt;&lt;<span class="number">4</span>],w[N&lt;&lt;<span class="number">4</span>];    <span class="comment">//2 1</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.h&lt;b.h;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num[o]&gt;=<span class="number">2</span>) sz[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">    <span class="keyword">if</span> (num[o]==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">        sz[o]=c[o&lt;&lt;<span class="number">1</span>]+c[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!num[o])</span><br><span class="line">    &#123;</span><br><span class="line">        c[o]=c[o&lt;&lt;<span class="number">1</span>]+c[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        num[o]+=x;</span><br><span class="line">        calc(o,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=mid) modify(o&lt;&lt;<span class="number">1</span>,l,mid,x);</span><br><span class="line">    <span class="keyword">if</span> (qr&gt;mid) modify(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    calc(o,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Case=<span class="number">0</span>,T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>,n=read();</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="keyword">sizeof</span>(sz));</span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            w[i]=x1,w[i+n]=x2;</span><br><span class="line">            t[++cnt]=(node)&#123;x1,x2,y1,<span class="number">1</span>&#125;;</span><br><span class="line">            t[++cnt]=(node)&#123;x1,x2,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> idx=unique(w+<span class="number">1</span>,w+n+<span class="number">1</span>)-w<span class="number">-1</span>;</span><br><span class="line">        sort(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ql=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].l)-w;</span><br><span class="line">            qr=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].r)-w<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ql&lt;=qr) modify(<span class="number">1</span>,<span class="number">1</span>,idx,t[i].val);</span><br><span class="line">            ans+=sz[<span class="number">1</span>]*(t[i+<span class="number">1</span>].h-t[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扫描线参考&lt;a href=&quot;https://cwher.github.io/2018/08/11/HDU1542-Atlantis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU1542 Atlantis&lt;/a&gt;&lt;br&gt;需要修改的只有&lt;script type=&quot;math/tex&quot;&gt;calc&lt;/script&gt;函数&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;sz&lt;/script&gt;数组记录被覆盖到两次或以上的宽度&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;数组记录被覆盖到一次的宽度&lt;/p&gt;
&lt;p&gt;具体细节看代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[USACO07OPEN]城市的地平线</title>
    <link href="http://yoursite.com/2018/08/11/USACO07OPEN-%E5%9F%8E%E5%B8%82%E7%9A%84%E5%9C%B0%E5%B9%B3%E7%BA%BF/"/>
    <id>http://yoursite.com/2018/08/11/USACO07OPEN-城市的地平线/</id>
    <published>2018-08-11T08:16:07.000Z</published>
    <updated>2018-08-11T08:37:31.542Z</updated>
    
    <content type="html"><![CDATA[<p>竖版的扫描线<br>扫描线参考<a href="https://cwher.github.io/2018/08/11/HDU1542-Atlantis" target="_blank" rel="noopener">HDU1542 Atlantis</a><br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">80050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> x,h,val;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>,ql,qr,w[N];</span><br><span class="line">LL ans=<span class="number">0</span>,sz[N&lt;&lt;<span class="number">4</span>],num[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num[o])</span><br><span class="line">        sz[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        num[o]+=x;</span><br><span class="line">        calc(o,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=mid) modify(o&lt;&lt;<span class="number">1</span>,l,mid,x);</span><br><span class="line">    <span class="keyword">if</span> (qr&gt;mid) modify(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    calc(o,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l=read(),r=read(),h;</span><br><span class="line">        w[i]=h=read();</span><br><span class="line">        t[++cnt]=(node)&#123;l,h,<span class="number">1</span>&#125;;</span><br><span class="line">        t[++cnt]=(node)&#123;r,h,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    w[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    sort(w+<span class="number">1</span>,w+n+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> idx=unique(w+<span class="number">1</span>,w+n+<span class="number">2</span>)-w<span class="number">-1</span>;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ql=<span class="number">1</span>,qr=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].h)-w<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql&lt;=qr) modify(<span class="number">1</span>,<span class="number">1</span>,n,t[i].val);</span><br><span class="line">        ans+=sz[<span class="number">1</span>]*((LL)t[i+<span class="number">1</span>].x-t[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;竖版的扫描线&lt;br&gt;扫描线参考&lt;a href=&quot;https://cwher.github.io/2018/08/11/HDU1542-Atlantis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU1542 Atlantis&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU1542 Atlantis</title>
    <link href="http://yoursite.com/2018/08/11/HDU1542-Atlantis/"/>
    <id>http://yoursite.com/2018/08/11/HDU1542-Atlantis/</id>
    <published>2018-08-11T08:07:07.000Z</published>
    <updated>2018-08-11T10:02:48.242Z</updated>
    
    <content type="html"><![CDATA[<p>扫描线入门题</p><p>借用一下某位大佬的图<br><img src="/2018/08/11/HDU1542-Atlantis/1.JPG" alt="T1"><br><img src="/2018/08/11/HDU1542-Atlantis/2.JPG" alt="T2"><br><img src="/2018/08/11/HDU1542-Atlantis/3.JPG" alt="T3"><br><img src="/2018/08/11/HDU1542-Atlantis/4.JPG" alt="T4"><br><img src="/2018/08/11/HDU1542-Atlantis/5.JPG" alt="T5"><br><img src="/2018/08/11/HDU1542-Atlantis/6.JPG" alt="T6"></p><p>先离散化横坐标<br>每个矩形分成上下两条线，下入上出<br>用<script type="math/tex">sz</script>数组记录当前区间被覆盖宽度<br>具体细节看代码<br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">205</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">double</span> l,r,h;<span class="keyword">int</span> val;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[N&lt;&lt;<span class="number">4</span>],ql,qr;</span><br><span class="line"><span class="keyword">double</span> sz[N&lt;&lt;<span class="number">4</span>],w[N&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;<span class="keyword">return</span> a.h&lt;b.h;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num[o])<span class="comment">//full</span></span><br><span class="line">        sz[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//not</span></span><br><span class="line">        sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        num[o]+=x;</span><br><span class="line">        calc(o,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=mid) modify(o&lt;&lt;<span class="number">1</span>,l,mid,x);</span><br><span class="line">    <span class="keyword">if</span> (qr&gt;mid) modify(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    calc(o,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Case=<span class="number">0</span>,n;</span><br><span class="line">    <span class="keyword">while</span> (n=read())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="keyword">sizeof</span>(sz));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            w[i]=x1,w[i+n]=x2;</span><br><span class="line">            t[++cnt]=(node)&#123;x1,x2,y1,<span class="number">1</span>&#125;;</span><br><span class="line">            t[++cnt]=(node)&#123;x1,x2,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> idx=unique(w+<span class="number">1</span>,w+n+<span class="number">1</span>)-w<span class="number">-1</span>;</span><br><span class="line">        sort(t+<span class="number">1</span>,t+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ql=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].l)-w;</span><br><span class="line">            qr=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].r)-w<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ql&lt;=qr) modify(<span class="number">1</span>,<span class="number">1</span>,idx,t[i].val);</span><br><span class="line">            ans+=sz[<span class="number">1</span>]*(t[i+<span class="number">1</span>].h-t[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扫描线入门题&lt;/p&gt;
&lt;p&gt;借用一下某位大佬的图&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/1.JPG&quot; alt=&quot;T1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/2.JPG&quot; alt=&quot;T2&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/3.JPG&quot; alt=&quot;T3&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/4.JPG&quot; alt=&quot;T4&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/5.JPG&quot; alt=&quot;T5&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2018/08/11/HDU1542-Atlantis/6.JPG&quot; alt=&quot;T6&quot;&gt;&lt;/p&gt;
&lt;p&gt;先离散化横坐标&lt;br&gt;每个矩形分成上下两条线，下入上出&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;sz&lt;/script&gt;数组记录当前区间被覆盖宽度&lt;br&gt;具体细节看代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P4388 付公主的矩形</title>
    <link href="http://yoursite.com/2018/08/11/%E6%B4%9B%E8%B0%B7P4388-%E4%BB%98%E5%85%AC%E4%B8%BB%E7%9A%84%E7%9F%A9%E5%BD%A2/"/>
    <id>http://yoursite.com/2018/08/11/洛谷P4388-付公主的矩形/</id>
    <published>2018-08-11T07:20:14.000Z</published>
    <updated>2018-08-11T07:52:42.266Z</updated>
    
    <content type="html"><![CDATA[<p>首先有一个结论<br>对于一个<script type="math/tex">\left ( r,c \right ), \ gcd\left ( r,c \right )=1</script>的矩形，经过格子数目为<script type="math/tex">r+c-1</script>个<br>更一般的，可由上式化简，对于<script type="math/tex">\left ( r,c \right )</script>，经过格子数目为<script type="math/tex">r+c-gcd\left ( r,c \right )</script></p><p>证明有多种<br>给出一种我当时想出来的</p><ul><li><script type="math/tex">\left ( r,c \right )</script>中对角线只有初末位置在格点上</li><li>当对角线穿过某一网格边时，必然会在两边经过各一个格子</li><li>对角线穿过的网格边数显然为<script type="math/tex">r+c-2</script></li><li>由于中间无格点，按照上述计算时中间每个格子会被计算到两次</li><li>初末位置的格子仅会被计算到一次</li><li>化简后可得格子数为<script type="math/tex">r+c-1</script></li></ul><p>暴力统计就能过了，复杂度比较玄学，大概是<script type="math/tex">O\left ( c*ans \right )</script>，<script type="math/tex">c</script>为一个不是很大常数<del>（我猜的）</del></p><p>其实还有更有理有据的做法</p><script type="math/tex; mode=display">\sum _{d\mid n}\sum \left [r+c=d+1,gcd\left ( r,c \right )=1  \right ]= \frac{\sum _{d\mid n}\varphi\left ( d+1 \right )+1}{2}</script><p>每一对<script type="math/tex">\left ( r,c \right )</script>都会被算到两次，但<script type="math/tex">\left ( n,n \right )</script>只会被算到一次<br>复杂度<script type="math/tex">O\left ( N \right )</script></p><p>代码为暴力统计<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>,idx=<span class="number">0</span>,w[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w[++idx]=i;</span><br><span class="line">            <span class="keyword">if</span> (i*i!=n) w[++idx]=n/i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sz=w[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=sz/<span class="number">2</span>;k++)</span><br><span class="line">            <span class="keyword">if</span> (gcd(k,sz-k)==<span class="number">1</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先有一个结论&lt;br&gt;对于一个&lt;script type=&quot;math/tex&quot;&gt;\left ( r,c \right ), \ gcd\left ( r,c \right )=1&lt;/script&gt;的矩形，经过格子数目为&lt;script type=&quot;math/tex&quot;&gt;r+c-1&lt;/script&gt;个&lt;br&gt;更一般的，可由上式化简，对于&lt;script type=&quot;math/tex&quot;&gt;\left ( r,c \right )&lt;/script&gt;，经过格子数目为&lt;script type=&quot;math/tex&quot;&gt;r+c-gcd\left ( r,c \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;证明有多种&lt;br&gt;给出一种我当时想出来的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\left ( r,c \right )&lt;/script&gt;中对角线只有初末位置在格点上&lt;/li&gt;
&lt;li&gt;当对角线穿过某一网格边时，必然会在两边经过各一个格子&lt;/li&gt;
&lt;li&gt;对角线穿过的网格边数显然为&lt;script type=&quot;math/tex&quot;&gt;r+c-2&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;由于中间无格点，按照上述计算时中间每个格子会被计算到两次&lt;/li&gt;
&lt;li&gt;初末位置的格子仅会被计算到一次&lt;/li&gt;
&lt;li&gt;化简后可得格子数为&lt;script type=&quot;math/tex&quot;&gt;r+c-1&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暴力统计就能过了，复杂度比较玄学，大概是&lt;script type=&quot;math/tex&quot;&gt;O\left ( c*ans \right )&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;为一个不是很大常数&lt;del&gt;（我猜的）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;其实还有更有理有据的做法&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum _{d\mid n}\sum \left [r+c=d+1,gcd\left ( r,c \right )=1  \right ]= \frac{\sum _{d\mid n}\varphi\left ( d+1 \right )+1}{2}&lt;/script&gt;&lt;p&gt;每一对&lt;script type=&quot;math/tex&quot;&gt;\left ( r,c \right )&lt;/script&gt;都会被算到两次，但&lt;script type=&quot;math/tex&quot;&gt;\left ( n,n \right )&lt;/script&gt;只会被算到一次&lt;br&gt;复杂度&lt;script type=&quot;math/tex&quot;&gt;O\left ( N \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;代码为暴力统计&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[SCOI2005]骑士精神</title>
    <link href="http://yoursite.com/2018/08/11/SCOI2005-%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/"/>
    <id>http://yoursite.com/2018/08/11/SCOI2005-骑士精神/</id>
    <published>2018-08-11T07:09:16.000Z</published>
    <updated>2018-08-11T07:19:09.235Z</updated>
    
    <content type="html"><![CDATA[<p>每次移动空位而不是骑士</p><p>设当前搜到第<script type="math/tex">k</script>步，剩下<script type="math/tex">num</script>个骑士未回到位置<br>若<script type="math/tex">k+num>dep_{now}</script>，则返回<br><del>跑得飞快</del></p><p>其实还可以加点什么小剪枝<br>若当前和<script type="math/tex">\left ( x,y \right )</script>交换，则下次不换回去<br>既然直接搜能过<del>（实现起来有点小烦）</del>，就没加这个剪枝<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">5</span>,N=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> to[N][N]=&#123;&#123;<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'*'</span>,<span class="string">'1'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'1'</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>,<span class="string">'0'</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> dep,w[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'1'</span>&amp;&amp;ch!=<span class="string">'0'</span>&amp;&amp;ch!=<span class="string">'*'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> xx,<span class="keyword">int</span> yy,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k+num&gt;dep) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!num) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=xx+dx[i],y=yy+dy[i];</span><br><span class="line">        <span class="keyword">if</span> (x&gt;<span class="number">0</span>&amp;&amp;x&lt;=n&amp;&amp;y&gt;<span class="number">0</span>&amp;&amp;y&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nxt=num;</span><br><span class="line">            nxt+=w[x][y]==to[x][y];</span><br><span class="line">            nxt-=w[x][y]==to[xx][yy];</span><br><span class="line">            swap(w[x][y],w[xx][yy]);</span><br><span class="line">            <span class="keyword">if</span> (dfs(k+<span class="number">1</span>,x,y,nxt)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            swap(w[x][y],w[xx][yy]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>,f=<span class="number">0</span>,xx,yy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                w[i][j]=get();</span><br><span class="line">                <span class="keyword">if</span> (to[i][j]!=w[i][j]&amp;&amp;w[i][j]!=<span class="string">'*'</span>) num++;</span><br><span class="line">                <span class="keyword">if</span> (w[i][j]==<span class="string">'*'</span>) xx=i,yy=j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(dep=num;dep&lt;=<span class="number">15</span>&amp;&amp;!f;dep++)</span><br><span class="line">            <span class="keyword">if</span> (dfs(<span class="number">0</span>,xx,yy,num)) </span><br><span class="line">                f=<span class="number">1</span>,<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dep);</span><br><span class="line">        <span class="keyword">if</span> (!f) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次移动空位而不是骑士&lt;/p&gt;
&lt;p&gt;设当前搜到第&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;步，剩下&lt;script type=&quot;math/tex&quot;&gt;num&lt;/script&gt;个骑士未回到位置&lt;br&gt;若&lt;script type=&quot;math/tex&quot;&gt;k+num&gt;dep_{now}&lt;/script&gt;，则返回&lt;br&gt;&lt;del&gt;跑得飞快&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;其实还可以加点什么小剪枝&lt;br&gt;若当前和&lt;script type=&quot;math/tex&quot;&gt;\left ( x,y \right )&lt;/script&gt;交换，则下次不换回去&lt;br&gt;既然直接搜能过&lt;del&gt;（实现起来有点小烦）&lt;/del&gt;，就没加这个剪枝&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="搜索" scheme="http://yoursite.com/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="迭代加深" scheme="http://yoursite.com/tags/%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1/"/>
    
      <category term="A*" scheme="http://yoursite.com/tags/A/"/>
    
      <category term="IDA*" scheme="http://yoursite.com/tags/IDA/"/>
    
  </entry>
  
  <entry>
    <title>[NOI1999]生日蛋糕</title>
    <link href="http://yoursite.com/2018/08/11/NOI1999-%E7%94%9F%E6%97%A5%E8%9B%8B%E7%B3%95/"/>
    <id>http://yoursite.com/2018/08/11/NOI1999-生日蛋糕/</id>
    <published>2018-08-11T06:37:07.000Z</published>
    <updated>2018-08-11T07:06:42.522Z</updated>
    
    <content type="html"><![CDATA[<p>很综合的一道搜索题</p><p>从下往上搜<br>记<script type="math/tex">v\left [ k \right ]</script>为<em>1-k</em> 层最小体积，<script type="math/tex">s\left [ k \right ]</script>为<em>1-k</em> 层最小面积<br>记<script type="math/tex">V</script>为剩余体积，<script type="math/tex">S</script>为当前面积<br>对于第<script type="math/tex">k</script>层</p><script type="math/tex; mode=display">h_{k}\in \left [ k,min\left ( h_{k+1} -1,\frac{V-v\left [ k-1 \right ]}{k^{2}}\right ) \right ]</script><script type="math/tex; mode=display">r_{k}\in \left [  k,min\left ( r_{k+1}-1,\sqrt{\frac{\left ( V-v\left [ k-1 \right ] \right )}{h_{k}} }\right )\right ]</script><p>可行性剪枝</p><ul><li>若<script type="math/tex">V>v\left [ k \right ]</script>，则返回</li></ul><p>最优化剪枝</p><ul><li>若<script type="math/tex">S+s\left [ k \right ]>ans</script>，则返回</li><li>若<script type="math/tex">S+\frac{2V}{r_{k+1}}>ans</script>，则返回</li></ul><p>对于最后一种剪枝的证明</p><script type="math/tex; mode=display">\sum_{i=1}^{k}2r_{i}h_{i}>\frac{2}{r_{k+1}}\sum_{i=1}^{k}r_{i}^{2}h_{i}=\frac{2V}{r_{k+1}}</script><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>,N=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,v[N],s[N],ans=INF;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> V,<span class="keyword">int</span> k,<span class="keyword">int</span> H,<span class="keyword">int</span> R,<span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!V) ans=min(ans,S);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (V&lt;v[k]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (S+s[k]&gt;ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (S+<span class="number">2</span>*V/R&gt;ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=min(H<span class="number">-1</span>,(V-v[k<span class="number">-1</span>])/(k*k));h&gt;=k;h--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=min(R<span class="number">-1</span>,(<span class="keyword">int</span>)<span class="built_in">sqrt</span>((V-v[k<span class="number">-1</span>])/h));r&gt;=k;r--)</span><br><span class="line">            dfs(V-r*r*h,k<span class="number">-1</span>,h,r,S+<span class="number">2</span>*r*h+r*r*(k==m));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i]=v[i<span class="number">-1</span>]+i*i*i;</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+<span class="number">2</span>*i*i;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(n,m,INF,INF,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans==INF?<span class="number">0</span>:ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很综合的一道搜索题&lt;/p&gt;
&lt;p&gt;从下往上搜&lt;br&gt;记&lt;script type=&quot;math/tex&quot;&gt;v\left [ k \right ]&lt;/script&gt;为&lt;em&gt;1-k&lt;/em&gt; 层最小体积，&lt;script type=&quot;math/tex&quot;&gt;s\left [ k \right ]&lt;/script&gt;为&lt;em&gt;1-k&lt;/em&gt; 层最小面积&lt;br&gt;记&lt;script type=&quot;math/tex&quot;&gt;V&lt;/script&gt;为剩余体积，&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;为当前面积&lt;br&gt;对于第&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;层&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
h_{k}\in \left [ k,min\left ( h_{k+1} -1,\frac{V-v\left [ k-1 \right ]}{k^{2}}\right ) \right ]&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
r_{k}\in \left [  k,min\left ( r_{k+1}-1,\sqrt{\frac{\left ( V-v\left [ k-1 \right ] \right )}{h_{k}} }\right )\right ]&lt;/script&gt;&lt;p&gt;可行性剪枝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;V&gt;v\left [ k \right ]&lt;/script&gt;，则返回&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最优化剪枝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;S+s\left [ k \right ]&gt;ans&lt;/script&gt;，则返回&lt;/li&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;S+\frac{2V}{r_{k+1}}&gt;ans&lt;/script&gt;，则返回&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于最后一种剪枝的证明&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{k}2r_{i}h_{i}&gt;\frac{2}{r_{k+1}}\sum_{i=1}^{k}r_{i}^{2}h_{i}=\frac{2V}{r_{k+1}}&lt;/script&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[USACO08DEC]农场的万圣节</title>
    <link href="http://yoursite.com/2018/08/11/USACO08DEC-%E5%86%9C%E5%9C%BA%E7%9A%84%E4%B8%87%E5%9C%A3%E8%8A%82/"/>
    <id>http://yoursite.com/2018/08/11/USACO08DEC-农场的万圣节/</id>
    <published>2018-08-11T06:34:25.000Z</published>
    <updated>2018-08-11T06:36:34.747Z</updated>
    
    <content type="html"><![CDATA[<p>缩完点之后，求一遍每个点到终点的路径长即可<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> sz;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,idx[N],cnt=<span class="number">0</span>,sz[N],used[N];</span><br><span class="line"><span class="keyword">int</span> dfn[N],low[N],num=<span class="number">0</span>,inq[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],f[N];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[o]=low[o]=++num;</span><br><span class="line">    inq[o]=<span class="number">1</span>,S.push(o);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to);</span><br><span class="line">            low[o]=min(low[o],low[to]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (inq[to])</span><br><span class="line">            low[o]=min(low[o],dfn[to]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[o]==dfn[o])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x;cnt++;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            x=S.top();</span><br><span class="line">            idx[x]=cnt;</span><br><span class="line">            S.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">            t[cnt].sz++;</span><br><span class="line">        &#125;<span class="keyword">while</span> (x!=o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (used[o]) <span class="keyword">return</span>;</span><br><span class="line">    used[o]=<span class="number">1</span>;</span><br><span class="line">    sz[o]=t[o].sz;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;f[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=f[o][i];</span><br><span class="line">        dfs(to);</span><br><span class="line">        sz[o]+=sz[to];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) tarjan(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[u].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[u][i];</span><br><span class="line">            <span class="keyword">if</span> (idx[u]!=idx[v]) </span><br><span class="line">                f[idx[u]].push_back(idx[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">if</span> (!used[i]) dfs(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sz[idx[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缩完点之后，求一遍每个点到终点的路径长即可&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="缩点" scheme="http://yoursite.com/tags/%E7%BC%A9%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>[USACO06NOV]玉米田</title>
    <link href="http://yoursite.com/2018/08/11/USACO06NOV-%E7%8E%89%E7%B1%B3%E7%94%B0/"/>
    <id>http://yoursite.com/2018/08/11/USACO06NOV-玉米田/</id>
    <published>2018-08-11T06:24:47.000Z</published>
    <updated>2018-08-11T06:30:39.663Z</updated>
    
    <content type="html"><![CDATA[<p>用一下上次的配图<br><img src="/2018/08/11/USACO06NOV-玉米田/mtrx.jpg" alt="mtrx"></p><p>不为草地直接转移<br>若要种草则需要<script type="math/tex">s_{5},s_{1}</script>不为草地，且当前位置适合种草<br>需要注意的是，若当前位置为行首则不需要考虑<script type="math/tex">s_{1}</script><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">15</span>,mod=<span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,w[N][N],dp[<span class="number">2</span>][<span class="number">1</span>&lt;&lt;N],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) w[i][j]=read();</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,now=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++,now^=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);s++) dp[now][s]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);s++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[now][(s&lt;&lt;<span class="number">1</span>)&amp;r]=(dp[now][(s&lt;&lt;<span class="number">1</span>)&amp;r]+dp[now^<span class="number">1</span>][s])%mod;</span><br><span class="line">                <span class="keyword">if</span> (w[i][j]&amp;&amp;(s&gt;&gt;(m<span class="number">-1</span>))&amp;<span class="number">1</span>^<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">if</span> (s&amp;<span class="number">1</span>^<span class="number">1</span>||j==<span class="number">1</span>)</span><br><span class="line">                        dp[now][(s&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>&amp;r]=(dp[now][(s&lt;&lt;<span class="number">1</span>)|<span class="number">1</span>&amp;r]+dp[now^<span class="number">1</span>][s])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);s++)</span><br><span class="line">        ans=(ans+dp[(n*m)&amp;<span class="number">1</span>][s])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用一下上次的配图&lt;br&gt;&lt;img src=&quot;/2018/08/11/USACO06NOV-玉米田/mtrx.jpg&quot; alt=&quot;mtrx&quot;&gt;&lt;/p&gt;
&lt;p&gt;不为草地直接转移&lt;br&gt;若要种草则需要&lt;script type=&quot;math/tex&quot;&gt;s_{5},s_{1}&lt;/script&gt;不为草地，且当前位置适合种草&lt;br&gt;需要注意的是，若当前位置为行首则不需要考虑&lt;script type=&quot;math/tex&quot;&gt;s_{1}&lt;/script&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="轮廓线" scheme="http://yoursite.com/tags/%E8%BD%AE%E5%BB%93%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>[HAOI2006]均分数据</title>
    <link href="http://yoursite.com/2018/08/11/HAOI2006-%E5%9D%87%E5%88%86%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/08/11/HAOI2006-均分数据/</id>
    <published>2018-08-11T05:31:10.000Z</published>
    <updated>2018-08-11T06:20:55.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果贪心是一只兔子不断往目标跳去，那模拟退火就是一只喝醉的兔子不停乱跳</p></blockquote><p>SA 算法的基本思想是用马尔可夫链的形式进行随机搜索，它不仅接受改善目标函数的变化，而且还能保留一些不理想的变化。<br>对于改善目标函数的变化直接转移<br>对于不理想的变化，发生转移的概率为<script type="math/tex">P=e^{\frac{\Delta E}{kT_{0}}}</script><br>其中<script type="math/tex">T_{0}</script>为当前温度，<script type="math/tex">k</script>为玻尔兹曼常数，为了方便计算可设<script type="math/tex">k=1</script><br>需要设定的参数为初温<script type="math/tex">S</script>，末温<script type="math/tex">T</script>，和降温系数<script type="math/tex">dT</script></p><p>适当的温度至关重要</p><ul><li><p>若<script type="math/tex">T_{0}</script>过大<script type="math/tex">\left ( T\rightarrow \infty  \right )</script>，几乎所有转移都会被接受</p></li><li><p>若<script type="math/tex">T_{0}</script>过小<script type="math/tex">\left ( T\rightarrow0 \right )</script>，几乎所有不理想的转移均无法被接受，算法将会变为贪心，容易陷入局部最优解</p></li></ul><p>此外，优秀的状态产生函数和状态评估函数将会提高SA的效率<br><del>最好是能面向数据编程</del></p><p>放一张Wiki的动图<br><img src="/2018/08/11/HAOI2006-均分数据/SA.gif" alt="SA"></p><p>有了SA这题就好写了<br>状态生产函数采用随机交换两个元素<br>状态评估函数采用动态规划<br>设<script type="math/tex">dp\left [  i\right ]\left [ j \right ]</script>为前<em>i</em> 个分成<em>j</em> 组的最小<script type="math/tex">j\sigma ^{2}</script></p><script type="math/tex; mode=display">dp\left [  i\right ]\left [ j \right ]=min\left \{ dp\left [ k \right ] \left [ j-1 \right ]+\left ( \sum_{k+1}^{i}x-\bar{x} \right )^{2} \right \}</script><p><del>调参调了很久</del><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">25</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> st=<span class="number">1e8</span>,ed=<span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> dt=<span class="number">0.998</span>;</span><br><span class="line"><span class="keyword">double</span> ave,ans=INF,dp[N][N],s[N];</span><br><span class="line"><span class="keyword">int</span> n,m,w[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) dp[i][j]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=min(i,m);j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&lt;=i;k++)</span><br><span class="line">                dp[i][j]=min(dp[i][j],dp[k][j<span class="number">-1</span>]+<span class="built_in">pow</span>(s[i]-s[k]-ave));</span><br><span class="line">    <span class="keyword">return</span> dp[n][m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> u,<span class="keyword">double</span> v,<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u&gt;v||<span class="built_in">exp</span>((u-v)/t)*rand()&gt;rand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">(<span class="keyword">double</span> s,<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> now=calc();</span><br><span class="line">    ans=min(ans,now);</span><br><span class="line">    <span class="keyword">while</span> (s&gt;t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=rand()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> v=rand()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">continue</span>;</span><br><span class="line">        swap(w[u],w[v]);</span><br><span class="line">        <span class="keyword">double</span> nxt=calc();</span><br><span class="line">        ans=min(ans,nxt),s*=dt;</span><br><span class="line">        <span class="keyword">if</span> (!check(now,nxt,s)) </span><br><span class="line">            swap(w[u],w[v]);</span><br><span class="line">        <span class="keyword">else</span> now=nxt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="number">0</span>));</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ave+=w[i]=read();</span><br><span class="line">    ave/=m;</span><br><span class="line">    SA(st,ed);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,<span class="built_in">sqrt</span>(ans/m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果贪心是一只兔子不断往目标跳去，那模拟退火就是一只喝醉的兔子不停乱跳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SA 算法的基本思想是用马尔可夫链的形式进行随机搜索，它不仅接受改善目标函数的变化，而且还能保留一些不理想的变化。&lt;br&gt;对于改善目标函数的变化直接转移&lt;br&gt;对于不理想的变化，发生转移的概率为&lt;script type=&quot;math/tex&quot;&gt;P=e^{\frac{\Delta E}{kT_{0}}}&lt;/script&gt;&lt;br&gt;其中&lt;script type=&quot;math/tex&quot;&gt;T_{0}&lt;/script&gt;为当前温度，&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;为玻尔兹曼常数，为了方便计算可设&lt;script type=&quot;math/tex&quot;&gt;k=1&lt;/script&gt;&lt;br&gt;需要设定的参数为初温&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;，末温&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;，和降温系数&lt;script type=&quot;math/tex&quot;&gt;dT&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;适当的温度至关重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若&lt;script type=&quot;math/tex&quot;&gt;T_{0}&lt;/script&gt;过大&lt;script type=&quot;math/tex&quot;&gt;\left ( T\rightarrow \infty  \right )&lt;/script&gt;，几乎所有转移都会被接受&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若&lt;script type=&quot;math/tex&quot;&gt;T_{0}&lt;/script&gt;过小&lt;script type=&quot;math/tex&quot;&gt;\left ( T\rightarrow0 \right )&lt;/script&gt;，几乎所有不理想的转移均无法被接受，算法将会变为贪心，容易陷入局部最优解&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，优秀的状态产生函数和状态评估函数将会提高SA的效率&lt;br&gt;&lt;del&gt;最好是能面向数据编程&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;放一张Wiki的动图&lt;br&gt;&lt;img src=&quot;/2018/08/11/HAOI2006-均分数据/SA.gif&quot; alt=&quot;SA&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了SA这题就好写了&lt;br&gt;状态生产函数采用随机交换两个元素&lt;br&gt;状态评估函数采用动态规划&lt;br&gt;设&lt;script type=&quot;math/tex&quot;&gt;dp\left [  i\right ]\left [ j \right ]&lt;/script&gt;为前&lt;em&gt;i&lt;/em&gt; 个分成&lt;em&gt;j&lt;/em&gt; 组的最小&lt;script type=&quot;math/tex&quot;&gt;j\sigma ^{2}&lt;/script&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp\left [  i\right ]\left [ j \right ]=min\left \{ dp\left [ k \right ] \left [ j-1 \right ]+\left ( \sum_{k+1}^{i}x-\bar{x} \right )^{2} \right \}&lt;/script&gt;&lt;p&gt;&lt;del&gt;调参调了很久&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2004 虫食算</title>
    <link href="http://yoursite.com/2018/08/11/NOIP2004-%E8%99%AB%E9%A3%9F%E7%AE%97/"/>
    <id>http://yoursite.com/2018/08/11/NOIP2004-虫食算/</id>
    <published>2018-08-11T05:14:41.000Z</published>
    <updated>2018-08-11T06:21:58.228Z</updated>
    
    <content type="html"><![CDATA[<p>听说正解是高斯消元，<del>但我还是选择搜索</del></p><p>考虑从右往左搜<br>退出条件是搜完所有位置<br>剪枝好像只能可行性剪枝<br>复杂度还是很高</p><p>枚举的时候还能再优化一下</p><ul><li>三个数均未确定<ul><li>枚举其中两个计算第三个</li></ul></li><li>两个数未确定<ul><li>枚举一个计算一个</li></ul></li><li>一个数未确定<ul><li>直接计算</li></ul></li><li>均确定<ul><li>可行性剪枝</li></ul></li></ul><p>比较容易忽略的是回溯过程<br>不合法也要先回溯再退出</p><p><del>最慢点1000+ms，吸口氧就能过了</del><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> n,x[N],y[N],z[N],w[N],used[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (!(<span class="string">'A'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'Z'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,w[<span class="string">'A'</span>+i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        print();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f[x[t]]&amp;f[y[t]]&amp;f[z[t]])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((w[x[t]]+w[y[t]]+d)%n==w[z[t]])</span><br><span class="line">            dfs(t<span class="number">-1</span>,(w[x[t]]+w[y[t]]+d)/n);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fx=<span class="number">0</span>,i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>&amp;&amp;!fx;i--)   <span class="comment">//1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[x[t]]) fx=<span class="number">1</span>;      <span class="comment">//Already</span></span><br><span class="line">        <span class="keyword">if</span> (!fx&amp;&amp;f[y[t]]&amp;f[z[t]])       <span class="comment">//2&amp;3</span></span><br><span class="line">        &#123;</span><br><span class="line">            fx=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> val=(w[z[t]]+n-d-w[y[t]])%n;</span><br><span class="line">            <span class="keyword">if</span> (!used[val])</span><br><span class="line">            &#123;</span><br><span class="line">                f[x[t]]=used[w[x[t]]=val]=<span class="number">1</span>;</span><br><span class="line">                dfs(t<span class="number">-1</span>,(w[x[t]]+w[y[t]]+d)/n);</span><br><span class="line">                f[x[t]]=used[val]=<span class="number">0</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fx&amp;&amp;!used[i]) f[x[t]]=used[w[x[t]]=i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fy=<span class="number">0</span>,j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;!fy;j--) <span class="keyword">if</span> (f[x[t]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (f[y[t]]) fy=<span class="number">1</span>;      <span class="comment">//Already</span></span><br><span class="line">            <span class="keyword">if</span> (!fy&amp;&amp;f[z[t]])       <span class="comment">//1&amp;3</span></span><br><span class="line">            &#123;</span><br><span class="line">                fy=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> val=(w[z[t]]+n-d-w[x[t]])%n;</span><br><span class="line">                <span class="keyword">if</span> (!used[val]) </span><br><span class="line">                &#123;</span><br><span class="line">                    f[y[t]]=used[w[y[t]]=val]=<span class="number">1</span>;</span><br><span class="line">                    dfs(t<span class="number">-1</span>,(w[x[t]]+w[y[t]]+d)/n);</span><br><span class="line">                    f[y[t]]=used[val]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!fy&amp;&amp;!used[j]) f[y[t]]=used[w[y[t]]=j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (f[y[t]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> fz=<span class="number">0</span>,val=(w[x[t]]+w[y[t]]+d)%n;</span><br><span class="line">                <span class="keyword">if</span> (f[z[t]]) fz=<span class="number">1</span>;      <span class="comment">//Already</span></span><br><span class="line">                <span class="keyword">if</span> (!fz&amp;&amp;!used[val]) f[z[t]]=used[w[z[t]]=val]=<span class="number">1</span>; </span><br><span class="line">                <span class="keyword">if</span> ((w[x[t]]+w[y[t]]+d)%n==w[z[t]])</span><br><span class="line">                    <span class="keyword">if</span> (f[z[t]]) dfs(t<span class="number">-1</span>,(w[x[t]]+w[y[t]]+d)/n);</span><br><span class="line">                <span class="keyword">if</span> (!fz&amp;&amp;f[z[t]]) f[z[t]]=used[val]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!fy&amp;&amp;f[y[t]]) f[y[t]]=used[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fx&amp;&amp;f[x[t]]) f[x[t]]=used[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) x[i]=get();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) y[i]=get();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) z[i]=get();</span><br><span class="line">    dfs(n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听说正解是高斯消元，&lt;del&gt;但我还是选择搜索&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;考虑从右往左搜&lt;br&gt;退出条件是搜完所有位置&lt;br&gt;剪枝好像只能可行性剪枝&lt;br&gt;复杂度还是很高&lt;/p&gt;
&lt;p&gt;枚举的时候还能再优化一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三个数均未确定&lt;ul&gt;
&lt;li&gt;枚举其中两个计算第三个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两个数未确定&lt;ul&gt;
&lt;li&gt;枚举一个计算一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个数未确定&lt;ul&gt;
&lt;li&gt;直接计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;均确定&lt;ul&gt;
&lt;li&gt;可行性剪枝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较容易忽略的是回溯过程&lt;br&gt;不合法也要先回溯再退出&lt;/p&gt;
&lt;p&gt;&lt;del&gt;最慢点1000+ms，吸口氧就能过了&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[CQOI2014]数三角形</title>
    <link href="http://yoursite.com/2018/08/11/CQOI2014-%E6%95%B0%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>http://yoursite.com/2018/08/11/CQOI2014-数三角形/</id>
    <published>2018-08-11T04:57:02.000Z</published>
    <updated>2018-08-11T05:12:54.758Z</updated>
    
    <content type="html"><![CDATA[<p>正难则反<br>合法答案 = 所有三角形 - 水平（竖直）共线 - 斜共线</p><p>所有三角形<script type="math/tex">C_{\left (n+1  \right )\left (m+1  \right )}^{3}</script><br>水平（竖直）共线<script type="math/tex">C_{n+1}^{3}\left ( m+1 \right )+C_{m+1}^{3}(n+1)</script></p><p>斜共线不好直接求，考虑枚举向量<script type="math/tex">\left ( i,j \right )\ i\leq n+1,j\leq m+1</script><br>为了保证不重不漏，第一和第二个点分别为<script type="math/tex">\left ( i,j \right )</script>起点与终点，第三个点在<script type="math/tex">\left ( i,j \right )</script>中间<br>对于一组<script type="math/tex">\left ( i,j \right )</script>，共有<script type="math/tex">\left ( n-i+1 \right )\left ( m-j+1 \right )</script>种可能，其中第三个点还有<script type="math/tex">gcd\left ( i,j \right )-1</script>种可能<br>考虑到左右对称，答案还需要<script type="math/tex">*2</script><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL m,LL n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m&lt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    LL ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ret=ret*(m-i+<span class="number">1</span>)/i;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read()+<span class="number">1</span>,m=read()+<span class="number">1</span>;</span><br><span class="line">    ans=C(n*m,<span class="number">3</span>);</span><br><span class="line">    ans-=C(m,<span class="number">3</span>)*n+C(n,<span class="number">3</span>)*m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            ans-=(n-i)*(m-j)*(gcd(i,j)<span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正难则反&lt;br&gt;合法答案 = 所有三角形 - 水平（竖直）共线 - 斜共线&lt;/p&gt;
&lt;p&gt;所有三角形&lt;script type=&quot;math/tex&quot;&gt;C_{\left (n+1  \right )\left (m+1  \right )}^{3}&lt;/script&gt;&lt;br&gt;水平（竖直）共线&lt;script type=&quot;math/tex&quot;&gt;C_{n+1}^{3}\left ( m+1 \right )+C_{m+1}^{3}(n+1)&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;斜共线不好直接求，考虑枚举向量&lt;script type=&quot;math/tex&quot;&gt;\left ( i,j \right )\ i\leq n+1,j\leq m+1&lt;/script&gt;&lt;br&gt;为了保证不重不漏，第一和第二个点分别为&lt;script type=&quot;math/tex&quot;&gt;\left ( i,j \right )&lt;/script&gt;起点与终点，第三个点在&lt;script type=&quot;math/tex&quot;&gt;\left ( i,j \right )&lt;/script&gt;中间&lt;br&gt;对于一组&lt;script type=&quot;math/tex&quot;&gt;\left ( i,j \right )&lt;/script&gt;，共有&lt;script type=&quot;math/tex&quot;&gt;\left ( n-i+1 \right )\left ( m-j+1 \right )&lt;/script&gt;种可能，其中第三个点还有&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( i,j \right )-1&lt;/script&gt;种可能&lt;br&gt;考虑到左右对称，答案还需要&lt;script type=&quot;math/tex&quot;&gt;*2&lt;/script&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP2009]靶形数独</title>
    <link href="http://yoursite.com/2018/07/27/NOIP2009-%E9%9D%B6%E5%BD%A2%E6%95%B0%E7%8B%AC/"/>
    <id>http://yoursite.com/2018/07/27/NOIP2009-靶形数独/</id>
    <published>2018-07-27T12:40:20.000Z</published>
    <updated>2018-07-27T12:43:55.063Z</updated>
    
    <content type="html"><![CDATA[<p><em>x</em>，<em>y</em>，<em>z</em> 分别记录行，列和九宫格内已填数的集合<br>每次选可填数最少的格子进行扩展<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">9</span>,N=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> score[N][N]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">6</span>&#125;,</span><br><span class="line">                       &#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,cnt=<span class="number">0</span>,w[N][N],x[N],y[N],z[N],idx[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;<span class="keyword">return</span> (u<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+(v+<span class="number">2</span>)/<span class="number">3</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            ret=ret+w[i][j]*score[i][j];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt==n*n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,calc());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u,v,sz=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span> (!w[i][j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s=x[i]|y[j]|z[F(i,j)];</span><br><span class="line">            <span class="keyword">if</span> (idx[s]&lt;=idx[sz]) u=i,v=j,sz=s;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> ((sz&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>^<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w[u][v]=i,cnt++;</span><br><span class="line">            x[u]|=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            y[v]|=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            z[F(u,v)]|=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            dfs();</span><br><span class="line">            x[u]^=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            y[v]^=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            z[F(u,v)]^=<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>);</span><br><span class="line">            w[u][v]=<span class="number">0</span>,cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n);s++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            idx[s]+=(s&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>^<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span> (w[i][j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s=<span class="number">1</span>&lt;&lt;(w[i][j]<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((x[i]|y[j]|z[F(i,j)])&amp;s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            x[i]|=s,y[j]|=s;</span><br><span class="line">            z[F(i,j)]|=s,cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    dfs();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans?ans:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;x&lt;/em&gt;，&lt;em&gt;y&lt;/em&gt;，&lt;em&gt;z&lt;/em&gt; 分别记录行，列和九宫格内已填数的集合&lt;br&gt;每次选可填数最少的格子进行扩展&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[HAOI2008]硬币购物</title>
    <link href="http://yoursite.com/2018/07/27/HAOI2008-%E7%A1%AC%E5%B8%81%E8%B4%AD%E7%89%A9/"/>
    <id>http://yoursite.com/2018/07/27/HAOI2008-硬币购物/</id>
    <published>2018-07-27T12:26:32.000Z</published>
    <updated>2018-07-27T12:39:09.977Z</updated>
    
    <content type="html"><![CDATA[<p>没有限制就是一个完全背包<br>考虑仅有一个<em>c</em> 的硬币限制为<em>d</em> 枚<br>正难则反，易得<script type="math/tex">dp\left [ val \right ]</script>为全部方案数<br>而不合法的方案使用<em>c</em> 的个数肯定为<em>d+1</em>，<em>d+2</em>..<br>假设<em>c</em> 强制选<em>d+1</em> 个，则现在所有的方案均为不合法的，也就是<script type="math/tex">dp\left [ val-\left ( d+1 \right )*c \right ]</script><br>对于多个硬币，只需容斥即可<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>,n=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> c[N],w[N],f[N],val;</span><br><span class="line">LL dp[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N-c[i];j++)</span><br><span class="line">            dp[j]+=dp[j-c[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]=read();</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=(w[i]+<span class="number">1</span>)*c[i];</span><br><span class="line">        <span class="keyword">int</span> val=read();</span><br><span class="line">        LL ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;n);s++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span> ((s&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>) num+=f[i],t*=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (num&lt;=val) ans+=dp[val-num]*t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有限制就是一个完全背包&lt;br&gt;考虑仅有一个&lt;em&gt;c&lt;/em&gt; 的硬币限制为&lt;em&gt;d&lt;/em&gt; 枚&lt;br&gt;正难则反，易得&lt;script type=&quot;math/tex&quot;&gt;dp\left [ val \right ]&lt;/script&gt;为全部方案数&lt;br&gt;而不合法的方案使用&lt;em&gt;c&lt;/em&gt; 的个数肯定为&lt;em&gt;d+1&lt;/em&gt;，&lt;em&gt;d+2&lt;/em&gt;..&lt;br&gt;假设&lt;em&gt;c&lt;/em&gt; 强制选&lt;em&gt;d+1&lt;/em&gt; 个，则现在所有的方案均为不合法的，也就是&lt;script type=&quot;math/tex&quot;&gt;dp\left [ val-\left ( d+1 \right )*c \right ]&lt;/script&gt;&lt;br&gt;对于多个硬币，只需容斥即可&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="容斥" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>可持久化数组</title>
    <link href="http://yoursite.com/2018/07/27/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/07/27/可持久化数组/</id>
    <published>2018-07-27T12:24:04.000Z</published>
    <updated>2018-07-27T12:25:53.964Z</updated>
    
    <content type="html"><![CDATA[<p>用可持久化线段树实现<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000050</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,w[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Persistable_SGT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,val;&#125; t[N*<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">int</span> rt[N],cnt=<span class="number">0</span>,pos;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        o=++cnt;</span><br><span class="line">        <span class="keyword">if</span> (l==r) &#123;t[o].val=w[r];<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(t[o].l,l,mid);</span><br><span class="line">        build(t[o].r,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;o,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        t[o=++cnt]=t[pre];</span><br><span class="line">        <span class="keyword">if</span> (l==r) &#123;t[o].val=x;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos&lt;=mid) insert(t[o].l,t[pre].l,l,mid,x);</span><br><span class="line">        <span class="keyword">if</span> (pos&gt;mid) insert(t[o].r,t[pre].r,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> t[o].val;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos&lt;=mid) <span class="keyword">return</span> query(t[o].l,l,mid);</span><br><span class="line">        <span class="keyword">if</span> (pos&gt;mid) <span class="keyword">return</span> query(t[o].r,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Persistable_SGT;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">    build(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pre=read(),opt=read();</span><br><span class="line">        pos=read();</span><br><span class="line">        <span class="keyword">if</span> (opt==<span class="number">1</span>) insert(rt[i],rt[pre],<span class="number">1</span>,n,read());</span><br><span class="line">        <span class="keyword">if</span> (opt==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(rt[i]=rt[pre],<span class="number">1</span>,n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用可持久化线段树实现&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="可持久化" scheme="http://yoursite.com/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
</feed>
