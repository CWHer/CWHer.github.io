<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魍魉的小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T03:18:28.745Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CWHer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[国家集训队]数颜色</title>
    <link href="http://yoursite.com/2018/08/14/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F-%E6%95%B0%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2018/08/14/国家集训队-数颜色/</id>
    <published>2018-08-14T03:15:28.000Z</published>
    <updated>2018-08-14T03:18:28.745Z</updated>
    
    <content type="html"><![CDATA[<p>带修改的莫队<br>复杂度$O\left ( \sqrt[3]{n^{4}t} \right )$<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ql,qr,t,id;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">update</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,val;</span><br><span class="line">&#125; c[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N],w[N],ans[N],sum=<span class="number">0</span>,num,n,m;</span><br><span class="line"><span class="keyword">int</span> cntq,cntc;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (!((<span class="string">'a'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'z'</span>)||(<span class="string">'A'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'Z'</span>))) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++cnt[w[k]]==<span class="number">1</span>) sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(--cnt[w[k]]==<span class="number">0</span>) sum--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[o].pos&gt;=q[k].ql&amp;&amp;c[o].pos&lt;=q[k].qr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[w[c[o].pos]]==<span class="number">0</span>) sum--;</span><br><span class="line">        <span class="keyword">if</span> (++cnt[c[o].val]==<span class="number">1</span>) sum++; </span><br><span class="line">    &#125;</span><br><span class="line">    swap(c[o].val,w[c[o].pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(query a,query b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.ql/num!=b.ql/num) <span class="keyword">return</span> a.ql/num&lt;b.ql/num;</span><br><span class="line">    <span class="keyword">if</span> (a.qr/num!=b.qr/num) <span class="keyword">return</span> a.qr/num&lt;b.qr/num;</span><br><span class="line">    <span class="keyword">return</span> a.t&lt;b.t; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> opt=get();</span><br><span class="line">        <span class="keyword">if</span> (opt==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q[++cntq].t=cntc;</span><br><span class="line">            q[cntq].ql=read();</span><br><span class="line">            q[cntq].qr=read();</span><br><span class="line">            q[cntq].id=cntq;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c[++cntc].pos=read();</span><br><span class="line">            c[cntc].val=read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num=<span class="built_in">ceil</span>(<span class="built_in">exp</span>((<span class="built_in">log</span>(n)+<span class="built_in">log</span>(cntq))/<span class="number">3</span>));;</span><br><span class="line">    sort(q+<span class="number">1</span>,q+cntq+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ql=q[i].ql,qr=q[i].qr;</span><br><span class="line">        <span class="keyword">while</span> (L&lt;ql) del(L++);</span><br><span class="line">        <span class="keyword">while</span> (R&gt;qr) del(R--);</span><br><span class="line">        <span class="keyword">while</span> (L&gt;ql) add(--L);</span><br><span class="line">        <span class="keyword">while</span> (R&lt;qr) add(++R);</span><br><span class="line">        <span class="keyword">while</span> (now&lt;q[i].t) work(++now,i);</span><br><span class="line">        <span class="keyword">while</span> (now&gt;q[i].t) work(now--,i);</span><br><span class="line">        ans[q[i].id]=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cntq;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;带修改的莫队&lt;br&gt;复杂度$O\left ( \sqrt[3]{n^{4}t} \right )$&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="莫队" scheme="http://yoursite.com/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>[HNOI2004]树的计数</title>
    <link href="http://yoursite.com/2018/08/14/HNOI2004-%E6%A0%91%E7%9A%84%E8%AE%A1%E6%95%B0/"/>
    <id>http://yoursite.com/2018/08/14/HNOI2004-树的计数/</id>
    <published>2018-08-13T23:21:51.000Z</published>
    <updated>2018-08-14T00:20:34.710Z</updated>
    
    <content type="html"><![CDATA[<p><del>这题是一道结论题</del></p><p>首先引入$Prufer$序列<br><strong>定义</strong><br>$Prufer$序列是一种无根树的编码表示，对于一棵$n$个节点带编号的无根树，对应唯一长度为$n-2$的$Prufer$编码。</p><p> <strong>转化过程</strong></p><ul><li><p>树转$Prufer$序列</p><p>每次找到最小的叶子节点并删除，然后在序列中添加其相邻节点的编号，直至剩下两个节点<br>如下图<br><img src="/2018/08/14/HNOI2004-树的计数/tree.png" alt="tree"><br>其$Prufer$序列为$3,5,1,3$<br>转化过程用优先队列维护可以做到$O\left ( NlogN \right )$</p></li><li><p>$Prufer$序列转树</p><p>设点集$V=\left \{x\mid x\notin Prufer \right \}$<br>每次取出$Prufer$序列的$front$，将其与$V$中最小元素连边，并删除这两个元素<br>若$front$在之后序列中没有出现，则将其加入$V$<br>遍历完整个序列后，将$V$中剩下的两个元素连边<br>同样可以用优先队列做到$O\left ( NlogN \right )$</p></li></ul><p><strong>性质与结论</strong>  </p><ol><li><p>观察上述过程，不难得出$Prufer$序列与树一一对应<br>因此可以快速得出一张$n$个点的完全图有$n^{n-2}$棵生成树，即<script type="math/tex">Cayley</script>公式 </p></li><li><p>另外，不难发现$Prufer$序列中$x$的出现次数等于$d_{x}-1$，其中$d_{x}$为$x$的度数<br>因此当$n$个点的度数分别为$d_{1},d_{2}\dots d_{n}$时，共有$\frac{\left(n-2\right)!}{\prod \left ( d_{i}-1 \right )!}$种生成树</p></li><li><p>更一般的，当其中$x$个点度数已知，$y$个点度数未知时<br>记</p><script type="math/tex; mode=display">sum=\sum_{i=1}^{x}\left ( d_{i} -1\right )</script><p>首先考虑$x$个已知节点的方案<br>不难得出</p><script type="math/tex; mode=display">C_{n-2}^{sum}*\frac{sum!}{\prod_{i=1}^{x}\left ( d_{i}-1 \right )!}</script><p>然后是$y​$个未知节点<br>考虑到每个未填位置均有$y$种可能，共有<script type="math/tex">y^{n-2-sum}</script>种方案<br>根据乘法原理，总方案数为</p><script type="math/tex; mode=display">C_{n-2}^{sum}*\frac{sum!}{\prod_{i=1}^{x}\left ( d_{i}-1 \right )!}*y^{n-2-sum}</script></li></ol><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;这题是一道结论题&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;首先引入$Prufer$序列&lt;br&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;br&gt;$Prufer$序列是一种无根树的编码表示，对于一棵$n$个节点带编号的无根树，对应唯一长度为$n-2$的$Prufer$编码。&lt;/p&gt;

      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CodeChef Flooring</title>
    <link href="http://yoursite.com/2018/08/13/CodeChef-Flooring/"/>
    <id>http://yoursite.com/2018/08/13/CodeChef-Flooring/</id>
    <published>2018-08-13T13:57:14.000Z</published>
    <updated>2018-08-14T00:24:34.849Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意：</strong><br>求</p><script type="math/tex; mode=display">\left ( \sum_{i=1}^{n}i^{4}\left \lfloor \frac{n}{i} \right \rfloor \right )\% M</script><p>套路是很常见的分块求解<br>难点主要是<script type="math/tex">i^{4}</script>求和，$M$不一定为质数</p><p>首先有如下几个恒等式</p><script type="math/tex; mode=display">\sum_{i=1}^{n}i^{2}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )}{6}</script><script type="math/tex; mode=display">\sum_{i=1}^{n}i^{3}=\left ( \frac{n\left ( n+1 \right )}{2} \right )^{2}</script><script type="math/tex; mode=display">\sum_{i=1}^{n}i^{4}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )\left ( 3n^{2} +3n-1\right )}{30}</script><p>其中平方和公式推导如下<br>$\left ( n+1 \right )^{3}-n^{3}=3n^{2}+3n+1$<br>$n^{3}-\left ( n-1 \right )^{3}=3\left ( n-1 \right )^{2}+3\left ( n-1 \right )+1$<br>$\cdots$<br>累加得</p><script type="math/tex; mode=display">\left ( n+1 \right )^{3}-1^{3}=3*\sum_{i=1}^{n}i^{2}+3*\sum_{i=1}^{n}+n</script><p>化简可得</p><script type="math/tex; mode=display">\sum_{i=1}^{n}i^{2}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )}{6}</script><p>立方和，四次方和同理可得</p><p>然后是$M$不为质数的问题<br>有如下公式</p><script type="math/tex; mode=display">\frac{a}{b}\%c=\frac{a\%\left (bc  \right )}{b}</script><p><del>然而我以前一直都不知道</del><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL n,mod;</span><br><span class="line"><span class="function">LL <span class="title">sqr</span><span class="params">(LL x)</span></span>&#123;<span class="keyword">return</span> x*x%mod;&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    k%=mod*<span class="number">30</span>;</span><br><span class="line">    LL ret=k*(k+<span class="number">1</span>)%(mod*<span class="number">30</span>);</span><br><span class="line">    ret=ret*(<span class="number">2L</span>L*k+<span class="number">1</span>)%(mod*<span class="number">30</span>);</span><br><span class="line">    ret=ret*(<span class="number">3L</span>L*k*k%(mod*<span class="number">30</span>)+<span class="number">3L</span>L*k%(mod*<span class="number">30</span>)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret%(mod*<span class="number">30</span>)/<span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;mod);</span><br><span class="line">        LL sz=<span class="built_in">sqrt</span>(n),ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(LL i=<span class="number">1</span>;n/i&gt;sz;i++)</span><br><span class="line">            ans=(ans+sqr(sqr(i))*(n/i)%mod)%mod;</span><br><span class="line">        <span class="keyword">for</span>(LL i=sz;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            LL L=n/(i+<span class="number">1</span>)+<span class="number">1</span>,R=n/i;</span><br><span class="line">            LL val=(calc(R)-calc(L<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">            ans=(ans+val*i%mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ans%mod+mod)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;br&gt;求&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\left ( \sum_{i=1}^{n}i^{4}\left \lfloor \frac{n}{i} \right \rfloor \right )\% M&lt;/script&gt;&lt;p&gt;套路是很常见的分块求解&lt;br&gt;难点主要是&lt;script type=&quot;math/tex&quot;&gt;i^{4}&lt;/script&gt;求和，$M$不一定为质数&lt;/p&gt;
&lt;p&gt;首先有如下几个恒等式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}i^{2}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )}{6}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}i^{3}=\left ( \frac{n\left ( n+1 \right )}{2} \right )^{2}&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}i^{4}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )\left ( 3n^{2} +3n-1\right )}{30}&lt;/script&gt;&lt;p&gt;其中平方和公式推导如下&lt;br&gt;$\left ( n+1 \right )^{3}-n^{3}=3n^{2}+3n+1$&lt;br&gt;$n^{3}-\left ( n-1 \right )^{3}=3\left ( n-1 \right )^{2}+3\left ( n-1 \right )+1$&lt;br&gt;$\cdots$&lt;br&gt;累加得&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\left ( n+1 \right )^{3}-1^{3}=3*\sum_{i=1}^{n}i^{2}+3*\sum_{i=1}^{n}+n&lt;/script&gt;&lt;p&gt;化简可得&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}i^{2}=\frac{n\left ( n+1 \right )\left ( 2n+1 \right )}{6}&lt;/script&gt;&lt;p&gt;立方和，四次方和同理可得&lt;/p&gt;
&lt;p&gt;然后是$M$不为质数的问题&lt;br&gt;有如下公式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{a}{b}\%c=\frac{a\%\left (bc  \right )}{b}&lt;/script&gt;&lt;p&gt;&lt;del&gt;然而我以前一直都不知道&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="分块" scheme="http://yoursite.com/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>HDU4822 Tri-war</title>
    <link href="http://yoursite.com/2018/08/13/HDU4822-Tri-war/"/>
    <id>http://yoursite.com/2018/08/13/HDU4822-Tri-war/</id>
    <published>2018-08-13T02:11:12.000Z</published>
    <updated>2018-08-13T03:18:14.148Z</updated>
    
    <content type="html"><![CDATA[<p><del>三色**</del></p><p>首先考虑两种颜色，分别在<em>u</em>，<em>v</em><br>由于路径唯一，两种颜色还是比较好求的<br>只要取$\left ( u,v \right )$路径中点，将树分为两半即可，每个点分别控制一半<br>如图<br><img src="/2018/08/13/HDU4822-Tri-war/double.jpg" alt="double"></p><p>现在有三种颜色，也就是求交集<br>求交集可以用线段树，先把树转化为<em>dfs</em> 序，然后第一次区间加，第二次区间询问</p><p><del>不知道为什么写挂了，于是写了个分类讨论</del><br>记录一个二元组$\left ( opt,x \right )$，$x$为子树根节点，$opt=1$表示可选，<em>0</em> 则表示不可选<br>观察到两棵子树之间只有两种关系，要么不相交，要么一棵树是另一棵树的子树<br>判断是否相交用$LCA$即可<br>然后分类讨论，设两棵子树分别以$A$，$B$为根，且$A_{sz}\leq B_{sz}$</p><ul><li>均可选，若两棵子树不相交则为<em>0</em> ，否则为$A_{sz}$</li><li>均不可选，若两棵子树不相交则为$n-A_{sz}-B_{sz}$，否则为$B_{sz}$</li><li><p>一个可选，一个不可选</p><p>设$A_{opt}=1$，$B_{opt}=0$，这里对$sz$没有要求</p><ul><li>$LCA\left ( A,B \right )=A$，答案为$A_{sz}-B_{sz}$</li><li>$LCA\left ( A,B \right )=B$，答案为<em>0</em> ，但事实上并不会出现这种情况</li><li>否则为$A_{sz}$</li></ul></li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">50</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> opt,x;&#125;;</span><br><span class="line"><span class="keyword">int</span> fa[N][<span class="number">25</span>],<span class="built_in">log</span>[N],sz[N],dep[N],n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[o]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">log</span>[dep[o]];i++)</span><br><span class="line">        fa[o][i]=fa[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            fa[to][<span class="number">0</span>]=o;</span><br><span class="line">            dfs(to);</span><br><span class="line">            sz[o]+=sz[to];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[k];i++)</span><br><span class="line">        <span class="keyword">if</span> ((k&gt;&gt;i)&amp;<span class="number">1</span>) x=fa[x][i];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    u=update(u,dep[u]-dep[v]);</span><br><span class="line">    <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i]!=fa[v][i])</span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=dep[u]+dep[v]-dep[pre]*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&gt;=dep[v])</span><br><span class="line">        <span class="keyword">return</span> (node)&#123;<span class="number">1</span>,update(u,(len<span class="number">-1</span>)/<span class="number">2</span>)&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (node)&#123;<span class="number">0</span>,update(v,len/<span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node A=find(x,u,LCA(x,u));</span><br><span class="line">    node B=find(x,v,LCA(x,v));</span><br><span class="line">    <span class="keyword">if</span> (A.opt&amp;&amp;B.opt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[A.x]&lt;dep[B.x]) swap(A,B);</span><br><span class="line">        <span class="keyword">if</span> (LCA(A.x,B.x)!=B.x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sz[A.x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!A.opt&amp;&amp;!B.opt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[A.x]&lt;dep[B.x]) swap(A,B);</span><br><span class="line">        <span class="keyword">if</span> (LCA(A.x,B.x)!=B.x)</span><br><span class="line">            <span class="keyword">return</span> n-sz[A.x]-sz[B.x];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> n-sz[B.x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!A.opt) swap(A,B);</span><br><span class="line">        <span class="keyword">int</span> pre=LCA(A.x,B.x);</span><br><span class="line">        <span class="keyword">if</span> (pre==A.x) <span class="keyword">return</span> sz[A.x]-sz[B.x];</span><br><span class="line">        <span class="keyword">return</span> sz[A.x]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">log</span>[i]=<span class="built_in">log</span>[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;<span class="built_in">log</span>[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            e[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">        m=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a=read(),b=read(),c=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,calc(a,b,c));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,calc(b,a,c));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,calc(c,a,b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;三色**&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;首先考虑两种颜色，分别在&lt;em&gt;u&lt;/em&gt;，&lt;em&gt;v&lt;/em&gt;&lt;br&gt;由于路径唯一，两种颜色还是比较好求的&lt;br&gt;只要取$\left ( u,v \right )$路径中点，将树分为两半即可，每个点分别控制一半&lt;br&gt;如图&lt;br&gt;&lt;img src=&quot;/2018/08/13/HDU4822-Tri-war/double.jpg&quot; alt=&quot;double&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在有三种颜色，也就是求交集&lt;br&gt;求交集可以用线段树，先把树转化为&lt;em&gt;dfs&lt;/em&gt; 序，然后第一次区间加，第二次区间询问&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不知道为什么写挂了，于是写了个分类讨论&lt;/del&gt;&lt;br&gt;记录一个二元组$\left ( opt,x \right )$，$x$为子树根节点，$opt=1$表示可选，&lt;em&gt;0&lt;/em&gt; 则表示不可选&lt;br&gt;观察到两棵子树之间只有两种关系，要么不相交，要么一棵树是另一棵树的子树&lt;br&gt;判断是否相交用$LCA$即可&lt;br&gt;然后分类讨论，设两棵子树分别以$A$，$B$为根，且$A_{sz}\leq B_{sz}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;均可选，若两棵子树不相交则为&lt;em&gt;0&lt;/em&gt; ，否则为$A_{sz}$&lt;/li&gt;
&lt;li&gt;均不可选，若两棵子树不相交则为$n-A_{sz}-B_{sz}$，否则为$B_{sz}$&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个可选，一个不可选&lt;/p&gt;
&lt;p&gt;设$A_{opt}=1$，$B_{opt}=0$，这里对$sz$没有要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$LCA\left ( A,B \right )=A$，答案为$A_{sz}-B_{sz}$&lt;/li&gt;
&lt;li&gt;$LCA\left ( A,B \right )=B$，答案为&lt;em&gt;0&lt;/em&gt; ，但事实上并不会出现这种情况&lt;/li&gt;
&lt;li&gt;否则为$A_{sz}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ZOJ3649 Social Net</title>
    <link href="http://yoursite.com/2018/08/13/ZOJ3649-Social-Net/"/>
    <id>http://yoursite.com/2018/08/13/ZOJ3649-Social-Net/</id>
    <published>2018-08-13T00:03:10.000Z</published>
    <updated>2018-08-13T00:30:14.554Z</updated>
    
    <content type="html"><![CDATA[<p>乍一看以为裸的树剖<br>后来发现事情没那么简单，$c_{k}-c_{j}$是有顺序的，$j\leq k$</p><p>第一问很简单<br>第二问维护一大堆倍增数组</p><p>首先$fa$不用说，然后是$mx$，$mn$记录往上走的最大（最小）值<br>还需要$f$记录上面节点-下面节点的最大值，$g$记录下面节点-上面节点的最大值</p><p>预处理</p><script type="math/tex; mode=display">mx\left [ x \right ]\left [ i \right ]=max\left ( mx\left [ x \right ]\left [ i-1 \right ] ,mx\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ]\right )</script><script type="math/tex; mode=display">mn\left [ x \right ]\left [ i \right ]=min\left ( mn\left [ x \right ]\left [ i-1 \right ] ,mn\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ]\right )</script><script type="math/tex; mode=display">f\left [ x \right ]\left [ i \right ]=max\left ( f\left [ x \right ]\left [ i-1 \right ] ,f\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ],mx\left [ fa\left [  x\right ] \left [ i-1 \right ] \right ]\left [ i-1 \right ]-mn\left [ x \right ]\left [ i-1 \right ]\right )</script><script type="math/tex; mode=display">g\left [ x \right ]\left [ i \right ]=max\left ( g\left [ x \right ]\left [ i-1 \right ] ,g\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ],mx\left [ x \right ]\left [ i-1 \right ]-mn\left [ fa\left [  x\right ] \left [ i-1 \right ] \right ]\left [ i-1 \right ]\right )</script><p>有了这些倍增数组之后就好求解了<br>记$LCA\left ( u,v \right )$为$pre$，将$\left ( u,v \right )$拆为$\left ( u,pre \right )$，$\left ( pre,v \right )$两条链<br>首先$max\left ( pre,v \right )-min\left (  u,pre\right )$肯定合法</p><p>然后考虑怎么求$\left ( u,pre \right )$的答案<br>设在倍增时已跳到$x$，用一个$num$记录<script type="math/tex">\left ( u,x \right )</script>的最小值<br>则下一次跳跃时</p><script type="math/tex; mode=display">ans=max\left \{ f\left [ x \right ] \left [ i \right ],mx\left [ x \right ]\left [ i \right ]-num\right \}</script><p>之后更新$num$</p><script type="math/tex; mode=display">num=min\left \{ mn\left [ x \right ]\left [ i \right ] \right \}</script><p>同理可求$\left ( pre,v \right )$的答案，用$num$记录最大值即可<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50050</span>,rt=<span class="number">1</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> u,v,val;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,m,w[N],f[N],sum;</span><br><span class="line"><span class="keyword">int</span> fa[N][<span class="number">25</span>],dep[N],<span class="built_in">log</span>[N];</span><br><span class="line"><span class="keyword">int</span> mx[N][<span class="number">25</span>],mn[N][<span class="number">25</span>],dp[<span class="number">2</span>][N][<span class="number">25</span>];   <span class="comment">//max&#123;pre-son&#125;   max&#123;son-pre&#125;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span>&#123;<span class="keyword">return</span> a.val&gt;b.val;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x]==x?x:f[x]=find(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;f[find(u)]=find(v);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">log</span>[dep[o]];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[o][i]=fa[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        mx[o][i]=max(mx[o][i<span class="number">-1</span>],mx[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        mn[o][i]=min(mn[o][i<span class="number">-1</span>],mn[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        dp[<span class="number">0</span>][o][i]=max(dp[<span class="number">0</span>][o][i<span class="number">-1</span>],mx[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]-mn[o][i<span class="number">-1</span>]);</span><br><span class="line">        dp[<span class="number">0</span>][o][i]=max(dp[<span class="number">0</span>][o][i],dp[<span class="number">0</span>][fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][o][i]=max(dp[<span class="number">1</span>][o][i<span class="number">-1</span>],mx[o][i<span class="number">-1</span>]-mn[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][o][i]=max(dp[<span class="number">1</span>][o][i],dp[<span class="number">1</span>][fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            fa[to][<span class="number">0</span>]=o;</span><br><span class="line">            mx[to][<span class="number">0</span>]=max(w[o],w[to]);</span><br><span class="line">            mn[to][<span class="number">0</span>]=min(w[o],w[to]);</span><br><span class="line">            dp[<span class="number">0</span>][to][<span class="number">0</span>]=w[o]-w[to];</span><br><span class="line">            dp[<span class="number">1</span>][to][<span class="number">0</span>]=w[to]-w[o];</span><br><span class="line">            dfs(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i]!=fa[v][i])</span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MAX</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">            ret=max(ret,mx[u][i]),u=fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MIN</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=INF;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">            ret=min(ret,mn[u][i]),u=fa[u][i];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>,num=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            ret=max(ret,dp[<span class="number">0</span>][u][i]);</span><br><span class="line">            ret=max(ret,mx[u][i]-num);</span><br><span class="line">            num=min(num,mn[u][i]);</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            ret=max(ret,dp[<span class="number">1</span>][u][i]);</span><br><span class="line">            ret=max(ret,num-mn[u][i]);</span><br><span class="line">            num=max(num,mx[u][i]);</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top=LCA(u,v);</span><br><span class="line">    <span class="keyword">int</span> ret=MAX(v,top)-MIN(u,top);</span><br><span class="line">    ret=max(ret,pre(u,top));</span><br><span class="line">    ret=max(ret,nxt(v,top));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">log</span>[i]=<span class="built_in">log</span>[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;<span class="built_in">log</span>[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        m=read(),sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            t[i]=(edge)&#123;u,v,read()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(t+<span class="number">1</span>,t+m+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=t[i].u,v=t[i].v;</span><br><span class="line">            <span class="keyword">if</span> (find(u)!=find(v))</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=t[i].val;</span><br><span class="line">                e[u].push_back(v);</span><br><span class="line">                e[v].push_back(u);</span><br><span class="line">                unite(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="built_in">memset</span>(mx,<span class="number">0</span>,<span class="keyword">sizeof</span>(mx));</span><br><span class="line">        <span class="built_in">memset</span>(mn,<span class="number">63</span>,<span class="keyword">sizeof</span>(mn));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">        <span class="keyword">int</span> T=read();</span><br><span class="line">        <span class="keyword">while</span> (T--) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,calc(u,v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;乍一看以为裸的树剖&lt;br&gt;后来发现事情没那么简单，$c_{k}-c_{j}$是有顺序的，$j\leq k$&lt;/p&gt;
&lt;p&gt;第一问很简单&lt;br&gt;第二问维护一大堆倍增数组&lt;/p&gt;
&lt;p&gt;首先$fa$不用说，然后是$mx$，$mn$记录往上走的最大（最小）值&lt;br&gt;还需要$f$记录上面节点-下面节点的最大值，$g$记录下面节点-上面节点的最大值&lt;/p&gt;
&lt;p&gt;预处理&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
mx\left [ x \right ]\left [ i \right ]=max\left ( mx\left [ x \right ]\left [ i-1 \right ] ,mx\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ]\right )&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
mn\left [ x \right ]\left [ i \right ]=min\left ( mn\left [ x \right ]\left [ i-1 \right ] ,mn\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ]\right )&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ x \right ]\left [ i \right ]=max\left ( f\left [ x \right ]\left [ i-1 \right ] ,f\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ],mx\left [ fa\left [  x\right ] \left [ i-1 \right ] \right ]\left [ i-1 \right ]-mn\left [ x \right ]\left [ i-1 \right ]\right )&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
g\left [ x \right ]\left [ i \right ]=max\left ( g\left [ x \right ]\left [ i-1 \right ] ,g\left [fa\left [  x\right ] \left [ i-1 \right ]\right ]\left [ i-1 \right ],mx\left [ x \right ]\left [ i-1 \right ]-mn\left [ fa\left [  x\right ] \left [ i-1 \right ] \right ]\left [ i-1 \right ]\right )&lt;/script&gt;&lt;p&gt;有了这些倍增数组之后就好求解了&lt;br&gt;记$LCA\left ( u,v \right )$为$pre$，将$\left ( u,v \right )$拆为$\left ( u,pre \right )$，$\left ( pre,v \right )$两条链&lt;br&gt;首先$max\left ( pre,v \right )-min\left (  u,pre\right )$肯定合法&lt;/p&gt;
&lt;p&gt;然后考虑怎么求$\left ( u,pre \right )$的答案&lt;br&gt;设在倍增时已跳到$x$，用一个$num$记录&lt;script type=&quot;math/tex&quot;&gt;\left ( u,x \right )&lt;/script&gt;的最小值&lt;br&gt;则下一次跳跃时&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
ans=max\left \{ f\left [ x \right ] \left [ i \right ],mx\left [ x \right ]\left [ i \right ]-num\right \}&lt;/script&gt;&lt;p&gt;之后更新$num$&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
num=min\left \{ mn\left [ x \right ]\left [ i \right ] \right \}&lt;/script&gt;&lt;p&gt;同理可求$\left ( pre,v \right )$的答案，用$num$记录最大值即可&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>HDU4582 DFS spanning tree</title>
    <link href="http://yoursite.com/2018/08/13/HDU4582-DFS-spanning-tree/"/>
    <id>http://yoursite.com/2018/08/13/HDU4582-DFS-spanning-tree/</id>
    <published>2018-08-12T23:39:56.000Z</published>
    <updated>2018-08-12T23:56:54.003Z</updated>
    
    <content type="html"><![CDATA[<p>如果问题是在一个区间上的，那就成了一个经典的贪心问题<br>将所有区间按照右端点升序排序之后，每个未满足的区间尽可能向右染即可</p><p>在树上也可以贪心<br>将所有链按父节点深度降序排序之后，每条未满足的链尽可能往高处染</p><ul><li>因为是按照父节点深度降序，如下图，在处理红链时不可能出现未处理的蓝链<br><img src="/2018/08/13/HDU4582-DFS-spanning-tree/tree.jpg" alt="tree"></li><li>对于每条未满足的链，显然染的越高能覆盖的就越多</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> u,v;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,m,dep[N],fa[N],used[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            fa[to]=o;</span><br><span class="line">            dfs(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[a.u]==dep[b.u]) <span class="keyword">return</span> dep[a.v]&gt;dep[b.v];</span><br><span class="line">    <span class="keyword">return</span> dep[a.u]&gt;dep[b.u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=t[k].v;</span><br><span class="line">    <span class="keyword">for</span>(;fa[x]!=t[k].u;x=fa[x])</span><br><span class="line">        <span class="keyword">if</span> (used[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (used[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> used[x]=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp;n&amp;&amp;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            e[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            <span class="keyword">if</span> (dep[u]&gt;dep[v]) swap(u,v);</span><br><span class="line">            t[i-n+<span class="number">1</span>].u=u;</span><br><span class="line">            t[i-n+<span class="number">1</span>].v=v;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(t+<span class="number">1</span>,t+m-n+<span class="number">2</span>,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (check(i-n+<span class="number">1</span>)) ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果问题是在一个区间上的，那就成了一个经典的贪心问题&lt;br&gt;将所有区间按照右端点升序排序之后，每个未满足的区间尽可能向右染即可&lt;/p&gt;
&lt;p&gt;在树上也可以贪心&lt;br&gt;将所有链按父节点深度降序排序之后，每条未满足的链尽可能往高处染&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为是按照父节点深度降序，如下图，在处理红链时不可能出现未处理的蓝链&lt;br&gt;&lt;img src=&quot;/2018/08/13/HDU4582-DFS-spanning-tree/tree.jpg&quot; alt=&quot;tree&quot;&gt;&lt;/li&gt;
&lt;li&gt;对于每条未满足的链，显然染的越高能覆盖的就越多&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-813C The Tag Game</title>
    <link href="http://yoursite.com/2018/08/13/CodeForces-813C/"/>
    <id>http://yoursite.com/2018/08/13/CodeForces-813C/</id>
    <published>2018-08-12T23:24:47.000Z</published>
    <updated>2018-08-12T23:36:35.080Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意：</strong><br>给出一棵以<em>1</em> 为根的树<br>Alice在<em>1</em>，Bob在<em>x</em><br>两人轮流操作，Bob先走<br>当两人相遇时游戏结束<br>Bob希望相遇越晚越好，Alice希望相遇越早越好<br>问游戏最多能进行几轮</p><p>观察到Bob一定在Alice的子树内<br>因此Alice不停向Bob移动即可</p><p>Bob则有两种选择</p><ul><li>在当前点往深度最深的点走</li><li>先往上走几步，再往深度最深的点走</li></ul><p>考虑枚举终点<em>y</em>，记<em>pre</em> 为$LCA\left ( x,y \right )$<br>当且仅当$dep\left [ pre \right ]-dep\left [ rt \right ]&gt;dep\left [ x \right ]-dep\left [ pre \right ]$，Bob可以走到<em>y</em><br>且终点在<em>y</em> 时，最多能进行$2*\left ( dep\left [ y \right ]-dep\left [ rt \right ] \right )$轮<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">log</span>[N],fa[N][<span class="number">25</span>],dep[N],n,x,ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">log</span>[dep[o]];i++)</span><br><span class="line">        fa[o][i]=fa[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            fa[to][<span class="number">0</span>]=o;</span><br><span class="line">            dfs(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>)</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i]!=fa[v][i])</span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),x=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </span><br><span class="line">        <span class="built_in">log</span>[i]=<span class="built_in">log</span>[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;<span class="built_in">log</span>[i<span class="number">-1</span>]==i);</span><br><span class="line">    dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pre=LCA(i,x);</span><br><span class="line">        <span class="keyword">if</span> (dep[pre]-dep[rt]&gt;dep[x]-dep[pre]) ans=max(ans,dep[i]-dep[rt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;br&gt;给出一棵以&lt;em&gt;1&lt;/em&gt; 为根的树&lt;br&gt;Alice在&lt;em&gt;1&lt;/em&gt;，Bob在&lt;em&gt;x&lt;/em&gt;&lt;br&gt;两人轮流操作，Bob先走&lt;br&gt;当两人相遇时游戏结束&lt;br&gt;Bob希望相遇越晚越好，Alice希望相遇越早越好&lt;br&gt;问游戏最多能进行几轮&lt;/p&gt;
&lt;p&gt;观察到Bob一定在Alice的子树内&lt;br&gt;因此Alice不停向Bob移动即可&lt;/p&gt;
&lt;p&gt;Bob则有两种选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在当前点往深度最深的点走&lt;/li&gt;
&lt;li&gt;先往上走几步，再往深度最深的点走&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑枚举终点&lt;em&gt;y&lt;/em&gt;，记&lt;em&gt;pre&lt;/em&gt; 为$LCA\left ( x,y \right )$&lt;br&gt;当且仅当$dep\left [ pre \right ]-dep\left [ rt \right ]&amp;gt;dep\left [ x \right ]-dep\left [ pre \right ]$，Bob可以走到&lt;em&gt;y&lt;/em&gt;&lt;br&gt;且终点在&lt;em&gt;y&lt;/em&gt; 时，最多能进行$2*\left ( dep\left [ y \right ]-dep\left [ rt \right ] \right )$轮&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-294E Shaass the Great</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-294E/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-294E/</id>
    <published>2018-08-12T12:08:49.000Z</published>
    <updated>2018-08-12T12:57:39.952Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意：</strong><br>给出一棵<em>n</em> 个节点树<br>去掉其中一条边，再重新加入一条长度相同的边<br>问新树中任意两点之间距离的总和最小是多少 </p><p>原树去掉一条边之后变为两棵树，分别记为<em>A</em>，<em>B</em>，它们的节点个数分别为$A_{sz}$，$B_{sz}$<br>设去掉边长度为<em>d</em>，新连接的两点分别为<em>u</em>，<em>v</em><br>记<em>A</em> 中所有点到<em>u</em> 距离之和为$S_{u}$，同理$S_{v}$<br>记<em>A</em> 中任意两点的距离之和为$C_{A}$，同理$C_{B}$</p><p>新树中任意两点的距离和分两部分考虑</p><ul><li>在<em>A</em>，<em>B</em> 树内，即$C_{A}+C_{B}$</li><li><p>在两棵树之间</p><p>例如$x-u-v-y$，其中<em>x</em> 为<em>A</em> 中的节点，<em>y</em> 为<em>B</em> 中的节点<br>将这样的路径分三部分考虑</p><ul><li>首先是$u-v$，不难发现共经过$A_{sz}*B_{sz}$次</li><li>然后是$x-u$，每个$x-u$都会经过$B_{sz}$次</li><li>同理$v-y$</li></ul></li></ul><p>全部加起来就是</p><script type="math/tex; mode=display">C_{A}+C_{B}+d*A_{sz}*B_{sz}+S_{u}*B_{sz}+S_{v}*A_{sz}</script><p>观察到$C_{A},C_{B},d,A_{sz},B_{sz}$与$u,v$无关<br>因此只需找$S_{u},S_{v}$最小的$u,v$</p><p>关于$S$的计算分为两个部分，以<em>A</em> 树为例</p><ul><li><p>第一遍<em>dfs</em> 求出每个节点<em>x</em> 的子树大小和子树中节点到<em>x</em> 的距离和</p><script type="math/tex; mode=display">S_{x}+=S_{x_{son}}+val_{x-x_{son}}*sz_{x_{son}}</script></li><li><p>第二遍<em>dfs</em> </p><script type="math/tex; mode=display">S_{x_{son}}=S_{x}+val_{x-x_{son}}*\left (A_{sz}-sz_{x_{son}}  \right )-val_{x-x_{son}}*sz_{x_{son}}</script><p>​    就是把中心点从<em>x</em> 移到$x_{son}$，$\left (A_{sz}-sz_{x_{son}}  \right )$多经过一条边，$sz_{x_{son}}$少经过一条边</p></li></ul><p>有了$S$，$C$就好计算了</p><script type="math/tex; mode=display">C_{A}=\frac{\sum _{x \in A} S_{x}}{2}</script><p>每条边$x-y$，会在<em>x</em>，<em>y</em> 各计算一次<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5050</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> u,v,val;&#125;t[N];</span><br><span class="line">LL sz[N],c[N],ans=INF;<span class="comment">//c[x]   所有点到x的sum</span></span><br><span class="line">LL s1,s2,r1,r2,n,size;<span class="comment">//sum&#123;Any 2&#125;   min&#123;Any c[x]&#125;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[o]=<span class="number">1</span>,c[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(to,o);</span><br><span class="line">            sz[o]+=sz[to];</span><br><span class="line">            c[o]+=c[to]+sz[to]*g[o][i];    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> fa,LL &amp;sum,LL &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum+=c[o],x=min(x,c[o]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=fa)</span><br><span class="line">        &#123;</span><br><span class="line">            c[to]=c[o]+(size-sz[to]*<span class="number">2</span>)*g[o][i];</span><br><span class="line">            calc(to,o,sum,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">int</span> val=read();</span><br><span class="line">        t[i]=(edge)&#123;u,v,val&#125;;</span><br><span class="line">        add(u,v,val);</span><br><span class="line">        add(v,u,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r1=r2=INF,s1=s2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> u=t[i].u,v=t[i].v;</span><br><span class="line">        dfs(u,v),size=sz[u];</span><br><span class="line">        calc(u,v,s1,r1),s1/=<span class="number">2</span>;</span><br><span class="line">        dfs(v,u),size=sz[v];</span><br><span class="line">        calc(v,u,s2,r2),s2/=<span class="number">2</span>;</span><br><span class="line">        ans=min(ans,sz[u]*sz[v]*t[i].val+s1+s2+r1*sz[v]+r2*sz[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;br&gt;给出一棵&lt;em&gt;n&lt;/em&gt; 个节点树&lt;br&gt;去掉其中一条边，再重新加入一条长度相同的边&lt;br&gt;问新树中任意两点之间距离的总和最小是多少 &lt;/p&gt;
&lt;p&gt;原树去掉一条边之后变为两棵树，分别记为&lt;em&gt;A&lt;/em&gt;，&lt;em&gt;B&lt;/em&gt;，它们的节点个数分别为$A_{sz}$，$B_{sz}$&lt;br&gt;设去掉边长度为&lt;em&gt;d&lt;/em&gt;，新连接的两点分别为&lt;em&gt;u&lt;/em&gt;，&lt;em&gt;v&lt;/em&gt;&lt;br&gt;记&lt;em&gt;A&lt;/em&gt; 中所有点到&lt;em&gt;u&lt;/em&gt; 距离之和为$S_{u}$，同理$S_{v}$&lt;br&gt;记&lt;em&gt;A&lt;/em&gt; 中任意两点的距离之和为$C_{A}$，同理$C_{B}$&lt;/p&gt;
&lt;p&gt;新树中任意两点的距离和分两部分考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;em&gt;A&lt;/em&gt;，&lt;em&gt;B&lt;/em&gt; 树内，即$C_{A}+C_{B}$&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在两棵树之间&lt;/p&gt;
&lt;p&gt;例如$x-u-v-y$，其中&lt;em&gt;x&lt;/em&gt; 为&lt;em&gt;A&lt;/em&gt; 中的节点，&lt;em&gt;y&lt;/em&gt; 为&lt;em&gt;B&lt;/em&gt; 中的节点&lt;br&gt;将这样的路径分三部分考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先是$u-v$，不难发现共经过$A_{sz}*B_{sz}$次&lt;/li&gt;
&lt;li&gt;然后是$x-u$，每个$x-u$都会经过$B_{sz}$次&lt;/li&gt;
&lt;li&gt;同理$v-y$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全部加起来就是&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
C_{A}+C_{B}+d*A_{sz}*B_{sz}+S_{u}*B_{sz}+S_{v}*A_{sz}&lt;/script&gt;&lt;p&gt;观察到$C_{A},C_{B},d,A_{sz},B_{sz}$与$u,v$无关&lt;br&gt;因此只需找$S_{u},S_{v}$最小的$u,v$&lt;/p&gt;
&lt;p&gt;关于$S$的计算分为两个部分，以&lt;em&gt;A&lt;/em&gt; 树为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一遍&lt;em&gt;dfs&lt;/em&gt; 求出每个节点&lt;em&gt;x&lt;/em&gt; 的子树大小和子树中节点到&lt;em&gt;x&lt;/em&gt; 的距离和&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
S_{x}+=S_{x_{son}}+val_{x-x_{son}}*sz_{x_{son}}&lt;/script&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二遍&lt;em&gt;dfs&lt;/em&gt; &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
S_{x_{son}}=S_{x}+val_{x-x_{son}}*\left (A_{sz}-sz_{x_{son}}  \right )-val_{x-x_{son}}*sz_{x_{son}}&lt;/script&gt;&lt;p&gt;​    就是把中心点从&lt;em&gt;x&lt;/em&gt; 移到$x_{son}$，$\left (A_{sz}-sz_{x_{son}}  \right )$多经过一条边，$sz_{x_{son}}$少经过一条边&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了$S$，$C$就好计算了&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
C_{A}=\frac{\sum _{x \in A} S_{x}}{2}&lt;/script&gt;&lt;p&gt;每条边$x-y$，会在&lt;em&gt;x&lt;/em&gt;，&lt;em&gt;y&lt;/em&gt; 各计算一次&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-379F New Year Tree</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-379F/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-379F/</id>
    <published>2018-08-12T11:32:34.000Z</published>
    <updated>2018-08-12T12:58:29.175Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意：</strong><br>初始时有一棵4个节点的三叉树<br>每次操作在一个叶子节点下面加入两个节点<br>问每次操作完树的直径</p><p>设当前树的直径为<em>S-T</em><br>每次加入节点后，树的直径至多只会改变一个端点，另一个节点仍是<em>S</em> 或<em>T</em></p><p>证明如下</p><ul><li>考虑加入节点<em>x</em> 的父节点$x_{fa}$，在<em>x</em> 未加入时，根据直径的求法，离$x_{fa}$最远的点一定是<em>S</em> 或<em>T</em></li><li>再加入<em>x</em> 后，易得离$x_{fa}$最远的点还是<em>S</em> 或<em>T</em>，因此离<em>x</em> 最远的点也是<em>S</em> 或<em>T</em></li></ul><p>因此每次求一遍<em>x</em> 到<em>S</em>，<em>T</em> 的距离，若大于<em>S-T</em> 就更新</p><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;br&gt;初始时有一棵4个节点的三叉树&lt;br&gt;每次操作在一个叶子节点下面加入两个节点&lt;br&gt;问每次操作完树的直径&lt;/p&gt;
&lt;p&gt;设当前树的直径为&lt;em&gt;S-T&lt;/em&gt;&lt;br&gt;每次加入节点后，树的直径至多只会改变一个端点，另一个节点
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="直径" scheme="http://yoursite.com/tags/%E7%9B%B4%E5%BE%84/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-734E Anton and Tree</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-734E/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-734E/</id>
    <published>2018-08-12T11:18:35.000Z</published>
    <updated>2018-08-12T12:58:52.983Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意： </strong><br>给出一棵黑白两色的树<br>每次操作可以改变一个同色联通块的颜色<br>问最少需要几次操作</p><p>首先缩个点，显然每次操作改变整个同色联通块更优<br>然后求直径，答案为<script type="math/tex">\left \lceil \frac{len}{2} \right \rceil</script><br>因为在缩直径时，其它枝叶也会缩掉，这个感性理解即可<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>;</span><br><span class="line"><span class="keyword">int</span> col[N],n,idx[N],d[N],st,ed,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx[o]=cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!idx[to]&amp;&amp;col[o]==col[to]) dfs(to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o==pre) d[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!x||d[o]&gt;d[x]) x=o;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;f[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=f[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            d[to]=d[o]+<span class="number">1</span>;</span><br><span class="line">            find(to,o,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) col[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (!idx[i]) cnt++,dfs(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[u].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=e[u][i];</span><br><span class="line">            <span class="keyword">if</span> (idx[u]!=idx[v])</span><br><span class="line">                f[idx[u]].push_back(idx[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    find(cnt,cnt,ed);</span><br><span class="line">    find(ed,ed,st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(d[st]+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意： &lt;/strong&gt;&lt;br&gt;给出一棵黑白两色的树&lt;br&gt;每次操作可以改变一个同色联通块的颜色&lt;br&gt;问最少需要几次操作&lt;/p&gt;
&lt;p&gt;首先缩个点，显然每次操作改变整个同色联通块更优&lt;br&gt;然后求直径，答案为&lt;script type=&quot;math/tex&quot;&gt;\left \lceil \frac{len}{2} \right \rceil&lt;/script&gt;&lt;br&gt;因为在缩直径时，其它枝叶也会缩掉，这个感性理解即可&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="直径" scheme="http://yoursite.com/tags/%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>HDU3625 Examining the Rooms </title>
    <link href="http://yoursite.com/2018/08/12/HDU3625-Examining-the-Rooms/"/>
    <id>http://yoursite.com/2018/08/12/HDU3625-Examining-the-Rooms/</id>
    <published>2018-08-12T10:12:07.000Z</published>
    <updated>2018-08-12T10:22:48.576Z</updated>
    
    <content type="html"><![CDATA[<p>若某些门之间成环，则破开环中任意一扇门可以打开环中所有门<br>于是问题等价于<em>n</em> 扇门形成<em>1-k</em> 个环有几种方案，再除总方案数<br>总方案显然是<script type="math/tex">n!</script><br>第一类斯特林数参考<a href="https://cwher.github.io/2018/08/12/组合数学入门" target="_blank" rel="noopener">组合数学入门</a><br>题目还限制一号门不能单独成环，需减去一号单独成环的方案数<br>因此方案数为</p><script type="math/tex; mode=display">\sum _{i=1}^{k}S_{n}^{i}-S_{n-1}^{i-1}</script><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;若某些门之间成环，则破开环中任意一扇门可以打开环中所有门&lt;br&gt;于是问题等价于&lt;em&gt;n&lt;/em&gt; 扇门形成&lt;em&gt;1-k&lt;/em&gt; 个环有几种方案，再除总方案数&lt;br&gt;总方案显然是&lt;script type=&quot;math/tex&quot;&gt;n!&lt;/script&gt;&lt;br&gt;第一类斯特林数
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>HDU2643 Rank</title>
    <link href="http://yoursite.com/2018/08/12/HDU2643-Rank/"/>
    <id>http://yoursite.com/2018/08/12/HDU2643-Rank/</id>
    <published>2018-08-12T07:26:37.000Z</published>
    <updated>2018-08-12T09:59:13.396Z</updated>
    
    <content type="html"><![CDATA[<p>首先将排名相同的选手放入同一个集合<br>这样的集合个数可以为<script type="math/tex">1-n</script><br>集合之间相对顺序并不清楚，因此是一个全排列<br>第二类斯特林数参考<a href="https://cwher.github.io/2018/08/12/组合数学入门" target="_blank" rel="noopener">组合数学入门</a><br>设<script type="math/tex">S\left ( n,k \right )</script>为<script type="math/tex">n</script>个元素放入<script type="math/tex">k</script>个非空集合的方案数<br>不难得出总方案数为</p><script type="math/tex; mode=display">\sum_{i=1}^{n}S\left ( n,i \right )*i!</script><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先将排名相同的选手放入同一个集合&lt;br&gt;这样的集合个数可以为&lt;script type=&quot;math/tex&quot;&gt;1-n&lt;/script&gt;&lt;br&gt;集合之间相对顺序并不清楚，因此是一个全排列&lt;br&gt;第二类斯特林数参考&lt;a href=&quot;https://cwher.github.io
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>组合数学入门</title>
    <link href="http://yoursite.com/2018/08/12/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/08/12/组合数学入门/</id>
    <published>2018-08-12T07:17:16.000Z</published>
    <updated>2018-08-14T00:34:30.303Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>感觉组合数学是<em>OI</em> （高中数学）中比较难啃的一部分<br>还是得写点什么来总结一下<br>组合数<script type="math/tex">C,A</script>的有关性质这里就不赘述了，高中数学里有<br>水平不高，只能写一点个人的理解<br><a id="more"></a></p><h4 id="小球与盒子"><a href="#小球与盒子" class="headerlink" title="小球与盒子"></a>小球与盒子</h4><p><em>n</em> 个球放入<em>m</em> 个盒子<br>这个应该是组合数学最经典的题目了</p><h5 id="球相同，盒不相同"><a href="#球相同，盒不相同" class="headerlink" title="球相同，盒不相同"></a>球相同，盒不相同</h5><ul><li><p>不允许空盒</p><script type="math/tex; mode=display">C_{n-1}^{m-1}</script><p>经典的插板法，<em>n</em> 个小球有<em>n-1</em> 个空隙，插入<em>m-1</em> 块板，分成<em>m</em> 个集合</p></li><li><p>允许空盒</p><script type="math/tex; mode=display">C_{n+m-1}^{m-1}</script><p>增加<em>m</em> 个球分给每个盒子，分好后从每个盒子中取出一个</p></li></ul><h5 id="球不相同，盒相同"><a href="#球不相同，盒相同" class="headerlink" title="球不相同，盒相同"></a>球不相同，盒相同</h5><ul><li><p>不允许空盒</p><script type="math/tex; mode=display">S_{n}^{m}</script><p><em>S</em> 为第二类斯特林数</p><p><strong>递推公式</strong></p><script type="math/tex; mode=display">S_{n}^{k}=k*S_{n-1}^{k}+S_{n-1}^{k-1}</script><p>对于第<em>n</em> 个球<br>它可以放入前面<em>k</em> 个盒子中，由于球不相同，可以产生<em>k</em> 种方案<br>也可以自己放入一个新的盒子中<br><del>易证其正确性</del></p><p><strong>边界条件</strong></p><script type="math/tex; mode=display">S_{n}^{0}=0,S_{n}^{n}=1</script></li><li><p>允许空盒</p><script type="math/tex; mode=display">\sum _{i=0}^{n}S_{n}^{i}</script><p>可以有<script type="math/tex">1-n</script>个空盒</p></li></ul><h5 id="球不相同，盒不相同"><a href="#球不相同，盒不相同" class="headerlink" title="球不相同，盒不相同"></a>球不相同，盒不相同</h5><ul><li><p>允许空盒</p><script type="math/tex; mode=display">m^{n}</script><p>放入每个球时均有<em>m</em> 种方案</p></li><li><p>不允许空盒</p><script type="math/tex; mode=display">S_{n}^{m}*m!</script><p>盒子不同，需要考虑顺序</p></li></ul><h5 id="球相同，盒相同"><a href="#球相同，盒相同" class="headerlink" title="球相同，盒相同"></a>球相同，盒相同</h5><ul><li><p>不允许空盒<br>不会生成函数，只能用<em>DP</em><br>设<script type="math/tex">dp\left [ i \right ]\left [ j \right ]</script>为前<em>i</em> 个球，放入<em>j</em> 个盒子的方案数</p><script type="math/tex; mode=display">dp\left [ i \right ]\left [ j \right ]=dp\left [ i -1\right ]\left [ j-1 \right ]+dp\left [ i -j\right ]\left [ j \right ]</script><ul><li>若方案中有若干个盒子只有一个球，挑出其中一个盒子继续求解，方案数为<script type="math/tex">dp\left [ i -1\right ]\left [ j-1 \right ]</script></li><li>若方案中不存在某个盒子只有一个球，将每个盒子均取出一个球之后继续求解，方案数为<script type="math/tex">dp\left [ i -j\right ]\left [ j \right ]</script></li></ul><p>答案为<script type="math/tex">dp\left [n  \right ]\left [m  \right ]</script></p><p>初始化<script type="math/tex">dp\left [0  \right ]\left [0  \right ]=1</script></p></li><li><p>允许空盒</p><script type="math/tex; mode=display">dp\left [n+m  \right ]\left [m  \right ]</script><p>相似的套路，增加<em>m</em> 个球分给每个盒子，分好后从每个盒子中取出一个</p></li></ul><h4 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h4><p>补充一下第一类斯特林数</p><p><strong>定义</strong><br>用<em>n</em> 个不同元素构成<em>m</em> 个圆排列的方案数 </p><p><strong>递推公式</strong></p><script type="math/tex; mode=display">S_{n}^{k}=\left ( n-1 \right )*S_{n-1}^{k}+S_{n-1}^{k-1}</script><p>对于第<em>n</em> 个球<br>它可以放入前面<em>k</em> 个圆排列中，共有<em>n-1</em> 个不同的位置，也可以自己放入一个新的盒子中</p><h4 id="错位排列"><a href="#错位排列" class="headerlink" title="错位排列"></a>错位排列</h4><p><strong>定义</strong><br>每个数都不在自己位置上的方案数</p><p>由于通项公式计算计算比较烦琐，且不易取模，这里仅讨论递推公式<br><strong>递推公式</strong></p><script type="math/tex; mode=display">D_{i}=\left ( i-1 \right )\left ( D_{i-1}+D_{i-2} \right )</script><p>将新加入的元素与每个<script type="math/tex">D_{i-1}</script>中的每个元素交换，可生成<script type="math/tex">\left ( i-1 \right )*D_{i-1}</script>个合法排列<br>这样少考虑了一种情况<br>例如，元素<em>1</em> 在自己位置，元素<em>2-（i-1）</em> 均不在自己位置，这时<em>1</em> 与<em>i</em> 进行交换也可生成合法排列<br>每个元素均有可能在自己的位置，因此共有<script type="math/tex">\left ( i-1 \right )*D_{i-2}</script>种方案<br><del>我是在一节语文课上才想通的</del></p><h4 id="重复排列"><a href="#重复排列" class="headerlink" title="重复排列"></a>重复排列</h4><p>有<em>k</em> 个元素，每个元素出现<script type="math/tex">c_{i}</script>次，<script type="math/tex">n=\sum c_{i}</script><br><del>易得</del>方案数</p><script type="math/tex; mode=display">\frac{n!}{\prod_{i=1}^{k} c_{i}!}</script><h4 id="重复组合"><a href="#重复组合" class="headerlink" title="重复组合"></a>重复组合</h4><p>有<em>k</em> 个不同的元素，每种元素选择的个数没有限制，选出<em>n</em> 个<br>问题等价于选<em>n</em> 次，每次可以选<em>k</em> 种球，且不分先后<br>等价于将<em>n</em> 次选择机会分给<em>k</em> 种球，机会相同，球不同<br>等价于将<em>n</em> 个相同的球放入<em>k</em> 个不同的盒子，且可以为空<br>方案数为</p><script type="math/tex; mode=display">C_{n+k-1}^{k-1}</script><h4 id="Catlan数"><a href="#Catlan数" class="headerlink" title="Catlan数"></a>Catlan数</h4><p>定义有多种，这里讲其中一种<br>借用一下神犇<em>wuyiqi</em> 的图<br><img src="/2018/08/12/组合数学入门/Catlan.jpg" alt="Catlan"></p><p>从左下角到右上角，且不穿过对角线的方案数就是Catlan数</p><p>任何一种非法方案均与绿线有交点，例如红线<br>将其按绿线做对称，例如红线与蓝线</p><p>可以发现</p><ul><li>终点均为<script type="math/tex">\left ( n-1,n+1 \right )</script></li><li>每一种非法方案对应一种<script type="math/tex">\left ( 0,0 \right )</script>到<script type="math/tex">\left ( n-1,n+1 \right )</script>的方案</li></ul><p>所以总方案数为</p><script type="math/tex; mode=display">C_{2n}^{n}-C_{2n}^{n-1}=\frac{C_{2n}^{n}}{n+1}</script><p>再补充两个Catlan数的递推公式</p><script type="math/tex; mode=display">T_{n+1}=\frac{4n+2}{n+2}T_{n}</script><script type="math/tex; mode=display">T_{n+1}=\sum _{i=0}^{n}T_{i}T_{n-i}</script><p>另外，在上述模型中比较容易求出一个合法前缀<script type="math/tex">\left ( x,y \right )</script>的方案数</p><script type="math/tex; mode=display">C_{2n-x-y}^{n-x}-C_{2n-x-y}^{n-1-x}</script><p>先写这一些，其它的等熟练了再补充(･ω´･ )</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;感觉组合数学是&lt;em&gt;OI&lt;/em&gt; （高中数学）中比较难啃的一部分&lt;br&gt;还是得写点什么来总结一下&lt;br&gt;组合数&lt;script type=&quot;math/tex&quot;&gt;C,A&lt;/script&gt;的有关性质这里就不赘述了，高中数学里有&lt;br&gt;水平不高，只能写一点个人的理解&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-739B Alyona and a tree</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-739B/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-739B/</id>
    <published>2018-08-12T06:54:52.000Z</published>
    <updated>2018-08-13T03:06:09.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意： </strong><br>给出一棵<em>n</em> 个节点的树，每条边有一个权值<br>若<em>v</em> 在<em>u</em> 的子树内，且<script type="math/tex">d_{u-v}\leq a_{v}</script>，则称<em>u</em> 能控制<em>v</em><br>问每个点能控制多少点</p><p>因为<em>v</em> 在<em>u</em> 的子树内，所以<script type="math/tex">d_{u-v}=dep_{v}-dep_{u}</script><br>化简得<script type="math/tex">dep_{v}-a_{v}\leq dep_{u}</script><br>观察到<script type="math/tex">dep_{v}-a_{v}</script>为定值，且<script type="math/tex">dep_{u}</script>单调递增<br>找到第一个点<em>u</em>，满足<script type="math/tex">dep_{v}-a_{v}\leq dep_{u}</script>，则<script type="math/tex">u-v_{fa}</script>路径上所有点均可控制点<script type="math/tex">v</script><br>由于只有一次询问，可用树上差分<br>至于怎么找第一个满足的点<em>u</em>，可以用二分或倍增</p><p>感觉倍增实现起来会简单一点，代码用的是二分<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,w[N],cnt[N],fa[N];</span><br><span class="line">LL dep[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N],Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(LL key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[Q.back()]&lt;key) <span class="keyword">return</span> Q.back();</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=Q.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L&lt;R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dep[Q[mid]]&lt;key)</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Q[R];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Q.empty()&amp;&amp;dep[o]-w[o]&lt;=dep[Q.back()])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[fa[find(dep[o]-w[o])]]--;</span><br><span class="line">        cnt[fa[o]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.push_back(o); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+g[o][i];</span><br><span class="line">            fa[to]=o;      </span><br><span class="line">            dfs(to,o);         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (dep[to]&gt;dep[o]) </span><br><span class="line">        &#123;</span><br><span class="line">            calc(to);</span><br><span class="line">            cnt[o]+=cnt[to];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">2</span>;u&lt;=n;u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=read(),val=read();</span><br><span class="line">        add(u,v,val);</span><br><span class="line">        add(v,u,val);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt,<span class="number">0</span>),calc(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,cnt[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意： &lt;/strong&gt;&lt;br&gt;给出一棵&lt;em&gt;n&lt;/em&gt; 个节点的树，每条边有一个权值&lt;br&gt;若&lt;em&gt;v&lt;/em&gt; 在&lt;em&gt;u&lt;/em&gt; 的子树内，且&lt;script type=&quot;math/tex&quot;&gt;d_{u-v}\leq a_{v}&lt;/script&gt;，则称&lt;em&gt;u&lt;/em&gt; 能控制&lt;em&gt;v&lt;/em&gt;&lt;br&gt;问每个点能控制多少点&lt;/p&gt;
&lt;p&gt;因为&lt;em&gt;v&lt;/em&gt; 在&lt;em&gt;u&lt;/em&gt; 的子树内，所以&lt;script type=&quot;math/tex&quot;&gt;d_{u-v}=dep_{v}-dep_{u}&lt;/script&gt;&lt;br&gt;化简得&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}\leq dep_{u}&lt;/script&gt;&lt;br&gt;观察到&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}&lt;/script&gt;为定值，且&lt;script type=&quot;math/tex&quot;&gt;dep_{u}&lt;/script&gt;单调递增&lt;br&gt;找到第一个点&lt;em&gt;u&lt;/em&gt;，满足&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}\leq dep_{u}&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;u-v_{fa}&lt;/script&gt;路径上所有点均可控制点&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;&lt;br&gt;由于只有一次询问，可用树上差分&lt;br&gt;至于怎么找第一个满足的点&lt;em&gt;u&lt;/em&gt;，可以用二分或倍增&lt;/p&gt;
&lt;p&gt;感觉倍增实现起来会简单一点，代码用的是二分&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-337D Book of Evil</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-337D/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-337D/</id>
    <published>2018-08-12T06:20:00.000Z</published>
    <updated>2018-08-12T12:58:05.727Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题大意：</strong><br>给出一棵<em>n</em> 个节点的树，每条边距离为<em>1</em><br>其中有<em>m</em> 个节点受到了<del>（来自东方的）</del>神秘力量的影响<br>如果点<em>x</em> 有神秘力量来源，则距离<em>x</em> 小于等于<em>d</em> 的点均会被影响<br>神秘力量来源只有一个，问有几个点可能有神秘力量来源</p><p>一个节点可能有神秘力量来源，当且仅当它与所有受影响点距离均小于等于<em>d</em></p><p>首先考虑求子树内的最大距离<br>设<script type="math/tex">f\left [ x \right ]</script>为点<em>x</em> 到子树中节点的最远距离，不难得出</p><script type="math/tex; mode=display">f\left [ x \right ]=max\left \{ f\left [ x_{son} \right ]+1 \right \}</script><p>要保证<script type="math/tex">x_{son}</script>中有被神秘力量影响的节点</p><p>设<script type="math/tex">g\left [ x \right ]</script>为<em>x</em> 到非子树中节点的最远距离<br>对于非子树中的节点，有两种可能</p><ul><li>来自兄弟节点</li></ul><script type="math/tex; mode=display">g\left [ x \right ]=max\left \{ f\left [ x_{brother} \right ]+2\right \}</script><ul><li>来自父节点</li></ul><script type="math/tex; mode=display">g\left [ x \right ]=max\left \{ g\left [ x_{fa} \right ]+1\right \}</script><p>对于来自兄弟节点的转移，暴力枚举会超时<br>考虑用<script type="math/tex">son\left [ x \right ]</script>记录<em>x</em> 子节点中距离最大值<br>仅在<script type="math/tex">x=son\left [ x_{fa} \right ]</script>遍历所有兄弟节点<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N],son[N],f[N],g[N]; <span class="comment">// subtree/not</span></span><br><span class="line"><span class="keyword">int</span> n,d,m,w[N],ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w[o]) f[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to]=o;</span><br><span class="line">            calc(to,o);</span><br><span class="line">            <span class="keyword">if</span> (f[to]!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[o]=max(f[to]+<span class="number">1</span>,f[o]);</span><br><span class="line">                <span class="keyword">if</span> (!son[o]||f[to]&gt;f[son[o]]) son[o]=to;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w[o]) g[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o!=pre) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[pre]!=<span class="number">-1</span>) g[o]=max(g[o],g[pre]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o!=son[pre]) g[o]=max(g[o],f[son[pre]]+<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;o==son[pre]&amp;&amp;i&lt;e[pre].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[pre][i];</span><br><span class="line">            <span class="keyword">if</span> (to!=o&amp;&amp;to!=fa[pre]&amp;&amp;f[to]!=<span class="number">-1</span>) g[o]=max(g[o],f[to]+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre) dfs(to,o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read(),d=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) w[read()]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">-1</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">    calc(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (f[i]&lt;=d&amp;&amp;g[i]&lt;=d) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题大意：&lt;/strong&gt;&lt;br&gt;给出一棵&lt;em&gt;n&lt;/em&gt; 个节点的树，每条边距离为&lt;em&gt;1&lt;/em&gt;&lt;br&gt;其中有&lt;em&gt;m&lt;/em&gt; 个节点受到了&lt;del&gt;（来自东方的）&lt;/del&gt;神秘力量的影响&lt;br&gt;如果点&lt;em&gt;x&lt;/em&gt; 有神秘力量来源，则距离&lt;em&gt;x&lt;/em&gt; 小于等于&lt;em&gt;d&lt;/em&gt; 的点均会被影响&lt;br&gt;神秘力量来源只有一个，问有几个点可能有神秘力量来源&lt;/p&gt;
&lt;p&gt;一个节点可能有神秘力量来源，当且仅当它与所有受影响点距离均小于等于&lt;em&gt;d&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;首先考虑求子树内的最大距离&lt;br&gt;设&lt;script type=&quot;math/tex&quot;&gt;f\left [ x \right ]&lt;/script&gt;为点&lt;em&gt;x&lt;/em&gt; 到子树中节点的最远距离，不难得出&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ x \right ]=max\left \{ f\left [ x_{son} \right ]+1 \right \}&lt;/script&gt;&lt;p&gt;要保证&lt;script type=&quot;math/tex&quot;&gt;x_{son}&lt;/script&gt;中有被神秘力量影响的节点&lt;/p&gt;
&lt;p&gt;设&lt;script type=&quot;math/tex&quot;&gt;g\left [ x \right ]&lt;/script&gt;为&lt;em&gt;x&lt;/em&gt; 到非子树中节点的最远距离&lt;br&gt;对于非子树中的节点，有两种可能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自兄弟节点&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
g\left [ x \right ]=max\left \{ f\left [ x_{brother} \right ]+2\right \}&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;来自父节点&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
g\left [ x \right ]=max\left \{ g\left [ x_{fa} \right ]+1\right \}&lt;/script&gt;&lt;p&gt;对于来自兄弟节点的转移，暴力枚举会超时&lt;br&gt;考虑用&lt;script type=&quot;math/tex&quot;&gt;son\left [ x \right ]&lt;/script&gt;记录&lt;em&gt;x&lt;/em&gt; 子节点中距离最大值&lt;br&gt;仅在&lt;script type=&quot;math/tex&quot;&gt;x=son\left [ x_{fa} \right ]&lt;/script&gt;遍历所有兄弟节点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP2016]天天爱跑步</title>
    <link href="http://yoursite.com/2018/08/12/NOIP2016-%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/08/12/NOIP2016-天天爱跑步/</id>
    <published>2018-08-12T02:29:36.000Z</published>
    <updated>2018-08-12T07:06:51.679Z</updated>
    
    <content type="html"><![CDATA[<p><del>刚学<em>OI</em> 两个月上考场碰到这题表示一脸懵逼</del></p><p>每条路径<script type="math/tex">\left ( u,v \right )​</script>分成两条链，一条<script type="math/tex">\left ( u,LCA \right )​</script>，一条<script type="math/tex">\left ( LCA,v \right )​</script></p><p>首先考虑<script type="math/tex">\left ( u,LCA \right )</script><br>不难得出，当<script type="math/tex">dep_{u}-dep_{x}=w_{x}</script>会被观察到<br>观察到<script type="math/tex">dep_{x}+w_{x}</script>为定值，用桶统计即可<br>在点<script type="math/tex">u</script>，<script type="math/tex">cnt\left [ dep_{u} \right ]+1</script><br>在<script type="math/tex">LCA</script>，<script type="math/tex">cnt\left [ dep_{u} \right ]-1</script></p><p>然后是<script type="math/tex">\left ( LCA,v \right )</script><br>同理可得，当<script type="math/tex">t_{i}-\left ( dep_{v}-dep_{x} \right )=w_{x}</script>会被观察到<br>其中<script type="math/tex">t_{i}</script>为<script type="math/tex">\left ( u,v \right )</script>的结束时间<script type="math/tex">t_{i}=dep_{u}+dep_{v}-2dep_{LCA}</script><br>化简得<script type="math/tex">dep_{u}-2dep_{LCA}=w_{x}-dep_{x}</script>，仍然用桶统计<br>需要注意的是可能会有负值</p><p>还有，当<script type="math/tex">dep_{u}-dep_{LCA}=w_{LCA}</script>时，<script type="math/tex">LCA</script>会重复计算，记得减掉<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">300050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> u,v,top;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,m,w[N],cnt[N&lt;&lt;<span class="number">1</span>],ans[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][<span class="number">25</span>],<span class="built_in">log</span>[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],S[N],T[N],top[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">log</span>[dep[o]];i++)</span><br><span class="line">        fa[o][i]=fa[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to][<span class="number">0</span>]=o;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            dfs(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i]!=fa[v][i])</span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_S</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre=cnt[dep[o]+w[o]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++) </span><br><span class="line">        <span class="keyword">if</span> (dep[e[o][i]]&gt;dep[o]) dfs_S(e[o][i]);</span><br><span class="line">    cnt[dep[o]]+=S[o].size();</span><br><span class="line">    ans[o]+=cnt[dep[o]+w[o]]-pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top[o].size();i++)</span><br><span class="line">        cnt[dep[t[top[o][i]].u]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_T</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre=cnt[w[o]-dep[o]+N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++) </span><br><span class="line">        <span class="keyword">if</span> (dep[e[o][i]]&gt;dep[o]) dfs_T(e[o][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T[o].size();i++)</span><br><span class="line">        cnt[dep[t[T[o][i]].u]<span class="number">-2</span>*dep[t[T[o][i]].top]+N]++;</span><br><span class="line">    ans[o]+=cnt[w[o]-dep[o]+N]-pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top[o].size();i++)</span><br><span class="line">        cnt[dep[t[top[o][i]].u]<span class="number">-2</span>*dep[t[top[o][i]].top]+N]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">log</span>[i]=<span class="built_in">log</span>[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;<span class="built_in">log</span>[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read(); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i].u=read();</span><br><span class="line">        t[i].v=read();</span><br><span class="line">        t[i].top=LCA(t[i].u,t[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[t[i].u].push_back(i);</span><br><span class="line">        T[t[i].v].push_back(i);</span><br><span class="line">        top[t[i].top].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs_S(rt),dfs_T(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (w[t[i].top]+dep[t[i].top]==dep[t[i].u]) ans[t[i].top]--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;刚学&lt;em&gt;OI&lt;/em&gt; 两个月上考场碰到这题表示一脸懵逼&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;每条路径&lt;script type=&quot;math/tex&quot;&gt;\left ( u,v \right )​&lt;/script&gt;分成两条链，一条&lt;script type=&quot;math/tex&quot;&gt;\left ( u,LCA \right )​&lt;/script&gt;，一条&lt;script type=&quot;math/tex&quot;&gt;\left ( LCA,v \right )​&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;首先考虑&lt;script type=&quot;math/tex&quot;&gt;\left ( u,LCA \right )&lt;/script&gt;&lt;br&gt;不难得出，当&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-dep_{x}=w_{x}&lt;/script&gt;会被观察到&lt;br&gt;观察到&lt;script type=&quot;math/tex&quot;&gt;dep_{x}+w_{x}&lt;/script&gt;为定值，用桶统计即可&lt;br&gt;在点&lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;cnt\left [ dep_{u} \right ]+1&lt;/script&gt;&lt;br&gt;在&lt;script type=&quot;math/tex&quot;&gt;LCA&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;cnt\left [ dep_{u} \right ]-1&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;script type=&quot;math/tex&quot;&gt;\left ( LCA,v \right )&lt;/script&gt;&lt;br&gt;同理可得，当&lt;script type=&quot;math/tex&quot;&gt;t_{i}-\left ( dep_{v}-dep_{x} \right )=w_{x}&lt;/script&gt;会被观察到&lt;br&gt;其中&lt;script type=&quot;math/tex&quot;&gt;t_{i}&lt;/script&gt;为&lt;script type=&quot;math/tex&quot;&gt;\left ( u,v \right )&lt;/script&gt;的结束时间&lt;script type=&quot;math/tex&quot;&gt;t_{i}=dep_{u}+dep_{v}-2dep_{LCA}&lt;/script&gt;&lt;br&gt;化简得&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-2dep_{LCA}=w_{x}-dep_{x}&lt;/script&gt;，仍然用桶统计&lt;br&gt;需要注意的是可能会有负值&lt;/p&gt;
&lt;p&gt;还有，当&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-dep_{LCA}=w_{LCA}&lt;/script&gt;时，&lt;script type=&quot;math/tex&quot;&gt;LCA&lt;/script&gt;会重复计算，记得减掉&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="桶" scheme="http://yoursite.com/tags/%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1891 疯狂LCM</title>
    <link href="http://yoursite.com/2018/08/12/%E6%B4%9B%E8%B0%B7P1891-%E7%96%AF%E7%8B%82LCM/"/>
    <id>http://yoursite.com/2018/08/12/洛谷P1891-疯狂LCM/</id>
    <published>2018-08-12T01:31:25.000Z</published>
    <updated>2018-08-12T01:34:22.972Z</updated>
    
    <content type="html"><![CDATA[<p><em>lcm</em> 过大无法枚举，考虑枚举<em>gcd</em><br>对于一组<script type="math/tex">gcd\left ( x,n \right )=k</script>，有<script type="math/tex">gcd\left ( \frac{x}{k},\frac{n}{k} \right )=1</script>，且<script type="math/tex">lcm\left(x,n\right)=\frac{xn}{k}</script><br>记</p><script type="math/tex; mode=display">f\left [ k \right ]=\sum_{i=1}^{k}i\left [ gcd\left ( i,k \right )=1 \right ]</script><p>根据定义，若<script type="math/tex">gcd\left ( x,n \right )=1</script>，则<script type="math/tex">gcd\left ( n-x,n \right )=1</script><br>因此</p><script type="math/tex; mode=display">f\left [ k \right ]= \frac{k*\varphi\left [ k \right ]}{2}</script><p>枚举所有的<em>k</em><br>则</p><script type="math/tex; mode=display">\sum lcm\left ( x,n \right )=k*\frac{n}{k}*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )</script><p>复杂度<script type="math/tex">O\left ( T\sqrt{N} \right )</script></p><p><del>直到有一天我被卡了，才发现有复杂度更低的做法</del><br>继续化简上式</p><script type="math/tex; mode=display">\sum lcm\left ( x,n \right )=n*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )</script><p><del>好吧没啥区别</del></p><script type="math/tex; mode=display">\sum_{i=1}^{n}lcm(i,n)=\sum _{d\mid n}f\left [ d \right ]*n</script><p>可以<script type="math/tex">O\left ( NlogN \right )</script>，<script type="math/tex">O\left (1 \right )</script>回答<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000050</span>;</span><br><span class="line"><span class="keyword">int</span> phi[N],prime[N],cnt=<span class="number">0</span>;</span><br><span class="line">LL f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!phi[i]) prime[++cnt]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((LL)i*prime[j]&gt;N) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i*prime[j]]=phi[i]*prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;N;j+=i)</span><br><span class="line">            f[j]+=(LL)phi[i]*i/<span class="number">2</span>*j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) f[i]+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[read()]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;lcm&lt;/em&gt; 过大无法枚举，考虑枚举&lt;em&gt;gcd&lt;/em&gt;&lt;br&gt;对于一组&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( x,n \right )=k&lt;/script&gt;，有&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( \frac{x}{k},\frac{n}{k} \right )=1&lt;/script&gt;，且&lt;script type=&quot;math/tex&quot;&gt;lcm\left(x,n\right)=\frac{xn}{k}&lt;/script&gt;&lt;br&gt;记&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ k \right ]=\sum_{i=1}^{k}i\left [ gcd\left ( i,k \right )=1 \right ]&lt;/script&gt;&lt;p&gt;根据定义，若&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( x,n \right )=1&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( n-x,n \right )=1&lt;/script&gt;&lt;br&gt;因此&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ k \right ]= \frac{k*\varphi\left [ k \right ]}{2}&lt;/script&gt;&lt;p&gt;枚举所有的&lt;em&gt;k&lt;/em&gt;&lt;br&gt;则&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum lcm\left ( x,n \right )=k*\frac{n}{k}*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )&lt;/script&gt;&lt;p&gt;复杂度&lt;script type=&quot;math/tex&quot;&gt;O\left ( T\sqrt{N} \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;直到有一天我被卡了，才发现有复杂度更低的做法&lt;/del&gt;&lt;br&gt;继续化简上式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum lcm\left ( x,n \right )=n*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )&lt;/script&gt;&lt;p&gt;&lt;del&gt;好吧没啥区别&lt;/del&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}lcm(i,n)=\sum _{d\mid n}f\left [ d \right ]*n&lt;/script&gt;&lt;p&gt;可以&lt;script type=&quot;math/tex&quot;&gt;O\left ( NlogN \right )&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;O\left (1 \right )&lt;/script&gt;回答&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P4626 一道水题 II</title>
    <link href="http://yoursite.com/2018/08/12/%E6%B4%9B%E8%B0%B7P4626-%E4%B8%80%E9%81%93%E6%B0%B4%E9%A2%98-II/"/>
    <id>http://yoursite.com/2018/08/12/洛谷P4626-一道水题-II/</id>
    <published>2018-08-12T01:09:45.000Z</published>
    <updated>2018-08-12T01:19:02.649Z</updated>
    
    <content type="html"><![CDATA[<p>根据定义，不难得出</p><script type="math/tex; mode=display">LCM\left ( 1,n \right )=\prod _{p_{i}\in \mathbb{P},p_{i}\leq n}p_{i}^{\left \lfloor log_{p_{i}}n \right \rfloor}</script><p>筛一遍素数之后暴力统计即可</p><p>空间不够就压位筛</p><p>对于多次询问，观察到<script type="math/tex">p_{i}> \sqrt{n}</script>的指数均为<em>1</em><br>可以求一遍乘积前缀和，将复杂度降为<script type="math/tex">O\left ( T\sqrt{N} \right )</script></p><p>最重要的是，这题模数是<script type="math/tex">1e8+7</script>，不是<script type="math/tex">1e9+7</script>！<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000050</span>,M=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">100000007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="keyword">int</span> sz,id;&#125;;</span><br><span class="line">LL used[N/M];</span><br><span class="line"><span class="keyword">int</span> prime[N&gt;&gt;<span class="number">3</span>];</span><br><span class="line">LL cnt=<span class="number">0</span>,n,ans;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) ret=ret*a%mod;</span><br><span class="line">        a=a*a%mod,b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">F</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="keyword">return</span> (node)&#123;k/M,k%M?k%M:M&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n),ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        node x=F(i);</span><br><span class="line">        <span class="keyword">if</span> ((used[x.sz]&gt;&gt;x.id)&amp;<span class="number">1</span>^<span class="number">1</span>) prime[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((LL)i*prime[j]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            node w=F(i*prime[j]);</span><br><span class="line">            used[w.sz]|=<span class="number">1L</span>L&lt;&lt;w.id;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt,k=<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x=<span class="built_in">pow</span>(prime[i],k);</span><br><span class="line">        <span class="keyword">while</span> ((LL)x*prime[i]&lt;=n) k++,x*=prime[i];</span><br><span class="line">        ans=ans*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据定义，不难得出&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
LCM\left ( 1,n \right )=\prod _{p_{i}\in \mathbb{P},p_{i}\leq n}p_{i}^{\left \lfloor log_{p_{i}}n \right \rfloor}&lt;/script&gt;&lt;p&gt;筛一遍素数之后暴力统计即可&lt;/p&gt;
&lt;p&gt;空间不够就压位筛&lt;/p&gt;
&lt;p&gt;对于多次询问，观察到&lt;script type=&quot;math/tex&quot;&gt;p_{i}&gt; \sqrt{n}&lt;/script&gt;的指数均为&lt;em&gt;1&lt;/em&gt;&lt;br&gt;可以求一遍乘积前缀和，将复杂度降为&lt;script type=&quot;math/tex&quot;&gt;O\left ( T\sqrt{N} \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;最重要的是，这题模数是&lt;script type=&quot;math/tex&quot;&gt;1e8+7&lt;/script&gt;，不是&lt;script type=&quot;math/tex&quot;&gt;1e9+7&lt;/script&gt;！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.1]圈奶牛</title>
    <link href="http://yoursite.com/2018/08/12/USACO5-1-%E5%9C%88%E5%A5%B6%E7%89%9B/"/>
    <id>http://yoursite.com/2018/08/12/USACO5-1-圈奶牛/</id>
    <published>2018-08-12T00:59:05.000Z</published>
    <updated>2018-08-12T01:08:26.755Z</updated>
    
    <content type="html"><![CDATA[<p>先上图<br><img src="/2018/08/12/USACO5-1-圈奶牛/Graham.gif" alt="Graham"><br>传统的<em>Graham</em> 扫描法<br>先排序，从左到右，从下到上<br>做两边，分别做上半部分和下半部分<br>用栈维护点，发现是凹的就退栈，但起点不能弹掉<del>（WA了好久）</del><br>三点方向可用叉积判断<br>每一遍做完后栈中剩下的元素就是凸包的顶点<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span><span class="keyword">double</span> x,y;&#125;;</span><br><span class="line">dot w[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;dot&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(dot a,dot b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">fabs</span>(a.x-b.x)&lt;eps?a.y&lt;a.y:a.x&lt;b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(dot a,dot b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(sqr(a.x-b.x)+sqr(a.y-b.y));&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(dot a,dot b,dot c)</span> </span>&#123;<span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;w[i].x,&amp;w[i].y);</span><br><span class="line">    sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>,cmp);</span><br><span class="line">    S.push_back(w[<span class="number">1</span>]),S.push_back(w[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (S.size()!=<span class="number">1</span>&amp;&amp;cross(S[S.size()<span class="number">-2</span>],S.back(),w[i])&lt;<span class="number">0</span>) S.pop_back();</span><br><span class="line">        S.push_back(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;S.size();i++) ans+=dist(S[i],S[i<span class="number">-1</span>]);</span><br><span class="line">    S.clear();</span><br><span class="line">    S.push_back(w[<span class="number">1</span>]),S.push_back(w[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (S.size()!=<span class="number">1</span>&amp;&amp;cross(S[S.size()<span class="number">-2</span>],S.back(),w[i])&gt;<span class="number">0</span>) S.pop_back();</span><br><span class="line">        S.push_back(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;S.size();i++) ans+=dist(S[i],S[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上图&lt;br&gt;&lt;img src=&quot;/2018/08/12/USACO5-1-圈奶牛/Graham.gif&quot; alt=&quot;Graham&quot;&gt;&lt;br&gt;传统的&lt;em&gt;Graham&lt;/em&gt; 扫描法&lt;br&gt;先排序，从左到右，从下到上&lt;br&gt;做两边，分别做上半部分和下半部分&lt;br&gt;用栈维护点，发现是凹的就退栈，但起点不能弹掉&lt;del&gt;（WA了好久）&lt;/del&gt;&lt;br&gt;三点方向可用叉积判断&lt;br&gt;每一遍做完后栈中剩下的元素就是凸包的顶点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP2017]逛公园</title>
    <link href="http://yoursite.com/2018/08/12/NOIP2017-%E9%80%9B%E5%85%AC%E5%9B%AD/"/>
    <id>http://yoursite.com/2018/08/12/NOIP2017-逛公园/</id>
    <published>2018-08-12T00:37:34.000Z</published>
    <updated>2018-08-12T00:54:11.797Z</updated>
    
    <content type="html"><![CDATA[<p><del>当年天真的我以为最短路图是有环的，然后翻了车</del></p><p>首先跑一遍<script type="math/tex">S</script>的最短路，记为<script type="math/tex">d</script><br>用<script type="math/tex">dp\left [ x \right ][i]</script>记录点<script type="math/tex">x</script>，距离<script type="math/tex">\leq d_{x}+i</script>的方案数<br>转移方程如下</p><script type="math/tex; mode=display">dp\left [ x \right ]\left [ i \right ]+=dp\left [ to \right ]\left [ i+d_{x}-d_{to}-val_{x-to} \right ]</script><p>这里的<script type="math/tex">x-to</script>是反图上的边<br>答案就是<script type="math/tex">dp\left [ T \right ]\left [ K \right ]</script>，初始化所有<script type="math/tex">dp\left [ S \right ]</script>为<em>1</em></p><p>对于<em>0</em> 环，比较好的一种处理方式是记忆优化搜索<br>当处理<script type="math/tex">\left ( x,i \right )</script>时，再次搜到<script type="math/tex">\left ( x,i \right )</script>，则说明图中存在<em>0</em> 环<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,K,mod,used[N][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">55</span>],d[N],inq[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N],r[N],f[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=INF;</span><br><span class="line">    d[s]=<span class="number">0</span>,inq[s]=<span class="number">1</span>,Q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front();</span><br><span class="line">        Q.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[x][i],val=g[x][i];</span><br><span class="line">            <span class="keyword">if</span> (d[x]+val&lt;d[to])</span><br><span class="line">            &#123;</span><br><span class="line">                d[to]=d[x]+val;</span><br><span class="line">                <span class="keyword">if</span> (!inq[to]) Q.push(to),inq[to]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (used[o][k]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[o][k]) <span class="keyword">return</span> dp[o][k];</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="number">1</span>) dp[o][k]=<span class="number">1</span>;</span><br><span class="line">    used[o][k]=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=r[o][i];</span><br><span class="line">        <span class="keyword">int</span> val=d[to]+f[o][i]-d[o];</span><br><span class="line">        <span class="keyword">if</span> (val&lt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(to,k-val)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            dp[o][k]=(dp[o][k]+dp[to][k-val])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    used[o][k]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dp[o][K];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(),m=read(),K=read(),mod=read(); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) g[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) r[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            <span class="keyword">int</span> val=read();</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            r[v].push_back(u);</span><br><span class="line">            f[v].push_back(val);</span><br><span class="line">            g[u].push_back(val); </span><br><span class="line">        &#125;</span><br><span class="line">        SPFA(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(n,K));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;当年天真的我以为最短路图是有环的，然后翻了车&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;首先跑一遍&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;的最短路，记为&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;dp\left [ x \right ][i]&lt;/script&gt;记录点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，距离&lt;script type=&quot;math/tex&quot;&gt;\leq d_{x}+i&lt;/script&gt;的方案数&lt;br&gt;转移方程如下&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp\left [ x \right ]\left [ i \right ]+=dp\left [ to \right ]\left [ i+d_{x}-d_{to}-val_{x-to} \right ]&lt;/script&gt;&lt;p&gt;这里的&lt;script type=&quot;math/tex&quot;&gt;x-to&lt;/script&gt;是反图上的边&lt;br&gt;答案就是&lt;script type=&quot;math/tex&quot;&gt;dp\left [ T \right ]\left [ K \right ]&lt;/script&gt;，初始化所有&lt;script type=&quot;math/tex&quot;&gt;dp\left [ S \right ]&lt;/script&gt;为&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;em&gt;0&lt;/em&gt; 环，比较好的一种处理方式是记忆优化搜索&lt;br&gt;当处理&lt;script type=&quot;math/tex&quot;&gt;\left ( x,i \right )&lt;/script&gt;时，再次搜到&lt;script type=&quot;math/tex&quot;&gt;\left ( x,i \right )&lt;/script&gt;，则说明图中存在&lt;em&gt;0&lt;/em&gt; 环&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
</feed>
