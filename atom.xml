<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魍魉的小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-12T10:22:48.576Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CWHer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDU3625 Examining the Rooms </title>
    <link href="http://yoursite.com/2018/08/12/HDU3625-Examining-the-Rooms/"/>
    <id>http://yoursite.com/2018/08/12/HDU3625-Examining-the-Rooms/</id>
    <published>2018-08-12T10:12:07.000Z</published>
    <updated>2018-08-12T10:22:48.576Z</updated>
    
    <content type="html"><![CDATA[<p>若某些门之间成环，则破开环中任意一扇门可以打开环中所有门<br>于是问题等价于<em>n</em> 扇门形成<em>1-k</em> 个环有几种方案，再除总方案数<br>总方案显然是<script type="math/tex">n!</script><br>第一类斯特林数参考<a href="https://cwher.github.io/2018/08/12/组合数学入门" target="_blank" rel="noopener">组合数学入门</a><br>题目还限制一号门不能单独成环，需减去一号单独成环的方案数<br>因此方案数为</p><script type="math/tex; mode=display">\sum _{i=1}^{k}S_{n}^{i}-S_{n-1}^{i-1}</script><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;若某些门之间成环，则破开环中任意一扇门可以打开环中所有门&lt;br&gt;于是问题等价于&lt;em&gt;n&lt;/em&gt; 扇门形成&lt;em&gt;1-k&lt;/em&gt; 个环有几种方案，再除总方案数&lt;br&gt;总方案显然是&lt;script type=&quot;math/tex&quot;&gt;n!&lt;/script&gt;&lt;br&gt;第一类斯特林数
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>HDU2643 Rank</title>
    <link href="http://yoursite.com/2018/08/12/HDU2643-Rank/"/>
    <id>http://yoursite.com/2018/08/12/HDU2643-Rank/</id>
    <published>2018-08-12T07:26:37.000Z</published>
    <updated>2018-08-12T09:59:13.396Z</updated>
    
    <content type="html"><![CDATA[<p>首先将排名相同的选手放入同一个集合<br>这样的集合个数可以为<script type="math/tex">1-n</script><br>集合之间相对顺序并不清楚，因此是一个全排列<br>第二类斯特林数参考<a href="https://cwher.github.io/2018/08/12/组合数学入门" target="_blank" rel="noopener">组合数学入门</a><br>设<script type="math/tex">S\left ( n,k \right )</script>为<script type="math/tex">n</script>个元素放入<script type="math/tex">k</script>个非空集合的方案数<br>不难得出总方案数为</p><script type="math/tex; mode=display">\sum_{i=1}^{n}S\left ( n,i \right )*i!</script><p>代码就不放了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先将排名相同的选手放入同一个集合&lt;br&gt;这样的集合个数可以为&lt;script type=&quot;math/tex&quot;&gt;1-n&lt;/script&gt;&lt;br&gt;集合之间相对顺序并不清楚，因此是一个全排列&lt;br&gt;第二类斯特林数参考&lt;a href=&quot;https://cwher.github.io
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>组合数学入门</title>
    <link href="http://yoursite.com/2018/08/12/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/08/12/组合数学入门/</id>
    <published>2018-08-12T07:17:16.000Z</published>
    <updated>2018-08-12T09:52:37.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>感觉组合数学是<em>OI</em> （高中数学）中比较难啃的一部分<br>还是得写点什么来总结一下<br>组合数<script type="math/tex">C,A</script>的有关性质这里就不赘述了，高中数学里有<br>水平不高，只能写一点个人的理解<br><a id="more"></a></p><h4 id="小球与盒子"><a href="#小球与盒子" class="headerlink" title="小球与盒子"></a>小球与盒子</h4><p><em>n</em> 个球放入<em>m</em> 个盒子<br>这个应该是组合数学最经典的题目了</p><h5 id="球相同，盒不相同"><a href="#球相同，盒不相同" class="headerlink" title="球相同，盒不相同"></a>球相同，盒不相同</h5><ul><li><p>不允许空盒</p><script type="math/tex; mode=display">C_{n-1}^{m-1}</script><p>经典的插板法，<em>n</em> 个小球有<em>n-1</em> 个空隙，插入<em>m-1</em> 块板，分成<em>m</em> 个集合</p></li><li><p>允许空盒</p><script type="math/tex; mode=display">C_{n+m-1}^{m-1}</script><p>增加<em>m</em> 个球分给每个盒子，分好后从每个盒子中取出一个</p></li></ul><h5 id="球不相同，盒相同"><a href="#球不相同，盒相同" class="headerlink" title="球不相同，盒相同"></a>球不相同，盒相同</h5><ul><li><p>不允许空盒</p><script type="math/tex; mode=display">S_{n}^{m}</script><p><em>S</em> 为第二类斯特林数</p><p><strong>递推公式</strong></p><script type="math/tex; mode=display">S_{n}^{k}=k*S_{n-1}^{k}+S_{n-1}^{k-1}</script><p>对于第<em>n</em> 个球<br>它可以放入前面<em>k</em> 个盒子中，由于球不相同，可以产生<em>k</em> 种方案<br>也可以自己放入一个新的盒子中<br><del>易证其正确性</del></p><p><strong>边界条件</strong></p><script type="math/tex; mode=display">S_{n}^{0}=0,S_{n}^{n}=1</script></li><li><p>允许空盒</p><script type="math/tex; mode=display">\sum _{i=0}^{n}S_{n}^{i}</script><p>可以有<script type="math/tex">1-n</script>个空盒</p></li></ul><h5 id="球不相同，盒不相同"><a href="#球不相同，盒不相同" class="headerlink" title="球不相同，盒不相同"></a>球不相同，盒不相同</h5><ul><li><p>允许空盒</p><script type="math/tex; mode=display">m^{n}</script><p>放入每个球时均有<em>m</em> 种方案</p></li><li><p>不允许空盒</p><script type="math/tex; mode=display">S_{n}^{m}*m!</script><p>盒子不同，需要考虑顺序</p></li></ul><h5 id="球相同，盒相同"><a href="#球相同，盒相同" class="headerlink" title="球相同，盒相同"></a>球相同，盒相同</h5><ul><li><p>不允许空盒<br>不会生成函数，只能用<em>DP</em><br>设<script type="math/tex">dp\left [ i \right ]\left [ j \right ]</script>为前<em>i</em> 个球，放入<em>j</em> 个盒子的方案数</p><script type="math/tex; mode=display">dp\left [ i \right ]\left [ j \right ]=dp\left [ i -1\right ]\left [ j-1 \right ]+dp\left [ i -j\right ]\left [ j \right ]</script><ul><li>若方案中有若干个盒子只有一个球，挑出其中一个盒子继续求解，方案数为<script type="math/tex">dp\left [ i -1\right ]\left [ j-1 \right ]</script></li><li>若方案中不存在某个盒子只有一个球，将每个盒子均取出一个球之后继续求解，方案数为<script type="math/tex">dp\left [ i -j\right ]\left [ j \right ]</script></li></ul><p>答案为<script type="math/tex">dp\left [n  \right ]\left [m  \right ]</script></p><p>初始化<script type="math/tex">dp\left [0  \right ]\left [0  \right ]=1</script></p></li><li><p>允许空盒</p><script type="math/tex; mode=display">dp\left [n+m  \right ]\left [m  \right ]</script><p>相似的套路，增加<em>m</em> 个球分给每个盒子，分好后从每个盒子中取出一个</p></li></ul><p>补充一下第一类斯特林数</p><h4 id="第一类斯特林数"><a href="#第一类斯特林数" class="headerlink" title="第一类斯特林数"></a>第一类斯特林数</h4><p><strong>定义</strong><br>用<em>n</em> 个不同元素构成<em>m</em> 个圆排列的方案数 </p><p><strong>递推公式</strong></p><script type="math/tex; mode=display">S_{n}^{k}=\left ( n-1 \right )*S_{n-1}^{k}+S_{n-1}^{k-1}</script><p>对于第<em>n</em> 个球<br>它可以放入前面<em>k</em> 个圆排列中，共有<em>n-1</em> 个不同的位置，也可以自己放入一个新的盒子中</p><h4 id="错位排列"><a href="#错位排列" class="headerlink" title="错位排列"></a>错位排列</h4><p><strong>定义</strong><br>每个数都不在自己位置上的方案数</p><p>由于通项公式计算计算比较烦琐，且不易取模，这里仅讨论递推公式<br><strong>递推公式</strong></p><script type="math/tex; mode=display">D_{i}=\left ( i-1 \right )\left ( D_{i-1}+D_{i-2} \right )</script><p>将新加入的元素与每个<script type="math/tex">D_{i-1}</script>中的每个元素交换，可生成<script type="math/tex">\left ( i-1 \right )*D_{i-1}</script>个合法排列<br>这样少考虑了一种情况<br>例如，元素<em>1</em> 在自己位置，元素<em>2-（i-1）</em> 均不在自己位置，这时<em>1</em> 与<em>i</em> 进行交换也可生成合法排列<br>每个元素均有可能在自己的位置，因此共有<script type="math/tex">\left ( i-1 \right )*D_{i-2}</script>种方案<br><del>我是在一节语文课上才想通的</del></p><h4 id="重复排列"><a href="#重复排列" class="headerlink" title="重复排列"></a>重复排列</h4><p>有<em>k</em> 个元素，每个元素出现<script type="math/tex">c_{i}</script>次，<script type="math/tex">n=\sum c_{i}</script><br><del>易得</del>方案数</p><script type="math/tex; mode=display">\frac{n!}{\prod_{i=1}^{k} c_{i}!}</script><h4 id="重复组合"><a href="#重复组合" class="headerlink" title="重复组合"></a>重复组合</h4><p>有<em>k</em> 个不同的元素，每种元素选择的个数没有限制，选出<em>n</em> 个<br>问题等价于选<em>n</em> 次，每次可以选<em>k</em> 种球，且不分先后<br>等价于将<em>n</em> 次选择机会分给<em>k</em> 种球，机会相同，球不同<br>等价于将<em>n</em> 个相同的球放入<em>k</em> 个不同的盒子，且可以为空<br>方案数为</p><script type="math/tex; mode=display">C_{n+k-1}^{k-1}</script><h4 id="Catlan数"><a href="#Catlan数" class="headerlink" title="Catlan数"></a>Catlan数</h4><p>定义有多种，这里讲其中一种<br>借用一下神犇<em>wuyiqi</em> 的图<br><img src="/2018/08/12/组合数学入门/Catlan.jpg" alt="Catlan"></p><p>从左下角到右上角，且不穿过对角线的方案数就是Catlan数</p><p>任何一种非法方案均与绿线有交点，例如红线<br>将其按绿线做对称，例如红线与蓝线</p><p>可以发现</p><ul><li>终点均为<script type="math/tex">\left ( n-1,n+1 \right )</script></li><li>每一种非法方案对应一种<script type="math/tex">\left ( 0,0 \right )</script>到<script type="math/tex">\left ( n-1,n+1 \right )</script>的方案</li></ul><p>所以总方案数为</p><script type="math/tex; mode=display">C_{2n}^{n}-C_{2n}^{n-1}=\frac{C_{2n}^{n}}{n+1}</script><p>再补充两个Catlan数的递推公式</p><script type="math/tex; mode=display">T_{n+1}=\frac{4n+2}{n+2}T_{n}</script><script type="math/tex; mode=display">T_{n+1}=\sum _{i=0}^{n}T_{i}T_{n-i}</script><p>另外，在上述模型中比较容易求出一个合法前缀<script type="math/tex">\left ( x,y \right )</script>的方案数</p><script type="math/tex; mode=display">C_{2n-x-y}^{n-x}-C_{2n-x-y}^{n-1-x}</script><p>先写这一些，其它的等熟练了再补充(･ω´･ )</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;感觉组合数学是&lt;em&gt;OI&lt;/em&gt; （高中数学）中比较难啃的一部分&lt;br&gt;还是得写点什么来总结一下&lt;br&gt;组合数&lt;script type=&quot;math/tex&quot;&gt;C,A&lt;/script&gt;的有关性质这里就不赘述了，高中数学里有&lt;br&gt;水平不高，只能写一点个人的理解&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-739B</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-739B/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-739B/</id>
    <published>2018-08-12T06:54:52.000Z</published>
    <updated>2018-08-12T07:11:43.925Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目大意: </strong><br>给出一棵<em>n</em> 个节点的树，每条边有一个权值<br>若<em>v</em> 在<em>u</em> 的子树内，且<script type="math/tex">d_{u-v}\leq a_{v}</script>，则称<em>u</em> 能控制<em>v</em><br>问每个点能控制多少点</p><p>因为<em>v</em> 在<em>u</em> 的子树内，所以<script type="math/tex">d_{u-v}=dep_{v}-dep_{u}</script><br>化简得<script type="math/tex">dep_{v}-a_{v}\leq dep_{u}</script><br>观察到<script type="math/tex">dep_{v}-a_{v}</script>为定值，且<script type="math/tex">dep_{u}</script>单调递增<br>找到第一个点<em>u</em>，满足<script type="math/tex">dep_{v}-a_{v}\leq dep_{u}</script>，则<script type="math/tex">u-v_{fa}</script>路径上所有点均可控制点<script type="math/tex">v</script><br>由于只有一次询问，可用树上差分<br>至于怎么找第一个满足的点<em>u</em>，可以用二分或倍增</p><p>感觉倍增实现起来会简单一点，代码用的是二分<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,w[N],cnt[N],fa[N];</span><br><span class="line">LL dep[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N],Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(LL key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[Q.back()]&lt;key) <span class="keyword">return</span> Q.back();</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>,R=Q.size()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L&lt;R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dep[Q[mid]]&lt;key)</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Q[R];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Q.empty()&amp;&amp;dep[o]-w[o]&lt;=dep[Q.back()])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[fa[find(dep[o]-w[o])]]--;</span><br><span class="line">        cnt[fa[o]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.push_back(o); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            dep[to]=dep[o]+g[o][i];</span><br><span class="line">            fa[to]=o;      </span><br><span class="line">            dfs(to,o);         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Q.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (dep[to]&gt;dep[o]) </span><br><span class="line">        &#123;</span><br><span class="line">            calc(to);</span><br><span class="line">            cnt[o]+=cnt[to];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">2</span>;u&lt;=n;u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=read(),val=read();</span><br><span class="line">        add(u,v,val);</span><br><span class="line">        add(v,u,val);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt,<span class="number">0</span>),calc(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,cnt[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;题目大意: &lt;/strong&gt;&lt;br&gt;给出一棵&lt;em&gt;n&lt;/em&gt; 个节点的树，每条边有一个权值&lt;br&gt;若&lt;em&gt;v&lt;/em&gt; 在&lt;em&gt;u&lt;/em&gt; 的子树内，且&lt;script type=&quot;math/tex&quot;&gt;d_{u-v}\leq a_{v}&lt;/script&gt;，则称&lt;em&gt;u&lt;/em&gt; 能控制&lt;em&gt;v&lt;/em&gt;&lt;br&gt;问每个点能控制多少点&lt;/p&gt;
&lt;p&gt;因为&lt;em&gt;v&lt;/em&gt; 在&lt;em&gt;u&lt;/em&gt; 的子树内，所以&lt;script type=&quot;math/tex&quot;&gt;d_{u-v}=dep_{v}-dep_{u}&lt;/script&gt;&lt;br&gt;化简得&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}\leq dep_{u}&lt;/script&gt;&lt;br&gt;观察到&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}&lt;/script&gt;为定值，且&lt;script type=&quot;math/tex&quot;&gt;dep_{u}&lt;/script&gt;单调递增&lt;br&gt;找到第一个点&lt;em&gt;u&lt;/em&gt;，满足&lt;script type=&quot;math/tex&quot;&gt;dep_{v}-a_{v}\leq dep_{u}&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;u-v_{fa}&lt;/script&gt;路径上所有点均可控制点&lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;&lt;br&gt;由于只有一次询问，可用树上差分&lt;br&gt;至于怎么找第一个满足的点&lt;em&gt;u&lt;/em&gt;，可以用二分或倍增&lt;/p&gt;
&lt;p&gt;感觉倍增实现起来会简单一点，代码用的是二分&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-337D</title>
    <link href="http://yoursite.com/2018/08/12/CodeForces-337D/"/>
    <id>http://yoursite.com/2018/08/12/CodeForces-337D/</id>
    <published>2018-08-12T06:20:00.000Z</published>
    <updated>2018-08-12T06:46:58.069Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题大意：</strong><br>给出一棵<em>n</em> 个节点的树，每条边距离为<em>1</em><br>其中有<em>m</em> 个节点受到了<del>（来自东方的）</del>神秘力量的影响<br>如果点<em>x</em> 有神秘力量来源，则距离<em>x</em> 小于等于<em>d</em> 的点均会被影响<br>神秘力量来源只有一个，问有几个点可能有神秘力量来源</p><p>一个节点可能有神秘力量来源，当且仅当它与所有受影响点距离均小于等于<em>d</em></p><p>首先考虑求子树内的最大距离<br>设<script type="math/tex">f\left [ x \right ]</script>为点<em>x</em> 到子树中节点的最远距离，不难得出</p><script type="math/tex; mode=display">f\left [ x \right ]=max\left \{ f\left [ x_{son} \right ]+1 \right \}</script><p>要保证<script type="math/tex">x_{son}</script>中有被神秘力量影响的节点</p><p>设<script type="math/tex">g\left [ x \right ]</script>为<em>x</em> 到非子树中节点的最远距离<br>对于非子树中的节点，有两种可能</p><ul><li>来自兄弟节点</li></ul><script type="math/tex; mode=display">g\left [ x \right ]=max\left \{ f\left [ x_{brother} \right ]+2\right \}</script><ul><li>来自父节点</li></ul><script type="math/tex; mode=display">g\left [ x \right ]=max\left \{ g\left [ x_{fa} \right ]+1\right \}</script><p>对于来自兄弟节点的转移，暴力枚举会超时<br>考虑用<script type="math/tex">son\left [ x \right ]</script>记录<em>x</em> 子节点中距离最大值<br>仅在<script type="math/tex">x=son\left [ x_{fa} \right ]</script>遍历所有兄弟节点<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N],son[N],f[N],g[N]; <span class="comment">// subtree/not</span></span><br><span class="line"><span class="keyword">int</span> n,d,m,w[N],ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w[o]) f[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to]=o;</span><br><span class="line">            calc(to,o);</span><br><span class="line">            <span class="keyword">if</span> (f[to]!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[o]=max(f[to]+<span class="number">1</span>,f[o]);</span><br><span class="line">                <span class="keyword">if</span> (!son[o]||f[to]&gt;f[son[o]]) son[o]=to;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w[o]) g[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o!=pre) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[pre]!=<span class="number">-1</span>) g[o]=max(g[o],g[pre]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (o!=son[pre]) g[o]=max(g[o],f[son[pre]]+<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;o==son[pre]&amp;&amp;i&lt;e[pre].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[pre][i];</span><br><span class="line">            <span class="keyword">if</span> (to!=o&amp;&amp;to!=fa[pre]&amp;&amp;f[to]!=<span class="number">-1</span>) g[o]=max(g[o],f[to]+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre) dfs(to,o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read(),d=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) w[read()]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">-1</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">    calc(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (f[i]&lt;=d&amp;&amp;g[i]&lt;=d) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题大意：&lt;/strong&gt;&lt;br&gt;给出一棵&lt;em&gt;n&lt;/em&gt; 个节点的树，每条边距离为&lt;em&gt;1&lt;/em&gt;&lt;br&gt;其中有&lt;em&gt;m&lt;/em&gt; 个节点受到了&lt;del&gt;（来自东方的）&lt;/del&gt;神秘力量的影响&lt;br&gt;如果点&lt;em&gt;x&lt;/em&gt; 有神秘力量来源，则距离&lt;em&gt;x&lt;/em&gt; 小于等于&lt;em&gt;d&lt;/em&gt; 的点均会被影响&lt;br&gt;神秘力量来源只有一个，问有几个点可能有神秘力量来源&lt;/p&gt;
&lt;p&gt;一个节点可能有神秘力量来源，当且仅当它与所有受影响点距离均小于等于&lt;em&gt;d&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;首先考虑求子树内的最大距离&lt;br&gt;设&lt;script type=&quot;math/tex&quot;&gt;f\left [ x \right ]&lt;/script&gt;为点&lt;em&gt;x&lt;/em&gt; 到子树中节点的最远距离，不难得出&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ x \right ]=max\left \{ f\left [ x_{son} \right ]+1 \right \}&lt;/script&gt;&lt;p&gt;要保证&lt;script type=&quot;math/tex&quot;&gt;x_{son}&lt;/script&gt;中有被神秘力量影响的节点&lt;/p&gt;
&lt;p&gt;设&lt;script type=&quot;math/tex&quot;&gt;g\left [ x \right ]&lt;/script&gt;为&lt;em&gt;x&lt;/em&gt; 到非子树中节点的最远距离&lt;br&gt;对于非子树中的节点，有两种可能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自兄弟节点&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
g\left [ x \right ]=max\left \{ f\left [ x_{brother} \right ]+2\right \}&lt;/script&gt;&lt;ul&gt;
&lt;li&gt;来自父节点&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
g\left [ x \right ]=max\left \{ g\left [ x_{fa} \right ]+1\right \}&lt;/script&gt;&lt;p&gt;对于来自兄弟节点的转移，暴力枚举会超时&lt;br&gt;考虑用&lt;script type=&quot;math/tex&quot;&gt;son\left [ x \right ]&lt;/script&gt;记录&lt;em&gt;x&lt;/em&gt; 子节点中距离最大值&lt;br&gt;仅在&lt;script type=&quot;math/tex&quot;&gt;x=son\left [ x_{fa} \right ]&lt;/script&gt;遍历所有兄弟节点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP2016]天天爱跑步</title>
    <link href="http://yoursite.com/2018/08/12/NOIP2016-%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/08/12/NOIP2016-天天爱跑步/</id>
    <published>2018-08-12T02:29:36.000Z</published>
    <updated>2018-08-12T07:06:51.679Z</updated>
    
    <content type="html"><![CDATA[<p><del>刚学<em>OI</em> 两个月上考场碰到这题表示一脸懵逼</del></p><p>每条路径<script type="math/tex">\left ( u,v \right )​</script>分成两条链，一条<script type="math/tex">\left ( u,LCA \right )​</script>，一条<script type="math/tex">\left ( LCA,v \right )​</script></p><p>首先考虑<script type="math/tex">\left ( u,LCA \right )</script><br>不难得出，当<script type="math/tex">dep_{u}-dep_{x}=w_{x}</script>会被观察到<br>观察到<script type="math/tex">dep_{x}+w_{x}</script>为定值，用桶统计即可<br>在点<script type="math/tex">u</script>，<script type="math/tex">cnt\left [ dep_{u} \right ]+1</script><br>在<script type="math/tex">LCA</script>，<script type="math/tex">cnt\left [ dep_{u} \right ]-1</script></p><p>然后是<script type="math/tex">\left ( LCA,v \right )</script><br>同理可得，当<script type="math/tex">t_{i}-\left ( dep_{v}-dep_{x} \right )=w_{x}</script>会被观察到<br>其中<script type="math/tex">t_{i}</script>为<script type="math/tex">\left ( u,v \right )</script>的结束时间<script type="math/tex">t_{i}=dep_{u}+dep_{v}-2dep_{LCA}</script><br>化简得<script type="math/tex">dep_{u}-2dep_{LCA}=w_{x}-dep_{x}</script>，仍然用桶统计<br>需要注意的是可能会有负值</p><p>还有，当<script type="math/tex">dep_{u}-dep_{LCA}=w_{LCA}</script>时，<script type="math/tex">LCA</script>会重复计算，记得减掉<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">300050</span>,rt=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> u,v,top;&#125;t[N];</span><br><span class="line"><span class="keyword">int</span> n,m,w[N],cnt[N&lt;&lt;<span class="number">1</span>],ans[N];</span><br><span class="line"><span class="keyword">int</span> dep[N],fa[N][<span class="number">25</span>],<span class="built_in">log</span>[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],S[N],T[N],top[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">log</span>[dep[o]];i++)</span><br><span class="line">        fa[o][i]=fa[fa[o][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dep[to])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to][<span class="number">0</span>]=o;</span><br><span class="line">            dep[to]=dep[o]+<span class="number">1</span>;</span><br><span class="line">            dfs(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">log</span>[dep[u]-dep[v]];i++)</span><br><span class="line">        <span class="keyword">if</span> (((dep[u]-dep[v])&gt;&gt;i)&amp;<span class="number">1</span>) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log</span>[dep[u]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[u][i]!=fa[v][i])</span><br><span class="line">            u=fa[u][i],v=fa[v][i];</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_S</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre=cnt[dep[o]+w[o]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++) </span><br><span class="line">        <span class="keyword">if</span> (dep[e[o][i]]&gt;dep[o]) dfs_S(e[o][i]);</span><br><span class="line">    cnt[dep[o]]+=S[o].size();</span><br><span class="line">    ans[o]+=cnt[dep[o]+w[o]]-pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top[o].size();i++)</span><br><span class="line">        cnt[dep[t[top[o][i]].u]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_T</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre=cnt[w[o]-dep[o]+N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++) </span><br><span class="line">        <span class="keyword">if</span> (dep[e[o][i]]&gt;dep[o]) dfs_T(e[o][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T[o].size();i++)</span><br><span class="line">        cnt[dep[t[T[o][i]].u]<span class="number">-2</span>*dep[t[T[o][i]].top]+N]++;</span><br><span class="line">    ans[o]+=cnt[w[o]-dep[o]+N]-pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;top[o].size();i++)</span><br><span class="line">        cnt[dep[t[top[o][i]].u]<span class="number">-2</span>*dep[t[top[o][i]].top]+N]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">log</span>[i]=<span class="built_in">log</span>[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;<span class="built_in">log</span>[i<span class="number">-1</span>]==i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dep[rt]=<span class="number">1</span>,dfs(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) w[i]=read(); </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i].u=read();</span><br><span class="line">        t[i].v=read();</span><br><span class="line">        t[i].top=LCA(t[i].u,t[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[t[i].u].push_back(i);</span><br><span class="line">        T[t[i].v].push_back(i);</span><br><span class="line">        top[t[i].top].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs_S(rt),dfs_T(rt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (w[t[i].top]+dep[t[i].top]==dep[t[i].u]) ans[t[i].top]--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;刚学&lt;em&gt;OI&lt;/em&gt; 两个月上考场碰到这题表示一脸懵逼&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;每条路径&lt;script type=&quot;math/tex&quot;&gt;\left ( u,v \right )​&lt;/script&gt;分成两条链，一条&lt;script type=&quot;math/tex&quot;&gt;\left ( u,LCA \right )​&lt;/script&gt;，一条&lt;script type=&quot;math/tex&quot;&gt;\left ( LCA,v \right )​&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;首先考虑&lt;script type=&quot;math/tex&quot;&gt;\left ( u,LCA \right )&lt;/script&gt;&lt;br&gt;不难得出，当&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-dep_{x}=w_{x}&lt;/script&gt;会被观察到&lt;br&gt;观察到&lt;script type=&quot;math/tex&quot;&gt;dep_{x}+w_{x}&lt;/script&gt;为定值，用桶统计即可&lt;br&gt;在点&lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;cnt\left [ dep_{u} \right ]+1&lt;/script&gt;&lt;br&gt;在&lt;script type=&quot;math/tex&quot;&gt;LCA&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;cnt\left [ dep_{u} \right ]-1&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;然后是&lt;script type=&quot;math/tex&quot;&gt;\left ( LCA,v \right )&lt;/script&gt;&lt;br&gt;同理可得，当&lt;script type=&quot;math/tex&quot;&gt;t_{i}-\left ( dep_{v}-dep_{x} \right )=w_{x}&lt;/script&gt;会被观察到&lt;br&gt;其中&lt;script type=&quot;math/tex&quot;&gt;t_{i}&lt;/script&gt;为&lt;script type=&quot;math/tex&quot;&gt;\left ( u,v \right )&lt;/script&gt;的结束时间&lt;script type=&quot;math/tex&quot;&gt;t_{i}=dep_{u}+dep_{v}-2dep_{LCA}&lt;/script&gt;&lt;br&gt;化简得&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-2dep_{LCA}=w_{x}-dep_{x}&lt;/script&gt;，仍然用桶统计&lt;br&gt;需要注意的是可能会有负值&lt;/p&gt;
&lt;p&gt;还有，当&lt;script type=&quot;math/tex&quot;&gt;dep_{u}-dep_{LCA}=w_{LCA}&lt;/script&gt;时，&lt;script type=&quot;math/tex&quot;&gt;LCA&lt;/script&gt;会重复计算，记得减掉&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="桶" scheme="http://yoursite.com/tags/%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1891 疯狂LCM</title>
    <link href="http://yoursite.com/2018/08/12/%E6%B4%9B%E8%B0%B7P1891-%E7%96%AF%E7%8B%82LCM/"/>
    <id>http://yoursite.com/2018/08/12/洛谷P1891-疯狂LCM/</id>
    <published>2018-08-12T01:31:25.000Z</published>
    <updated>2018-08-12T01:34:22.972Z</updated>
    
    <content type="html"><![CDATA[<p><em>lcm</em> 过大无法枚举，考虑枚举<em>gcd</em><br>对于一组<script type="math/tex">gcd\left ( x,n \right )=k</script>，有<script type="math/tex">gcd\left ( \frac{x}{k},\frac{n}{k} \right )=1</script>，且<script type="math/tex">lcm\left(x,n\right)=\frac{xn}{k}</script><br>记</p><script type="math/tex; mode=display">f\left [ k \right ]=\sum_{i=1}^{k}i\left [ gcd\left ( i,k \right )=1 \right ]</script><p>根据定义，若<script type="math/tex">gcd\left ( x,n \right )=1</script>，则<script type="math/tex">gcd\left ( n-x,n \right )=1</script><br>因此</p><script type="math/tex; mode=display">f\left [ k \right ]= \frac{k*\varphi\left [ k \right ]}{2}</script><p>枚举所有的<em>k</em><br>则</p><script type="math/tex; mode=display">\sum lcm\left ( x,n \right )=k*\frac{n}{k}*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )</script><p>复杂度<script type="math/tex">O\left ( T\sqrt{N} \right )</script></p><p><del>直到有一天我被卡了，才发现有复杂度更低的做法</del><br>继续化简上式</p><script type="math/tex; mode=display">\sum lcm\left ( x,n \right )=n*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )</script><p><del>好吧没啥区别</del></p><script type="math/tex; mode=display">\sum_{i=1}^{n}lcm(i,n)=\sum _{d\mid n}f\left [ d \right ]*n</script><p>可以<script type="math/tex">O\left ( NlogN \right )</script>，<script type="math/tex">O\left (1 \right )</script>回答<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000050</span>;</span><br><span class="line"><span class="keyword">int</span> phi[N],prime[N],cnt=<span class="number">0</span>;</span><br><span class="line">LL f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!phi[i]) prime[++cnt]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((LL)i*prime[j]&gt;N) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i*prime[j]]=phi[i]*prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;N;j+=i)</span><br><span class="line">            f[j]+=(LL)phi[i]*i/<span class="number">2</span>*j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) f[i]+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[read()]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;lcm&lt;/em&gt; 过大无法枚举，考虑枚举&lt;em&gt;gcd&lt;/em&gt;&lt;br&gt;对于一组&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( x,n \right )=k&lt;/script&gt;，有&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( \frac{x}{k},\frac{n}{k} \right )=1&lt;/script&gt;，且&lt;script type=&quot;math/tex&quot;&gt;lcm\left(x,n\right)=\frac{xn}{k}&lt;/script&gt;&lt;br&gt;记&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ k \right ]=\sum_{i=1}^{k}i\left [ gcd\left ( i,k \right )=1 \right ]&lt;/script&gt;&lt;p&gt;根据定义，若&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( x,n \right )=1&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;gcd\left ( n-x,n \right )=1&lt;/script&gt;&lt;br&gt;因此&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
f\left [ k \right ]= \frac{k*\varphi\left [ k \right ]}{2}&lt;/script&gt;&lt;p&gt;枚举所有的&lt;em&gt;k&lt;/em&gt;&lt;br&gt;则&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum lcm\left ( x,n \right )=k*\frac{n}{k}*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )&lt;/script&gt;&lt;p&gt;复杂度&lt;script type=&quot;math/tex&quot;&gt;O\left ( T\sqrt{N} \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;直到有一天我被卡了，才发现有复杂度更低的做法&lt;/del&gt;&lt;br&gt;继续化简上式&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum lcm\left ( x,n \right )=n*f\left [ \frac{n}{k} \right ]\left ( k|n,gcd\left ( x,n \right )=k \right )&lt;/script&gt;&lt;p&gt;&lt;del&gt;好吧没啥区别&lt;/del&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{i=1}^{n}lcm(i,n)=\sum _{d\mid n}f\left [ d \right ]*n&lt;/script&gt;&lt;p&gt;可以&lt;script type=&quot;math/tex&quot;&gt;O\left ( NlogN \right )&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;O\left (1 \right )&lt;/script&gt;回答&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P4626 一道水题 II</title>
    <link href="http://yoursite.com/2018/08/12/%E6%B4%9B%E8%B0%B7P4626-%E4%B8%80%E9%81%93%E6%B0%B4%E9%A2%98-II/"/>
    <id>http://yoursite.com/2018/08/12/洛谷P4626-一道水题-II/</id>
    <published>2018-08-12T01:09:45.000Z</published>
    <updated>2018-08-12T01:19:02.649Z</updated>
    
    <content type="html"><![CDATA[<p>根据定义，不难得出</p><script type="math/tex; mode=display">LCM\left ( 1,n \right )=\prod _{p_{i}\in \mathbb{P},p_{i}\leq n}p_{i}^{\left \lfloor log_{p_{i}}n \right \rfloor}</script><p>筛一遍素数之后暴力统计即可</p><p>空间不够就压位筛</p><p>对于多次询问，观察到<script type="math/tex">p_{i}> \sqrt{n}</script>的指数均为<em>1</em><br>可以求一遍乘积前缀和，将复杂度降为<script type="math/tex">O\left ( T\sqrt{N} \right )</script></p><p>最重要的是，这题模数是<script type="math/tex">1e8+7</script>，不是<script type="math/tex">1e9+7</script>！<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000050</span>,M=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">100000007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="keyword">int</span> sz,id;&#125;;</span><br><span class="line">LL used[N/M];</span><br><span class="line"><span class="keyword">int</span> prime[N&gt;&gt;<span class="number">3</span>];</span><br><span class="line">LL cnt=<span class="number">0</span>,n,ans;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) ret=ret*a%mod;</span><br><span class="line">        a=a*a%mod,b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">F</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;<span class="keyword">return</span> (node)&#123;k/M,k%M?k%M:M&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n),ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        node x=F(i);</span><br><span class="line">        <span class="keyword">if</span> ((used[x.sz]&gt;&gt;x.id)&amp;<span class="number">1</span>^<span class="number">1</span>) prime[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((LL)i*prime[j]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            node w=F(i*prime[j]);</span><br><span class="line">            used[w.sz]|=<span class="number">1L</span>L&lt;&lt;w.id;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt,k=<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x=<span class="built_in">pow</span>(prime[i],k);</span><br><span class="line">        <span class="keyword">while</span> ((LL)x*prime[i]&lt;=n) k++,x*=prime[i];</span><br><span class="line">        ans=ans*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据定义，不难得出&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
LCM\left ( 1,n \right )=\prod _{p_{i}\in \mathbb{P},p_{i}\leq n}p_{i}^{\left \lfloor log_{p_{i}}n \right \rfloor}&lt;/script&gt;&lt;p&gt;筛一遍素数之后暴力统计即可&lt;/p&gt;
&lt;p&gt;空间不够就压位筛&lt;/p&gt;
&lt;p&gt;对于多次询问，观察到&lt;script type=&quot;math/tex&quot;&gt;p_{i}&gt; \sqrt{n}&lt;/script&gt;的指数均为&lt;em&gt;1&lt;/em&gt;&lt;br&gt;可以求一遍乘积前缀和，将复杂度降为&lt;script type=&quot;math/tex&quot;&gt;O\left ( T\sqrt{N} \right )&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;最重要的是，这题模数是&lt;script type=&quot;math/tex&quot;&gt;1e8+7&lt;/script&gt;，不是&lt;script type=&quot;math/tex&quot;&gt;1e9+7&lt;/script&gt;！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.1]圈奶牛</title>
    <link href="http://yoursite.com/2018/08/12/USACO5-1-%E5%9C%88%E5%A5%B6%E7%89%9B/"/>
    <id>http://yoursite.com/2018/08/12/USACO5-1-圈奶牛/</id>
    <published>2018-08-12T00:59:05.000Z</published>
    <updated>2018-08-12T01:08:26.755Z</updated>
    
    <content type="html"><![CDATA[<p>先上图<br><img src="/2018/08/12/USACO5-1-圈奶牛/Graham.gif" alt="Graham"><br>传统的<em>Graham</em> 扫描法<br>先排序，从左到右，从下到上<br>做两边，分别做上半部分和下半部分<br>用栈维护点，发现是凹的就退栈，但起点不能弹掉<del>（WA了好久）</del><br>三点方向可用叉积判断<br>每一遍做完后栈中剩下的元素就是凸包的顶点<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10050</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span><span class="keyword">double</span> x,y;&#125;;</span><br><span class="line">dot w[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;dot&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(dot a,dot b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">fabs</span>(a.x-b.x)&lt;eps?a.y&lt;a.y:a.x&lt;b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(dot a,dot b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(sqr(a.x-b.x)+sqr(a.y-b.y));&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(dot a,dot b,dot c)</span> </span>&#123;<span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;w[i].x,&amp;w[i].y);</span><br><span class="line">    sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>,cmp);</span><br><span class="line">    S.push_back(w[<span class="number">1</span>]),S.push_back(w[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (S.size()!=<span class="number">1</span>&amp;&amp;cross(S[S.size()<span class="number">-2</span>],S.back(),w[i])&lt;<span class="number">0</span>) S.pop_back();</span><br><span class="line">        S.push_back(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;S.size();i++) ans+=dist(S[i],S[i<span class="number">-1</span>]);</span><br><span class="line">    S.clear();</span><br><span class="line">    S.push_back(w[<span class="number">1</span>]),S.push_back(w[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (S.size()!=<span class="number">1</span>&amp;&amp;cross(S[S.size()<span class="number">-2</span>],S.back(),w[i])&gt;<span class="number">0</span>) S.pop_back();</span><br><span class="line">        S.push_back(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;S.size();i++) ans+=dist(S[i],S[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上图&lt;br&gt;&lt;img src=&quot;/2018/08/12/USACO5-1-圈奶牛/Graham.gif&quot; alt=&quot;Graham&quot;&gt;&lt;br&gt;传统的&lt;em&gt;Graham&lt;/em&gt; 扫描法&lt;br&gt;先排序，从左到右，从下到上&lt;br&gt;做两边，分别做上半部分和下半部分&lt;br&gt;用栈维护点，发现是凹的就退栈，但起点不能弹掉&lt;del&gt;（WA了好久）&lt;/del&gt;&lt;br&gt;三点方向可用叉积判断&lt;br&gt;每一遍做完后栈中剩下的元素就是凸包的顶点&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP2017]逛公园</title>
    <link href="http://yoursite.com/2018/08/12/NOIP2017-%E9%80%9B%E5%85%AC%E5%9B%AD/"/>
    <id>http://yoursite.com/2018/08/12/NOIP2017-逛公园/</id>
    <published>2018-08-12T00:37:34.000Z</published>
    <updated>2018-08-12T00:54:11.797Z</updated>
    
    <content type="html"><![CDATA[<p><del>当年天真的我以为最短路图是有环的，然后翻了车</del></p><p>首先跑一遍<script type="math/tex">S</script>的最短路，记为<script type="math/tex">d</script><br>用<script type="math/tex">dp\left [ x \right ][i]</script>记录点<script type="math/tex">x</script>，距离<script type="math/tex">\leq d_{x}+i</script>的方案数<br>转移方程如下</p><script type="math/tex; mode=display">dp\left [ x \right ]\left [ i \right ]+=dp\left [ to \right ]\left [ i+d_{x}-d_{to}-val_{x-to} \right ]</script><p>这里的<script type="math/tex">x-to</script>是反图上的边<br>答案就是<script type="math/tex">dp\left [ T \right ]\left [ K \right ]</script>，初始化所有<script type="math/tex">dp\left [ S \right ]</script>为<em>1</em></p><p>对于<em>0</em> 环，比较好的一种处理方式是记忆优化搜索<br>当处理<script type="math/tex">\left ( x,i \right )</script>时，再次搜到<script type="math/tex">\left ( x,i \right )</script>，则说明图中存在<em>0</em> 环<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,K,mod,used[N][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">55</span>],d[N],inq[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N],r[N],f[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=INF;</span><br><span class="line">    d[s]=<span class="number">0</span>,inq[s]=<span class="number">1</span>,Q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front();</span><br><span class="line">        Q.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[x][i],val=g[x][i];</span><br><span class="line">            <span class="keyword">if</span> (d[x]+val&lt;d[to])</span><br><span class="line">            &#123;</span><br><span class="line">                d[to]=d[x]+val;</span><br><span class="line">                <span class="keyword">if</span> (!inq[to]) Q.push(to),inq[to]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (used[o][k]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[o][k]) <span class="keyword">return</span> dp[o][k];</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="number">1</span>) dp[o][k]=<span class="number">1</span>;</span><br><span class="line">    used[o][k]=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=r[o][i];</span><br><span class="line">        <span class="keyword">int</span> val=d[to]+f[o][i]-d[o];</span><br><span class="line">        <span class="keyword">if</span> (val&lt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(to,k-val)==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            dp[o][k]=(dp[o][k]+dp[to][k-val])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    used[o][k]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dp[o][K];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(),m=read(),K=read(),mod=read(); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) g[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) r[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            <span class="keyword">int</span> val=read();</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            r[v].push_back(u);</span><br><span class="line">            f[v].push_back(val);</span><br><span class="line">            g[u].push_back(val); </span><br><span class="line">        &#125;</span><br><span class="line">        SPFA(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(n,K));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;当年天真的我以为最短路图是有环的，然后翻了车&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;首先跑一遍&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;的最短路，记为&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;dp\left [ x \right ][i]&lt;/script&gt;记录点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，距离&lt;script type=&quot;math/tex&quot;&gt;\leq d_{x}+i&lt;/script&gt;的方案数&lt;br&gt;转移方程如下&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp\left [ x \right ]\left [ i \right ]+=dp\left [ to \right ]\left [ i+d_{x}-d_{to}-val_{x-to} \right ]&lt;/script&gt;&lt;p&gt;这里的&lt;script type=&quot;math/tex&quot;&gt;x-to&lt;/script&gt;是反图上的边&lt;br&gt;答案就是&lt;script type=&quot;math/tex&quot;&gt;dp\left [ T \right ]\left [ K \right ]&lt;/script&gt;，初始化所有&lt;script type=&quot;math/tex&quot;&gt;dp\left [ S \right ]&lt;/script&gt;为&lt;em&gt;1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;em&gt;0&lt;/em&gt; 环，比较好的一种处理方式是记忆优化搜索&lt;br&gt;当处理&lt;script type=&quot;math/tex&quot;&gt;\left ( x,i \right )&lt;/script&gt;时，再次搜到&lt;script type=&quot;math/tex&quot;&gt;\left ( x,i \right )&lt;/script&gt;，则说明图中存在&lt;em&gt;0&lt;/em&gt; 环&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P2662 牛场围栏</title>
    <link href="http://yoursite.com/2018/08/12/%E6%B4%9B%E8%B0%B7P2662-%E7%89%9B%E5%9C%BA%E5%9B%B4%E6%A0%8F/"/>
    <id>http://yoursite.com/2018/08/12/洛谷P2662-牛场围栏/</id>
    <published>2018-08-12T00:03:04.000Z</published>
    <updated>2018-08-12T00:35:59.620Z</updated>
    
    <content type="html"><![CDATA[<p>首先随便找一种长度的围栏，比如<script type="math/tex">p</script><br>设<script type="math/tex">d\left [ r \right ]\equiv r\left ( mod \ p \right )</script>，且为最小的不能修建的长度<br>根据定义，<script type="math/tex">d\left [ r \right ]+t*p\left ( t \in \mathbb{N} \right )</script>均能修建，<script type="math/tex">d\left [ r \right ]+t*p\left ( t < 0\right )</script>均不能修建</p><p>求<script type="math/tex">d</script>的过程就是求最短路<br>首先<script type="math/tex">d\left [ 0 \right ]=0</script>，其次可用<script type="math/tex">d\left [ x \right ]+a_{i}</script>更新<script type="math/tex">d\left [ \left ( x+a_{i} \right ) mod \ p\right ]</script><br>显然<script type="math/tex">p</script>越小，复杂度越低<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3050</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,d[N],inq[N],mod,ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++) d[i]=INF;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">0</span>,inq[<span class="number">0</span>]=<span class="number">1</span>,Q.push(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front();</span><br><span class="line">        Q.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w.size();i++)</span><br><span class="line">            <span class="keyword">if</span> (d[x]+w[i]&lt;d[(x+w[i])%mod])</span><br><span class="line">            &#123;</span><br><span class="line">                d[(x+w[i])%mod]=d[x]+w[i];</span><br><span class="line">                <span class="keyword">if</span> (!inq[(x+w[i])%mod])</span><br><span class="line">                &#123;</span><br><span class="line">                    inq[(x+w[i])%mod]=<span class="number">1</span>;</span><br><span class="line">                    Q.push((x+w[i])%mod);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=read();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=x;k&gt;=max(<span class="number">1</span>,x-m);k--) w.push_back(k);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(w.begin(),w.end());</span><br><span class="line">    w.resize(unique(w.begin(),w.end())-w.begin());</span><br><span class="line">    <span class="keyword">if</span> ((mod=w[<span class="number">0</span>])==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SPFA();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)</span><br><span class="line">        <span class="keyword">if</span> (d[i]==INF)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mod;i++)</span><br><span class="line">        ans=max(ans,d[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans-mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先随便找一种长度的围栏，比如&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;&lt;br&gt;设&lt;script type=&quot;math/tex&quot;&gt;d\left [ r \right ]\equiv r\left ( mod \ p \right )&lt;/script&gt;，且为最小的不能修建的长度&lt;br&gt;根据定义，&lt;script type=&quot;math/tex&quot;&gt;d\left [ r \right ]+t*p\left ( t \in \mathbb{N} \right )&lt;/script&gt;均能修建，&lt;script type=&quot;math/tex&quot;&gt;d\left [ r \right ]+t*p\left ( t &lt; 0\right )&lt;/script&gt;均不能修建&lt;/p&gt;
&lt;p&gt;求&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;的过程就是求最短路&lt;br&gt;首先&lt;script type=&quot;math/tex&quot;&gt;d\left [ 0 \right ]=0&lt;/script&gt;，其次可用&lt;script type=&quot;math/tex&quot;&gt;d\left [ x \right ]+a_{i}&lt;/script&gt;更新&lt;script type=&quot;math/tex&quot;&gt;d\left [ \left ( x+a_{i} \right ) mod \ p\right ]&lt;/script&gt;&lt;br&gt;显然&lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;越小，复杂度越低&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="同余" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>割点</title>
    <link href="http://yoursite.com/2018/08/12/%E5%89%B2%E7%82%B9/"/>
    <id>http://yoursite.com/2018/08/12/割点/</id>
    <published>2018-08-11T23:36:50.000Z</published>
    <updated>2018-08-11T23:54:44.161Z</updated>
    
    <content type="html"><![CDATA[<p>当且仅当点<script type="math/tex">x</script>，存在一个子节点<script type="math/tex">dfn\left [ x \right ]\leq low\left [ x_{son}\right ]</script>，点<script type="math/tex">x</script>是割点<br>特别地，若<script type="math/tex">x</script>为搜索树的根，只要它有两个或以上子节点，它就是割点<br>因为是小于等于，所以在求割点时，不必考虑父节点和重边问题<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,low[N],dfn[N],num=<span class="number">0</span>,cut[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> son=<span class="number">0</span>;</span><br><span class="line">    low[o]=dfn[o]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to,fa);</span><br><span class="line">            low[o]=min(low[o],low[to]);</span><br><span class="line">            <span class="keyword">if</span> (low[to]&gt;=dfn[o]&amp;&amp;o!=fa) cut[o]=<span class="number">1</span>;</span><br><span class="line">            son++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[o]=min(low[o],dfn[to]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o==fa&amp;&amp;son&gt;=<span class="number">2</span>) cut[o]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        e[u].push_back(v);</span><br><span class="line">        e[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) tarjan(i,i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (cut[i]) cnt++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (cut[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当且仅当点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，存在一个子节点&lt;script type=&quot;math/tex&quot;&gt;dfn\left [ x \right ]\leq low\left [ x_{son}\right ]&lt;/script&gt;，点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;是割点&lt;br&gt;特别地，若&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;为搜索树的根，只要它有两个或以上子节点，它就是割点&lt;br&gt;因为是小于等于，所以在求割点时，不必考虑父节点和重边问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="割点" scheme="http://yoursite.com/tags/%E5%89%B2%E7%82%B9/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>割边</title>
    <link href="http://yoursite.com/2018/08/12/%E5%89%B2%E8%BE%B9/"/>
    <id>http://yoursite.com/2018/08/12/割边/</id>
    <published>2018-08-11T23:29:41.000Z</published>
    <updated>2018-08-12T00:01:25.694Z</updated>
    
    <content type="html"><![CDATA[<p>当且仅当<script type="math/tex">edge\left ( u,v \right )</script>，存在<script type="math/tex">dfn\left [ u \right ]<low\left [ v \right ]</script>，它为桥<br>需要注意的是，当存在重边时，<script type="math/tex">dfn\left [ fa \right ]</script>可以用来更新<script type="math/tex">low\left [ x \right ]</script><br><a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10050</span>,M=<span class="number">100050</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,num,low[N],dfn[N],cut[M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[o]=dfn[o]=++num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[to])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(to,g[o][i]);</span><br><span class="line">            low[o]=min(low[o],low[to]);</span><br><span class="line">            <span class="keyword">if</span> (low[to]&gt;dfn[o]) cut[g[o][i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (g[o][i]!=id)</span><br><span class="line">            low[o]=min(low[o],dfn[to]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=read(),m=read(),num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) g[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(low,<span class="number">0</span>,<span class="keyword">sizeof</span>(low));</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(cut,<span class="number">0</span>,<span class="keyword">sizeof</span>(cut));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">            add(u,v,i),add(v,u,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (!dfn[i]) tarjan(i,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) </span><br><span class="line">            <span class="keyword">if</span> (cut[i]) ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (cut[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当且仅当&lt;script type=&quot;math/tex&quot;&gt;edge\left ( u,v \right )&lt;/script&gt;，存在&lt;script type=&quot;math/tex&quot;&gt;dfn\left [ u \right ]&lt;low\left [ v \right ]&lt;/script&gt;，它为桥&lt;br&gt;需要注意的是，当存在重边时，&lt;script type=&quot;math/tex&quot;&gt;dfn\left [ fa \right ]&lt;/script&gt;可以用来更新&lt;script type=&quot;math/tex&quot;&gt;low\left [ x \right ]&lt;/script&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="割边" scheme="http://yoursite.com/tags/%E5%89%B2%E8%BE%B9/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2002]银河英雄传说</title>
    <link href="http://yoursite.com/2018/08/11/NOI2002-%E9%93%B6%E6%B2%B3%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AF%B4/"/>
    <id>http://yoursite.com/2018/08/11/NOI2002-银河英雄传说/</id>
    <published>2018-08-11T13:17:17.000Z</published>
    <updated>2018-08-11T13:22:10.537Z</updated>
    
    <content type="html"><![CDATA[<p>在记录<script type="math/tex">fa</script>的同时记录与<script type="math/tex">fa</script>的距离<script type="math/tex">d</script><br>初始化<script type="math/tex">d</script>为0<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30050</span>;</span><br><span class="line"><span class="keyword">int</span> fa[N],d[N],sz[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'M'</span>&amp;&amp;ch!=<span class="string">'C'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    find(fa[x]);</span><br><span class="line">    d[x]+=d[fa[x]];</span><br><span class="line">    <span class="keyword">return</span> fa[x]=find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> <span class="comment">//u&gt;&gt;v</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u=find(u),v=find(v);</span><br><span class="line">    fa[u]=v;</span><br><span class="line">    d[u]=d[v]+sz[v];</span><br><span class="line">    sz[v]+=sz[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (find(u)!=find(v)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(d[u]-d[v])<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        fa[i]=i,d[i]=<span class="number">0</span>,sz[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> opt=get();</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">if</span> (opt==<span class="string">'M'</span>) unite(u,v);</span><br><span class="line">        <span class="keyword">if</span> (opt==<span class="string">'C'</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ask(u,v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在记录&lt;script type=&quot;math/tex&quot;&gt;fa&lt;/script&gt;的同时记录与&lt;script type=&quot;math/tex&quot;&gt;fa&lt;/script&gt;的距离&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;&lt;br&gt;初始化&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;为0&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2001]炮兵阵地</title>
    <link href="http://yoursite.com/2018/08/11/NOI2001-%E7%82%AE%E5%85%B5%E9%98%B5%E5%9C%B0/"/>
    <id>http://yoursite.com/2018/08/11/NOI2001-炮兵阵地/</id>
    <published>2018-08-11T10:59:23.000Z</published>
    <updated>2018-08-11T11:07:37.268Z</updated>
    
    <content type="html"><![CDATA[<p>先预处理出一行内所有可行方案，记为<script type="math/tex">s</script>，可以发现可行解并不多<br>再预处理出所有可行方案的炮兵数目，记为<script type="math/tex">w</script><br>用<script type="math/tex">dp\left [  d\right ]\left [  i\right ]\left [ j \right ]</script>记录前<script type="math/tex">d</script>行，且上一行状态为<script type="math/tex">s_{j}</script>，上两行状态为<script type="math/tex">s_{i}</script>的最大炮兵数目</p><script type="math/tex; mode=display">dp\left [ d \right ]\left [ j \right ]\left [ k \right ]=max\left \{ dp\left [ d-1 \right ]\left [ i \right ]\left [ j \right ]\right \}</script><p>转移时需要判断状态之间是否合法，炮兵是否均在平原<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">105</span>,M=<span class="number">65</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,dp[N][M][M],f[N];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,c[M],w[M],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'P'</span>&amp;&amp;ch!=<span class="string">'H'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;(<span class="number">1</span>&lt;&lt;m);s++)</span><br><span class="line">        <span class="keyword">if</span> (!((s&gt;&gt;<span class="number">1</span>)&amp;s)&amp;&amp;!((s&lt;&lt;<span class="number">1</span>)&amp;s))</span><br><span class="line">            <span class="keyword">if</span> (!((s&gt;&gt;<span class="number">2</span>)&amp;s)&amp;&amp;!((s&lt;&lt;<span class="number">2</span>)&amp;s)) c[++cnt]=s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            f[i]+=(get()==<span class="string">'H'</span>)&lt;&lt;(m-j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=m;k++)</span><br><span class="line">            w[i]+=(c[i]&gt;&gt;(k<span class="number">-1</span>))&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=n;d++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++) <span class="keyword">if</span> (!(f[d]&amp;c[k]))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++) <span class="keyword">if</span> (!(c[i]&amp;c[j]))</span><br><span class="line">                    <span class="keyword">if</span> (!(c[i]&amp;c[k])&amp;&amp;!(c[j]&amp;c[k]))</span><br><span class="line">                        dp[d][j][k]=max(dp[d][j][k],dp[d<span class="number">-1</span>][i][j]+w[k]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            ans=max(ans,dp[n][i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先预处理出一行内所有可行方案，记为&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;，可以发现可行解并不多&lt;br&gt;再预处理出所有可行方案的炮兵数目，记为&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;dp\left [  d\right ]\left [  i\right ]\left [ j \right ]&lt;/script&gt;记录前&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;行，且上一行状态为&lt;script type=&quot;math/tex&quot;&gt;s_{j}&lt;/script&gt;，上两行状态为&lt;script type=&quot;math/tex&quot;&gt;s_{i}&lt;/script&gt;的最大炮兵数目&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
dp\left [ d \right ]\left [ j \right ]\left [ k \right ]=max\left \{ dp\left [ d-1 \right ]\left [ i \right ]\left [ j \right ]\right \}&lt;/script&gt;&lt;p&gt;转移时需要判断状态之间是否合法，炮兵是否均在平原&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>[SDOI2013]直径</title>
    <link href="http://yoursite.com/2018/08/11/SDOI2013-%E7%9B%B4%E5%BE%84/"/>
    <id>http://yoursite.com/2018/08/11/SDOI2013-直径/</id>
    <published>2018-08-11T10:46:22.000Z</published>
    <updated>2018-08-11T10:58:11.265Z</updated>
    
    <content type="html"><![CDATA[<p>首先求一遍直径，记起点为<script type="math/tex">S</script>，终点为<script type="math/tex">T</script><br>所有可行边均在直径上<del>（废话）</del><br>考虑直径上某个点<script type="math/tex">x</script>，求出它不经过直径的能访问的最远距离，记为<script type="math/tex">d_{x}</script><br>复杂度<del>显然</del>是<script type="math/tex">O\left(N\right)​</script>的</p><p>从<script type="math/tex">S</script>到<script type="math/tex">T</script>，依次遍历直径上所有点</p><ul><li>若<script type="math/tex">d_{x}=D\left ( S,x \right )</script>，则<script type="math/tex">S</script>到<script type="math/tex">x</script>之间所有的边均不是必须经过的</li><li>若<script type="math/tex">d_{x}=D\left ( x,T \right )</script>，则<script type="math/tex">x</script>到<script type="math/tex">T</script>之间所有的边均不是必须经过的</li></ul><p>需要注意的是，有些算法在遇到第二种情况时需要及时退出<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>;</span><br><span class="line"><span class="keyword">int</span> n,st,ed,fa[N],col[N],ans=<span class="number">0</span>;</span><br><span class="line">LL d[N],len;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N],g[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch!=<span class="string">'-'</span>&amp;&amp;(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[u].push_back(v);</span><br><span class="line">    g[u].push_back(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> pre,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o==pre) d[o]=<span class="number">0</span>,fa[o]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!x||d[o]&gt;d[x]) x=o;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (to!=pre)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[to]=o;</span><br><span class="line">            d[to]=d[o]+g[o][i];</span><br><span class="line">            find(to,o,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> o)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    col[o]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[o].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=e[o][i];</span><br><span class="line">        <span class="keyword">if</span> (!col[to]) ret=max(ret,dfs(to)+g[o][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">int</span> val=read();</span><br><span class="line">        add(u,v,val);</span><br><span class="line">        add(v,u,val);</span><br><span class="line">    &#125;</span><br><span class="line">    find(n,n,ed);</span><br><span class="line">    find(ed,ed,st);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,len=d[st]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st;i;i=fa[i]) col[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>,i=st;i&amp;&amp;!f;i=fa[i])</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;!f&amp;&amp;j&lt;e[i].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[i][j];</span><br><span class="line">            <span class="keyword">if</span> (!col[to]) </span><br><span class="line">            &#123;</span><br><span class="line">                LL x=dfs(to)+g[i][j];</span><br><span class="line">                <span class="keyword">if</span> (x==len-d[i]) st=i;</span><br><span class="line">                <span class="keyword">if</span> (x==d[i]) ed=i,f=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=st;i!=ed;i=fa[i]) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先求一遍直径，记起点为&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;，终点为&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;&lt;br&gt;所有可行边均在直径上&lt;del&gt;（废话）&lt;/del&gt;&lt;br&gt;考虑直径上某个点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，求出它不经过直径的能访问的最远距离，记为&lt;script type=&quot;math/tex&quot;&gt;d_{x}&lt;/script&gt;&lt;br&gt;复杂度&lt;del&gt;显然&lt;/del&gt;是&lt;script type=&quot;math/tex&quot;&gt;O\left(N\right)​&lt;/script&gt;的&lt;/p&gt;
&lt;p&gt;从&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;，依次遍历直径上所有点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;d_{x}=D\left ( S,x \right )&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;之间所有的边均不是必须经过的&lt;/li&gt;
&lt;li&gt;若&lt;script type=&quot;math/tex&quot;&gt;d_{x}=D\left ( x,T \right )&lt;/script&gt;，则&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;之间所有的边均不是必须经过的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，有些算法在遇到第二种情况时需要及时退出&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="树形结构" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="树的直径" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>扩展中国剩余定理</title>
    <link href="http://yoursite.com/2018/08/11/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/11/扩展中国剩余定理/</id>
    <published>2018-08-11T10:32:36.000Z</published>
    <updated>2018-08-11T10:45:31.610Z</updated>
    
    <content type="html"><![CDATA[<script type="math/tex; mode=display">\left\{\begin{matrix} x\equiv a_{1}\left ( mod \ m_{1} \right )  \\ x\equiv a_{2}\left ( mod \ m_{2} \right )\\\cdots \\x\equiv a_{n}\left ( mod \ m_{n} \right )\\\end{matrix}\right.</script><p>不保证<script type="math/tex">m</script>两两互质</p><p>设已求出前<script type="math/tex">k</script>个方程的解，记为<script type="math/tex">x_{k}</script><br>记<script type="math/tex">M_{k}=\prod _{i=1}^{k}m_{i}</script><br>则<script type="math/tex">x_{k}+tM_{k}\left ( k \in\mathbb{Z} \right )</script>为前<script type="math/tex">k</script>个方程的通解</p><p>考虑第<script type="math/tex">k+1</script>个方程</p><script type="math/tex; mode=display">x_{k}+tM_{k} \equiv a_{k+1} \left ( mod \ m_{k+1}\right )</script><p>用<script type="math/tex">exgcd</script>解出<script type="math/tex">t</script><br>若无解则方程组无解<br>若有解则<script type="math/tex">x_{k+1}=x_{k}+tM_{k}</script><br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100050</span>;</span><br><span class="line">LL n,x,y,a[N],m[N],M=<span class="number">1</span>;</span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL a,LL b,LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) ret=(ret+a)%mod;</span><br><span class="line">        a=(a&lt;&lt;<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">LL <span class="title">exCRT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL M=m[<span class="number">1</span>],ans=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL w=gcd(M,m[i]);</span><br><span class="line">        LL c=(a[i]-ans)%m[i]+m[i];</span><br><span class="line">        exgcd(M/w,m[i]/w,x,y);</span><br><span class="line">        x=mul(x,c%m[i]/w,m[i]);</span><br><span class="line">        ans+=x*M,M*=m[i]/w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans%M+M)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;m[i],&amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,exCRT());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;math/tex; mode=display&quot;&gt;
\left\{\begin{matrix}
 x\equiv a_{1}\left ( mod \ m_{1} \right )  \\ 
x\equiv a_{2}\left ( mod \ m_{2} \right )\\
\cdots \\
x\equiv a_{n}\left ( mod \ m_{n} \right )\\
\end{matrix}\right.&lt;/script&gt;&lt;p&gt;不保证&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;两两互质&lt;/p&gt;
&lt;p&gt;设已求出前&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;个方程的解，记为&lt;script type=&quot;math/tex&quot;&gt;x_{k}&lt;/script&gt;&lt;br&gt;记&lt;script type=&quot;math/tex&quot;&gt;M_{k}=\prod _{i=1}^{k}m_{i}&lt;/script&gt;&lt;br&gt;则&lt;script type=&quot;math/tex&quot;&gt;x_{k}+tM_{k}\left ( k \in\mathbb{Z} \right )&lt;/script&gt;为前&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;个方程的通解&lt;/p&gt;
&lt;p&gt;考虑第&lt;script type=&quot;math/tex&quot;&gt;k+1&lt;/script&gt;个方程&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
x_{k}+tM_{k} \equiv a_{k+1} \left ( mod \ m_{k+1}\right )&lt;/script&gt;&lt;p&gt;用&lt;script type=&quot;math/tex&quot;&gt;exgcd&lt;/script&gt;解出&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;br&gt;若无解则方程组无解&lt;br&gt;若有解则&lt;script type=&quot;math/tex&quot;&gt;x_{k+1}=x_{k}+tM_{k}&lt;/script&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>K短路</title>
    <link href="http://yoursite.com/2018/08/11/k%E7%9F%AD%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/08/11/k短路/</id>
    <published>2018-08-11T10:08:00.000Z</published>
    <updated>2018-08-11T11:10:38.863Z</updated>
    
    <content type="html"><![CDATA[<p>其实<script type="math/tex">K</script>短路是有有理有据的做法的，<del>但我不会啊</del></p><p>建立一个以<script type="math/tex">d</script>为关键字的优先队列<br>放入<script type="math/tex">\left ( S,0 \right )</script>，然后进行扩展<br><del>易证</del>，当<script type="math/tex">\left ( x,d \right )</script>被第<script type="math/tex">K</script>次取出时，<script type="math/tex">d</script>为<script type="math/tex">S</script>到<script type="math/tex">x</script>的<script type="math/tex">K</script>短路</p><p>考虑用启发式优化来提高效率<br>到<script type="math/tex">T</script>的估计距离<script type="math/tex">f_{x}</script>可以为<script type="math/tex">x</script>到<script type="math/tex">T</script>的最短路<br>对于点<script type="math/tex">x</script>，<script type="math/tex">g_{x}=d_{now}+f_{x}</script><br>优先队列以<script type="math/tex">g</script>为关键字</p><p>还可以继续优化</p><ul><li>当取出其中某个点<script type="math/tex">K</script>次后，不需要将其再放入优先队列中</li><li>对于有距离要求的<script type="math/tex">K</script>短路，当取出元素的<script type="math/tex">d</script>大于给定值可直接退出</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5050</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to;<span class="keyword">double</span> val;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> id;<span class="keyword">double</span> d;&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">0</span>,inq[N],cnt[N];</span><br><span class="line"><span class="keyword">double</span> E,f[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[N],r[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.d+f[a.id]&gt;b.d+f[b.id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node,<span class="built_in">vector</span>&lt;node&gt;,cmp&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=INF;</span><br><span class="line">    f[s]=<span class="number">0</span>,inq[s]=<span class="number">1</span>,Q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Q.front();</span><br><span class="line">        Q.pop(),inq[x]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r[x].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=r[x][i].to;</span><br><span class="line">            <span class="keyword">double</span> val=r[x][i].val;</span><br><span class="line">            <span class="keyword">if</span> (f[x]+val&lt;f[to])</span><br><span class="line">            &#123;</span><br><span class="line">                f[to]=f[x]+val;</span><br><span class="line">                <span class="keyword">if</span> (!inq[to]) inq[to]=<span class="number">1</span>,Q.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A_star</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.push((node)&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!S.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node x=S.top();</span><br><span class="line">        <span class="keyword">if</span> (cnt[x.id]&gt;sz) <span class="keyword">return</span>;</span><br><span class="line">        S.pop(),cnt[x.id]++;</span><br><span class="line">        <span class="keyword">if</span> (x.d&gt;E) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (x.id==t) </span><br><span class="line">        &#123;</span><br><span class="line">            ans++,E-=x.d;</span><br><span class="line">            sz=E/x.d;</span><br><span class="line">            <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x.id].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to=e[x.id][i].to;</span><br><span class="line">            <span class="keyword">double</span> val=e[x.id][i].val;</span><br><span class="line">            <span class="keyword">if</span> (x.d+val&lt;=E) S.push((node)&#123;to,x.d+val&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;E);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=read(),v=read();</span><br><span class="line">        <span class="keyword">double</span> val;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;val);</span><br><span class="line">        e[u].push_back((edge)&#123;v,val&#125;);</span><br><span class="line">        r[v].push_back((edge)&#123;u,val&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    SPFA(n);</span><br><span class="line">    A_star(<span class="number">1</span>,n,E/f[<span class="number">1</span>]); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路是有有理有据的做法的，&lt;del&gt;但我不会啊&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;建立一个以&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;为关键字的优先队列&lt;br&gt;放入&lt;script type=&quot;math/tex&quot;&gt;\left ( S,0 \right )&lt;/script&gt;，然后进行扩展&lt;br&gt;&lt;del&gt;易证&lt;/del&gt;，当&lt;script type=&quot;math/tex&quot;&gt;\left ( x,d \right )&lt;/script&gt;被第&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;次取出时，&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;为&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;的&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路&lt;/p&gt;
&lt;p&gt;考虑用启发式优化来提高效率&lt;br&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的估计距离&lt;script type=&quot;math/tex&quot;&gt;f_{x}&lt;/script&gt;可以为&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;到&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;的最短路&lt;br&gt;对于点&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;g_{x}=d_{now}+f_{x}&lt;/script&gt;&lt;br&gt;优先队列以&lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;为关键字&lt;/p&gt;
&lt;p&gt;还可以继续优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当取出其中某个点&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;次后，不需要将其再放入优先队列中&lt;/li&gt;
&lt;li&gt;对于有距离要求的&lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;短路，当取出元素的&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;大于给定值可直接退出&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="A*" scheme="http://yoursite.com/tags/A/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1382 楼房</title>
    <link href="http://yoursite.com/2018/08/11/%E6%B4%9B%E8%B0%B7P1382-%E6%A5%BC%E6%88%BF/"/>
    <id>http://yoursite.com/2018/08/11/洛谷P1382-楼房/</id>
    <published>2018-08-11T09:53:02.000Z</published>
    <updated>2018-08-11T11:11:55.798Z</updated>
    
    <content type="html"><![CDATA[<p>线段树实现起来细节有点多，用了<em>multiset</em><br>参考了一下大佬的题解</p><p>排序时需要注意顺序问题</p><ul><li>先左后右</li><li>先入后出</li><li>入边从高到低</li><li>出边从低到高</li></ul><p>感性理解一下即可</p><p>加入边时考虑是否会变高<br>删除边时考虑是否会变低<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200050</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> x,h,opt;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dot</span>&#123;</span><span class="keyword">int</span> x,y;&#125;ans[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x!=b.x) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">if</span> (a.opt!=b.opt) <span class="keyword">return</span> a.opt&gt;b.opt;</span><br><span class="line">    <span class="keyword">if</span> (a.opt==<span class="number">1</span>) <span class="keyword">return</span> a.h&gt;b.h;</span><br><span class="line">    <span class="keyword">if</span> (a.opt==<span class="number">-1</span>) <span class="keyword">return</span> a.h&lt;b.h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> h=read(),l=read(),r=read();</span><br><span class="line">        t[i]=(node)&#123;l,h,<span class="number">1</span>&#125;;</span><br><span class="line">        t[i+n]=(node)&#123;r,h,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp);</span><br><span class="line">    S.insert(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> H=*S.rbegin();</span><br><span class="line">        <span class="keyword">if</span> (t[i].opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i].h&gt;H) </span><br><span class="line">            &#123;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,H&#125;;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,t[i].h&#125;;</span><br><span class="line">                S.insert(t[i].h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> S.insert(t[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[i].opt==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[i].h==H&amp;&amp;S.count(H)==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                S.erase(H);</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,H&#125;;</span><br><span class="line">                ans[++cnt]=(dot)&#123;t[i].x,*S.rbegin()&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> S.erase(S.find(t[i].h));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans[i].x,ans[i].y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线段树实现起来细节有点多，用了&lt;em&gt;multiset&lt;/em&gt;&lt;br&gt;参考了一下大佬的题解&lt;/p&gt;
&lt;p&gt;排序时需要注意顺序问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先左后右&lt;/li&gt;
&lt;li&gt;先入后出&lt;/li&gt;
&lt;li&gt;入边从高到低&lt;/li&gt;
&lt;li&gt;出边从低到高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;感性理解一下即可&lt;/p&gt;
&lt;p&gt;加入边时考虑是否会变高&lt;br&gt;删除边时考虑是否会变低&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>[USACO5.5]Picture</title>
    <link href="http://yoursite.com/2018/08/11/USACO5-5-Picture/"/>
    <id>http://yoursite.com/2018/08/11/USACO5-5-Picture/</id>
    <published>2018-08-11T08:26:49.000Z</published>
    <updated>2018-08-11T08:44:17.637Z</updated>
    
    <content type="html"><![CDATA[<p>扫描线参考<a href="https://cwher.github.io/2018/08/11/HDU1542-Atlantis" target="_blank" rel="noopener">HDU1542 Atlantis</a><br>可以横竖各做一遍<br>需要注意的是会重复计算，需要与上一次结果作差</p><p>也可以只做一遍<br>用<script type="math/tex">sz</script>数组记录宽度，<script type="math/tex">c</script>数组记录竖线数量<br>还需要<script type="math/tex">L</script>，<script type="math/tex">R</script>记录是否有左右端点竖线<br>需要注意的是端点竖线重合和顺序问题<br>高度相同时先做覆盖再做取消覆盖，否则会重叠线段会多次计算<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e4</span>+<span class="number">50</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,h,val;&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">0</span>,ans=<span class="number">0</span>,ql,qr;</span><br><span class="line"><span class="keyword">int</span> num[N&lt;&lt;<span class="number">2</span>],sz[N&lt;&lt;<span class="number">2</span>],w[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> c[N&lt;&lt;<span class="number">2</span>],L[N&lt;&lt;<span class="number">2</span>],R[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> x=<span class="number">0</span>,t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> ((ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&amp;&amp;ch!=<span class="string">'-'</span>) ch=getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>) &#123;t=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) &#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.h==b.h?a.val&gt;b.val:a.h&lt;b.h;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num[o])</span><br><span class="line">    &#123;</span><br><span class="line">        sz[o]=w[r+<span class="number">1</span>]-w[l];</span><br><span class="line">        c[o]=(L[o]=<span class="number">1</span>)+(R[o]=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        L[o]=L[o&lt;&lt;<span class="number">1</span>],R[o]=R[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        c[o]=c[o&lt;&lt;<span class="number">1</span>]+c[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        c[o]-=(R[o&lt;&lt;<span class="number">1</span>]&amp;L[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=l&amp;&amp;r&lt;=qr)</span><br><span class="line">    &#123;</span><br><span class="line">        num[o]+=x;</span><br><span class="line">        calc(o,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql&lt;=mid) modify(o&lt;&lt;<span class="number">1</span>,l,mid,x);</span><br><span class="line">    <span class="keyword">if</span> (qr&gt;mid) modify(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line">    calc(o,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x1=read(),y1=read();</span><br><span class="line">        <span class="keyword">int</span> x2=read(),y2=read();</span><br><span class="line">        w[i]=x1,w[i+n]=x2;</span><br><span class="line">        t[++cnt]=(node)&#123;x1,x2,y1,<span class="number">1</span>&#125;;</span><br><span class="line">        t[++cnt]=(node)&#123;x1,x2,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    sort(w+<span class="number">1</span>,w+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> idx=unique(w+<span class="number">1</span>,w+n+<span class="number">1</span>)-w<span class="number">-1</span>;</span><br><span class="line">    sort(t+<span class="number">1</span>,t+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ql=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].l)-w;</span><br><span class="line">        qr=lower_bound(w+<span class="number">1</span>,w+idx+<span class="number">1</span>,t[i].r)-w<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql&lt;=qr) modify(<span class="number">1</span>,<span class="number">1</span>,idx,t[i].val);</span><br><span class="line">        ans+=c[<span class="number">1</span>]*(t[i+<span class="number">1</span>].h-t[i].h);</span><br><span class="line">        ans+=<span class="built_in">abs</span>(sz[<span class="number">1</span>]-pre),pre=sz[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;扫描线参考&lt;a href=&quot;https://cwher.github.io/2018/08/11/HDU1542-Atlantis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HDU1542 Atlantis&lt;/a&gt;&lt;br&gt;可以横竖各做一遍&lt;br&gt;需要注意的是会重复计算，需要与上一次结果作差&lt;/p&gt;
&lt;p&gt;也可以只做一遍&lt;br&gt;用&lt;script type=&quot;math/tex&quot;&gt;sz&lt;/script&gt;数组记录宽度，&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;数组记录竖线数量&lt;br&gt;还需要&lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt;，&lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;记录是否有左右端点竖线&lt;br&gt;需要注意的是端点竖线重合和顺序问题&lt;br&gt;高度相同时先做覆盖再做取消覆盖，否则会重叠线段会多次计算&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="扫描线" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
</feed>
